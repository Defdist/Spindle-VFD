{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red39\green123\blue69;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c18039\c54510\c34118;\cssrgb\c100000\c100000\c100000;}
\margl1440\margr1440\vieww19860\viewh20180\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 PID Tutorial:\
https://www.youtube-nocookie.com/embed/zOByx3Izf5U?autoplay=1&iv_load_policy=3&loop=1&modestbranding=1&playlist=zOByx3Izf5U\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\partightenfactor0
\cf0 simplefoc.com\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\partightenfactor0

\f1\fs27\fsmilli13860 \cf2 \cb3 \expnd0\expndtw0\kerning0
A Simple Hall Sensored Motor Control Software Outline\
\
process fault macro\
    set fault flag\
    store fault info\
    update PSC\
\
initialize\
    init startup fault (forces wait for zero throttle)\
    setup pin change interrupts for ebrake and motor hall sensors\
    setup psc 16 khz centered PWM, interrupt\
    setup adc for mid PWM triggering, end of conversion interrupt\
    setup overcurrent trip hardware\
    setup watchdog timer reset\
    setup output for serial display\
\
main loop\
    output fault info to display\
    output readings to display\
    delay()\
\
pin change interrupt handler for ebrake and motor position sensors\
    if ebrake changed\
        if ebrake true then set ebrake fault and update PSC\
    if hall sensors changed\
        if not in rotation order then fault\
        store new position\
        update PSC\
\
end of ADC conversion interrupt handler\
    get raw reading\
    setup for next reading\
\
    switch(reading)        process raw reading\
\
        case motor current: \
            filter current reading\
            check current and update PWM clamps to control current\
            if current way too high then fault\
\
        case throttle: \
            filter throttle reading\
            fault on raw throttle out of range\
            if throttle value zero and ebrake false reset faults\
            convert throttle to 0-1 value\
            if fault then clamp throttle to 0\
            calculate throttle request in PWM units\
            apply overcurrent throttle clamp\
            result is new updated throttle PWM value\
            udpate PSC will schedule this into the hardware at the next PWM pulse\
\
        case battery voltage: \
            filter battery voltage reading\
            check for LVC and fault if too low\
\
        case motor temperature: \
            filter motor temperature reading\
            calculate new motor temperature, and dependent values\
            if motor temperature too high then motor temp fault\
\
update PSC function\
    asynch items\
    if fault shutdown PSC outputs\
    if commutation terminate cycle\
    synchronous items\
    lock\
    update registers per commutation position (per hall code)\
    unlock\
}