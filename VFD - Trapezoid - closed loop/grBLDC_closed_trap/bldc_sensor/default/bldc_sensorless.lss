
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000016b2  00001746  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800104  00800104  0000174a  2**0
                  ALLOC
  3 .debug_aranges 00000270  00000000  00000000  0000174a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c8  00000000  00000000  000019ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000155f  00000000  00000000  00002182  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  000036e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001416  00000000  00000000  00003e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00005264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000858  00000000  00000000  00005664  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3f  00000000  00000000  00005ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  000068fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


//! @brief set type of regulation
//! @post Open loop regulation Set
void mc_set_open_loop(){regulation_type = OPEN_LOOP;}
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
 * The timer 0 is used to generate an IT when an overflow occurs
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
       4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__vector_1>
         return FALSE;
      }
      str1++;str2++;
   }
   return TRUE;
}
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_3>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_5>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_12>
      34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_17>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <__vector_23>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_27>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

0000007c <str_run>:
      7c:	72 75 00                                            ru.

0000007f <str_stop>:
      7f:	73 74 00                                            st.

00000082 <str_help>:
      82:	68 65 6c 70 00                                      help.

00000087 <str_forward>:
      87:	66 77 00                                            fw.

0000008a <str_backward>:
      8a:	62 77 00                                            bw.

0000008d <str_set_speed>:
      8d:	73 73 00                                            ss.

00000090 <str_get_id>:
      90:	67 69 00                                            gi.

00000093 <str_get_status0>:
      93:	67 30 00                                            g0.

00000096 <str_get_status1>:
      96:	67 31 00                                            g1.

00000099 <msg_prompt>:
      99:	0d 3e 00                                            .>.

0000009c <msg_welcome>:
      9c:	0d 41 54 4d 45 4c 20 4d 6f 74 6f 72 20 43 6f 6e     .ATMEL Motor Con
      ac:	74 72 6f 6c 20 49 6e 74 65 72 66 61 63 65 00        trol Interface.

000000bb <msg_help>:
      bb:	0d 72 75 20 3a 20 72 75 6e 0d 73 74 20 3a 20 73     .ru : run.st : s
      cb:	74 6f 70 0d 66 77 20 3a 20 66 6f 72 77 61 72 64     top.fw : forward
      db:	0d 62 77 20 3a 20 62 61 63 6b 77 61 72 64 0d 73     .bw : backward.s
      eb:	73 20 3a 20 73 65 74 20 73 70 65 65 64 0d 67 69     s : set speed.gi
      fb:	20 3a 20 67 65 74 20 69 64 00                        : get id.

00000105 <msg_er_cmd_not_found>:
     105:	55 6e 6b 6e 6f 77 6e 20 43 6f 6d 6d 61 6e 64 00     Unknown Command.
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e2 eb       	ldi	r30, 0xB2	; 178
     12a:	f6 e1       	ldi	r31, 0x16	; 22
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a4 30       	cpi	r26, 0x04	; 4
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a4 e0       	ldi	r26, 0x04	; 4
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a0 37       	cpi	r26, 0x70	; 112
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 ba 00 	call	0x174	; 0x174 <main>
     14c:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <ascii_to_bin>:
//! @return none
//!
//!/
U8 ascii_to_bin (U8 c)
{
  if (c>='a') return(c-('a'-0x0A));
     154:	81 36       	cpi	r24, 0x61	; 97
     156:	10 f0       	brcs	.+4      	; 0x15c <ascii_to_bin+0x8>
     158:	87 55       	subi	r24, 0x57	; 87
     15a:	08 95       	ret
  if (c>='A') return(c-('A'-0x0A));
     15c:	81 34       	cpi	r24, 0x41	; 65
     15e:	10 f0       	brcs	.+4      	; 0x164 <ascii_to_bin+0x10>
     160:	87 53       	subi	r24, 0x37	; 55
     162:	08 95       	ret
  return(c-'0');
     164:	80 53       	subi	r24, 0x30	; 48
}
     166:	08 95       	ret

00000168 <bin_to_ascii>:
//! @return none
//!
//!/
U8 bin_to_ascii (U8 c)
{
  if (c>=0x0A) return (c+('A'-0x0A));
     168:	8a 30       	cpi	r24, 0x0A	; 10
     16a:	10 f0       	brcs	.+4      	; 0x170 <bin_to_ascii+0x8>
     16c:	89 5c       	subi	r24, 0xC9	; 201
     16e:	08 95       	ret
  return (c+'0');
     170:	80 5d       	subi	r24, 0xD0	; 208
}
     172:	08 95       	ret

00000174 <main>:
//!
int main(void)
{

  // init motor
  mc_init();  // launch initialization of the motor application
     174:	0e 94 6b 05 	call	0xad6	; 0xad6 <mc_init>
  
  // Initialyze the communication system for External Command through Uart
  ushell_task_init();
     178:	0e 94 18 08 	call	0x1030	; 0x1030 <ushell_task_init>

  // Start the motor
  mci_set_ref_speed(0);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 06 05 	call	0xa0c	; 0xa0c <mci_set_ref_speed>
  mci_run();
     182:	0e 94 87 05 	call	0xb0e	; 0xb0e <mci_run>
  mc_set_speed_loop(); // uncomment to activate the speed regulation loop
     186:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mc_set_speed_loop>
  while(1)
  {
    // Launch regulation loop
    // Timer 1 generate an IT (g_tick) all 250us
    // Sampling period = n * 250us
    if (g_tick == TRUE)
     18a:	80 91 1a 01 	lds	r24, 0x011A
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	29 f5       	brne	.+74     	; 0x1dc <main+0x68>
    {
      g_tick = FALSE;
     192:	10 92 1a 01 	sts	0x011A, r1

      // Get Current and potentiometer value
      mc_ADC_Scheduler();
     196:	0e 94 cb 02 	call	0x596	; 0x596 <mc_ADC_Scheduler>

      g_regulation_period += 1;
     19a:	80 91 04 01 	lds	r24, 0x0104
     19e:	90 91 05 01 	lds	r25, 0x0105
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	90 93 05 01 	sts	0x0105, r25
     1a8:	80 93 04 01 	sts	0x0104, r24
      if ( g_regulation_period >= 40 ) //n * 250us = Te
     1ac:	88 97       	sbiw	r24, 0x28	; 40
     1ae:	70 f0       	brcs	.+28     	; 0x1cc <main+0x58>
      {
        g_regulation_period = 0;
     1b0:	10 92 05 01 	sts	0x0105, r1
     1b4:	10 92 04 01 	sts	0x0104, r1

        if (ushell_active == FALSE)
     1b8:	80 91 2a 01 	lds	r24, 0x012A
     1bc:	88 23       	and	r24, r24
     1be:	21 f4       	brne	.+8      	; 0x1c8 <main+0x54>
        {
          // Set User Speed Command with potentiometer
          mci_set_ref_speed(mc_get_potentiometer_value());
     1c0:	0e 94 65 05 	call	0xaca	; 0xaca <mc_get_potentiometer_value>
     1c4:	0e 94 06 05 	call	0xa0c	; 0xa0c <mci_set_ref_speed>
        }
        mc_regulation_loop(); // launch regulation loop
     1c8:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
      }
      mc_duty_cycle(mc_get_duty_cycle());
     1cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     1d0:	0e 94 35 02 	call	0x46a	; 0x46a <mc_duty_cycle>
      ushell_task();
     1d4:	0e 94 89 07 	call	0xf12	; 0xf12 <ushell_task>
      mc_inrush_task();       // manage the inrush current
     1d8:	0e 94 1b 03 	call	0x636	; 0x636 <mc_inrush_task>

    }
    if (overcurrent==0)
     1dc:	80 91 18 01 	lds	r24, 0x0118
     1e0:	88 23       	and	r24, r24
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <main+0x74>
    {
	    A4910_Enable();
     1e4:	2c 9a       	sbi	0x05, 4	; 5
     1e6:	d1 cf       	rjmp	.-94     	; 0x18a <main+0x16>
    }
    else
    {
	    A4910_Disable();
     1e8:	2c 98       	cbi	0x05, 4	; 5
     1ea:	cf cf       	rjmp	.-98     	; 0x18a <main+0x16>

000001ec <mc_set_speed_loop>:


//! @brief set type of regulation
void mc_set_speed_loop(){regulation_type = SPEED_LOOP;}
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 07 01 	sts	0x0107, r24
     1f2:	08 95       	ret

000001f4 <mc_get_duty_cycle>:

//! @brief set type of regulation
U8 mc_get_duty_cycle()
{
  return duty_cycle;
}
     1f4:	80 91 06 01 	lds	r24, 0x0106
     1f8:	08 95       	ret

000001fa <mc_control_current>:
* need parameter : Kp_cur, Ki_cur ,Kd_cur and K_cur_scal in config_motor.h
* need to call in Te ms
* @return value of current, duty cycle on 8 bits
*/
U8 mc_control_current(U8 cur_cmd)
{
     1fa:	1f 93       	push	r17
     1fc:	18 2f       	mov	r17, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  cur_error = cur_cmd - (mci_get_measured_current());// value -255 <=> 255
     1fe:	0e 94 1c 05 	call	0xa38	; 0xa38 <mci_get_measured_current>
     202:	41 2f       	mov	r20, r17
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	48 1b       	sub	r20, r24
     208:	59 0b       	sbc	r21, r25
     20a:	50 93 11 01 	sts	0x0111, r21
     20e:	40 93 10 01 	sts	0x0110, r20

  // proportional term calculation
  cur_proportional = Kp_cur*cur_error;
     212:	50 93 17 01 	sts	0x0117, r21
     216:	40 93 16 01 	sts	0x0116, r20

  // integral term calculation
  cur_integral = cur_integral + cur_error;
     21a:	80 91 12 01 	lds	r24, 0x0112
     21e:	90 91 13 01 	lds	r25, 0x0113
     222:	84 0f       	add	r24, r20
     224:	95 1f       	adc	r25, r21
     226:	90 93 13 01 	sts	0x0113, r25
     22a:	80 93 12 01 	sts	0x0112, r24

  if(cur_integral >  255) cur_integral =  255;
     22e:	8f 3f       	cpi	r24, 0xFF	; 255
     230:	91 05       	cpc	r25, r1
     232:	39 f0       	breq	.+14     	; 0x242 <mc_control_current+0x48>
     234:	34 f0       	brlt	.+12     	; 0x242 <mc_control_current+0x48>
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 13 01 	sts	0x0113, r25
     23e:	80 93 12 01 	sts	0x0112, r24
  if(cur_integral < -255) cur_integral = -255;
     242:	80 91 12 01 	lds	r24, 0x0112
     246:	90 91 13 01 	lds	r25, 0x0113
     24a:	81 50       	subi	r24, 0x01	; 1
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	34 f4       	brge	.+12     	; 0x25c <mc_control_current+0x62>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	9f ef       	ldi	r25, 0xFF	; 255
     254:	90 93 13 01 	sts	0x0113, r25
     258:	80 93 12 01 	sts	0x0112, r24

  cur_integ = Ki_cur*cur_integral;
     25c:	20 91 12 01 	lds	r18, 0x0112
     260:	30 91 13 01 	lds	r19, 0x0113
     264:	c9 01       	movw	r24, r18
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	82 0f       	add	r24, r18
     26c:	93 1f       	adc	r25, r19
     26e:	90 93 15 01 	sts	0x0115, r25
     272:	80 93 14 01 	sts	0x0114, r24
  cur_der = Kd_cur*cur_derivative;

  last_cur_error = cur_error;*/

  // Duty Cycle calculation
  increment = cur_proportional + cur_integ;
     276:	48 0f       	add	r20, r24
     278:	59 1f       	adc	r21, r25
     27a:	ca 01       	movw	r24, r20
     27c:	aa 27       	eor	r26, r26
     27e:	97 fd       	sbrc	r25, 7
     280:	a0 95       	com	r26
     282:	ba 2f       	mov	r27, r26
  //increment += cur_der;
  increment = increment >> K_cur_scal;
     284:	24 e0       	ldi	r18, 0x04	; 4
     286:	b5 95       	asr	r27
     288:	a7 95       	ror	r26
     28a:	97 95       	ror	r25
     28c:	87 95       	ror	r24
     28e:	2a 95       	dec	r18
     290:	d1 f7       	brne	.-12     	; 0x286 <mc_control_current+0x8c>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	91 05       	cpc	r25, r1
     296:	a1 05       	cpc	r26, r1
     298:	b1 05       	cpc	r27, r1
     29a:	14 f0       	brlt	.+4      	; 0x2a0 <mc_control_current+0xa6>
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <mc_control_current+0xb2>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     2a0:	18 16       	cp	r1, r24
     2a2:	19 06       	cpc	r1, r25
     2a4:	1a 06       	cpc	r1, r26
     2a6:	1b 06       	cpc	r1, r27
     2a8:	0c f0       	brlt	.+2      	; 0x2ac <mc_control_current+0xb2>
     2aa:	80 e0       	ldi	r24, 0x00	; 0
    else Duty = (U8)(increment);
  }

  // return Duty Cycle
  return Duty;
}
     2ac:	1f 91       	pop	r17
     2ae:	08 95       	ret

000002b0 <mc_control_speed>:
* need parameter : Kp_speed, Ki_speed ,Kd_speed and K_speed_scal in config_motor.h
* need to call in Te ms
* @return value of speed, duty cycle on 8 bits
*/
U8 mc_control_speed(U8 speed_cmd)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	08 2f       	mov	r16, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  speed_error = speed_cmd - mci_get_measured_speed();// value -255 <=> 255
     2b6:	0e 94 19 05 	call	0xa32	; 0xa32 <mci_get_measured_speed>
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	08 1b       	sub	r16, r24
     2be:	11 09       	sbc	r17, r1
     2c0:	10 93 09 01 	sts	0x0109, r17
     2c4:	00 93 08 01 	sts	0x0108, r16

  // proportional term calculation
  speed_proportional = Kp_speed*speed_error;
     2c8:	c8 01       	movw	r24, r16
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	a8 01       	movw	r20, r16
     2d0:	a5 e0       	ldi	r26, 0x05	; 5
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	aa 95       	dec	r26
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <mc_control_speed+0x22>
     2da:	48 1b       	sub	r20, r24
     2dc:	59 0b       	sbc	r21, r25
     2de:	50 93 0f 01 	sts	0x010F, r21
     2e2:	40 93 0e 01 	sts	0x010E, r20
  if(speed_integral >  255) speed_integral =  255;
  if(speed_integral < -255) speed_integral = -255;

  speed_integ = Ki_speed*speed_integral;
*/
  speed_integral = Ki_speed*(speed_integral + speed_error);
     2e6:	80 91 0a 01 	lds	r24, 0x010A
     2ea:	90 91 0b 01 	lds	r25, 0x010B
     2ee:	80 0f       	add	r24, r16
     2f0:	91 1f       	adc	r25, r17
     2f2:	9c 01       	movw	r18, r24
     2f4:	f5 e0       	ldi	r31, 0x05	; 5
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	fa 95       	dec	r31
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <mc_control_speed+0x46>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	28 1b       	sub	r18, r24
     304:	39 0b       	sbc	r19, r25
     306:	30 93 0b 01 	sts	0x010B, r19
     30a:	20 93 0a 01 	sts	0x010A, r18

  if(speed_integral >  255) speed_integral =  255;
     30e:	2f 3f       	cpi	r18, 0xFF	; 255
     310:	31 05       	cpc	r19, r1
     312:	39 f0       	breq	.+14     	; 0x322 <mc_control_speed+0x72>
     314:	34 f0       	brlt	.+12     	; 0x322 <mc_control_speed+0x72>
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 0b 01 	sts	0x010B, r25
     31e:	80 93 0a 01 	sts	0x010A, r24
  if(speed_integral < -255) speed_integral = -255;
     322:	80 91 0a 01 	lds	r24, 0x010A
     326:	90 91 0b 01 	lds	r25, 0x010B
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	34 f4       	brge	.+12     	; 0x33c <mc_control_speed+0x8c>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	9f ef       	ldi	r25, 0xFF	; 255
     334:	90 93 0b 01 	sts	0x010B, r25
     338:	80 93 0a 01 	sts	0x010A, r24
  speed_der = Kd_speed*speed_derivative;

  last_speed_error = speed_error;*/

  // Duty Cycle calculation
  increment = speed_proportional + speed_integ;
     33c:	80 91 0c 01 	lds	r24, 0x010C
     340:	90 91 0d 01 	lds	r25, 0x010D
     344:	84 0f       	add	r24, r20
     346:	95 1f       	adc	r25, r21
     348:	9c 01       	movw	r18, r24
     34a:	44 27       	eor	r20, r20
     34c:	37 fd       	sbrc	r19, 7
     34e:	40 95       	com	r20
     350:	54 2f       	mov	r21, r20
  //increment += speed_der;
  increment = increment >> K_speed_scal;
     352:	74 e0       	ldi	r23, 0x04	; 4
     354:	55 95       	asr	r21
     356:	47 95       	ror	r20
     358:	37 95       	ror	r19
     35a:	27 95       	ror	r18
     35c:	7a 95       	dec	r23
     35e:	d1 f7       	brne	.-12     	; 0x354 <mc_control_speed+0xa4>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     360:	2f 3f       	cpi	r18, 0xFF	; 255
     362:	31 05       	cpc	r19, r1
     364:	41 05       	cpc	r20, r1
     366:	51 05       	cpc	r21, r1
     368:	14 f0       	brlt	.+4      	; 0x36e <mc_control_speed+0xbe>
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	08 c0       	rjmp	.+16     	; 0x37e <mc_control_speed+0xce>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     36e:	12 16       	cp	r1, r18
     370:	13 06       	cpc	r1, r19
     372:	14 06       	cpc	r1, r20
     374:	15 06       	cpc	r1, r21
     376:	14 f0       	brlt	.+4      	; 0x37c <mc_control_speed+0xcc>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <mc_control_speed+0xce>
    else Duty = (U8)(increment);
     37c:	82 2f       	mov	r24, r18
  }

  // return Duty Cycle
  return Duty;
}
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <mc_regulation_loop>:

//! @brief launch speed control or no regulation
//! @post new duty cycle on PWM
void mc_regulation_loop()
{
  switch(regulation_type)
     384:	80 91 07 01 	lds	r24, 0x0107
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	41 f0       	breq	.+16     	; 0x39c <mc_regulation_loop+0x18>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	18 f0       	brcs	.+6      	; 0x396 <mc_regulation_loop+0x12>
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	91 f4       	brne	.+36     	; 0x3b8 <mc_regulation_loop+0x34>
     394:	0b c0       	rjmp	.+22     	; 0x3ac <mc_regulation_loop+0x28>
  {
    case OPEN_LOOP     : duty_cycle = mci_get_ref_speed();break;
     396:	0e 94 09 05 	call	0xa12	; 0xa12 <mci_get_ref_speed>
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <mc_regulation_loop+0x22>
    case SPEED_LOOP    : duty_cycle = mc_control_speed(2*mci_get_ref_speed());break;
     39c:	0e 94 09 05 	call	0xa12	; 0xa12 <mci_get_ref_speed>
     3a0:	88 0f       	add	r24, r24
     3a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <mc_control_speed>
     3a6:	80 93 06 01 	sts	0x0106, r24
     3aa:	08 95       	ret
    case CURRENT_LOOP  : duty_cycle = mc_control_current(mc_get_potentiometer_value());break;
     3ac:	0e 94 65 05 	call	0xaca	; 0xaca <mc_get_potentiometer_value>
     3b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <mc_control_current>
     3b4:	80 93 06 01 	sts	0x0106, r24
     3b8:	08 95       	ret

000003ba <PSC_Init>:


//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
     3ba:	10 92 a1 00 	sts	0x00A1, r1
     3be:	10 92 a0 00 	sts	0x00A0, r1
     3c2:	10 92 a3 00 	sts	0x00A3, r1
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 a2 00 	sts	0x00A2, r24
     3cc:	10 92 a5 00 	sts	0x00A5, r1
     3d0:	10 92 a4 00 	sts	0x00A4, r1
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
     3d4:	10 92 a7 00 	sts	0x00A7, r1
     3d8:	10 92 a6 00 	sts	0x00A6, r1
     3dc:	10 92 a9 00 	sts	0x00A9, r1
     3e0:	80 93 a8 00 	sts	0x00A8, r24
     3e4:	10 92 ab 00 	sts	0x00AB, r1
     3e8:	10 92 aa 00 	sts	0x00AA, r1
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
     3ec:	10 92 ad 00 	sts	0x00AD, r1
     3f0:	10 92 ac 00 	sts	0x00AC, r1
     3f4:	10 92 af 00 	sts	0x00AF, r1
     3f8:	80 93 ae 00 	sts	0x00AE, r24
     3fc:	10 92 b1 00 	sts	0x00B1, r1
     400:	10 92 b0 00 	sts	0x00B0, r1
   Psc_set_register_RB(RB_VAL);
     404:	10 92 b3 00 	sts	0x00B3, r1
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	80 93 b2 00 	sts	0x00B2, r24

   Psc_config();
     40e:	84 e1       	ldi	r24, 0x14	; 20
     410:	80 93 b5 00 	sts	0x00B5, r24

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
     414:	98 e9       	ldi	r25, 0x98	; 152
     416:	90 93 b8 00 	sts	0x00B8, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
     41a:	88 ef       	ldi	r24, 0xF8	; 248
     41c:	80 93 b9 00 	sts	0x00B9, r24
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
     420:	90 93 ba 00 	sts	0x00BA, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	80 93 bc 00 	sts	0x00BC, r24
   PIM = (1<<PEVE1);
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	80 93 bb 00 	sts	0x00BB, r24

   Psc_run();
     430:	81 e2       	ldi	r24, 0x21	; 33
     432:	80 93 b7 00 	sts	0x00B7, r24
}
     436:	08 95       	ret

00000438 <mc_get_hall>:
* @pre configuration of port PB and PD
* @post new value of position
*/
Hall_Position mc_get_hall(void)
{
  return HALL_SENSOR_VALUE();
     438:	49 b1       	in	r20, 0x09	; 9
     43a:	86 b1       	in	r24, 0x06	; 6
     43c:	29 b1       	in	r18, 0x09	; 9
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	80 74       	andi	r24, 0x40	; 64
     442:	90 70       	andi	r25, 0x00	; 0
     444:	35 e0       	ldi	r19, 0x05	; 5
     446:	95 95       	asr	r25
     448:	87 95       	ror	r24
     44a:	3a 95       	dec	r19
     44c:	e1 f7       	brne	.-8      	; 0x446 <mc_get_hall+0xe>
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	20 72       	andi	r18, 0x20	; 32
     452:	30 70       	andi	r19, 0x00	; 0
     454:	93 e0       	ldi	r25, 0x03	; 3
     456:	35 95       	asr	r19
     458:	27 95       	ror	r18
     45a:	9a 95       	dec	r25
     45c:	e1 f7       	brne	.-8      	; 0x456 <mc_get_hall+0x1e>
     45e:	82 2b       	or	r24, r18
     460:	44 1f       	adc	r20, r20
     462:	44 27       	eor	r20, r20
     464:	44 1f       	adc	r20, r20
}
     466:	84 2b       	or	r24, r20
     468:	08 95       	ret

0000046a <mc_duty_cycle>:
#if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
   U8 dutydt;   /* duty with dead time */
   if (duty >= DEADTIME) dutydt = duty - DEADTIME;
#endif
   
   Psc_lock();
     46a:	e5 eb       	ldi	r30, 0xB5	; 181
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	94 e3       	ldi	r25, 0x34	; 52
     470:	90 83       	st	Z, r25

  // Duty = 0   => Duty Cycle   0%
  // Duty = 255 => Duty Cycle 100%
 
#if (CURRENT_DECAY == FAST_DECAY)
   Psc_set_module_A(duty,A_RA_VAL,duty);
     472:	10 92 a1 00 	sts	0x00A1, r1
     476:	80 93 a0 00 	sts	0x00A0, r24
     47a:	10 92 a3 00 	sts	0x00A3, r1
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	90 93 a2 00 	sts	0x00A2, r25
     484:	10 92 a5 00 	sts	0x00A5, r1
     488:	80 93 a4 00 	sts	0x00A4, r24
   Psc_set_module_B(duty,B_RA_VAL,duty);
     48c:	10 92 a7 00 	sts	0x00A7, r1
     490:	80 93 a6 00 	sts	0x00A6, r24
     494:	10 92 a9 00 	sts	0x00A9, r1
     498:	90 93 a8 00 	sts	0x00A8, r25
     49c:	10 92 ab 00 	sts	0x00AB, r1
     4a0:	80 93 aa 00 	sts	0x00AA, r24
   Psc_set_module_C(duty,C_RA_VAL,duty);
     4a4:	10 92 ad 00 	sts	0x00AD, r1
     4a8:	80 93 ac 00 	sts	0x00AC, r24
     4ac:	10 92 af 00 	sts	0x00AF, r1
     4b0:	90 93 ae 00 	sts	0x00AE, r25
     4b4:	10 92 b1 00 	sts	0x00B1, r1
     4b8:	80 93 b0 00 	sts	0x00B0, r24
   Psc_set_module_B(duty,B_RA_VAL,0);
   Psc_set_module_C(duty,C_RA_VAL,0);
#endif
#endif
   
   Psc_unlock();
     4bc:	84 e1       	ldi	r24, 0x14	; 20
     4be:	80 83       	st	Z, r24
}
     4c0:	08 95       	ret

000004c2 <mc_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_init_timer1(void)
{
  TCCR1A = 0; //Normal port operation + Mode CTC
     4c2:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + prescaler 64
     4c6:	8b e0       	ldi	r24, 0x0B	; 11
     4c8:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0;
     4cc:	10 92 82 00 	sts	0x0082, r1
  OCR1AH = 0;
     4d0:	10 92 89 00 	sts	0x0089, r1
  OCR1AL = 63; // f ocra = 16MHz %64 %63
     4d4:	8f e3       	ldi	r24, 0x3F	; 63
     4d6:	80 93 88 00 	sts	0x0088, r24
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
     4da:	82 e0       	ldi	r24, 0x02	; 2
     4dc:	80 93 6f 00 	sts	0x006F, r24
}
     4e0:	08 95       	ret

000004e2 <mc_init_HW>:


//! @brief mc_init_HW : Hardware Initialization
//! @post initialization of hardware
void mc_init_HW(void)
{
     4e2:	1f 93       	push	r17
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
     4e4:	85 b1       	in	r24, 0x05	; 5
     4e6:	8c 73       	andi	r24, 0x3C	; 60
     4e8:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
     4ea:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
     4ec:	58 98       	cbi	0x0b, 0	; 11

  // Set PSC MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
     4ee:	83 ec       	ldi	r24, 0xC3	; 195
     4f0:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
     4f2:	21 e0       	ldi	r18, 0x01	; 1
     4f4:	27 b9       	out	0x07, r18	; 7
  DDRD = (1<<DDD0);
     4f6:	2a b9       	out	0x0a, r18	; 10
  
  A4910pinPB4_reset_Init(); //configure pin to digital output
     4f8:	24 9a       	sbi	0x04, 4	; 4
  A4910_Enable(); //enable MOSFET driver
     4fa:	2c 9a       	sbi	0x05, 4	; 5

  // Set to disable digital input circuitry on all pins used as analog inputs.
  // This reduces power consumption, particularly when an analog signal is near Vcc/2.
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D); //CUR_B & CUR_C ADC inputs
     4fc:	83 e0       	ldi	r24, 0x03	; 3
     4fe:	80 93 7f 00 	sts	0x007F, r24
  DIDR0 = (1<<ADC6D); //CUR_A ADC input
     502:	10 e4       	ldi	r17, 0x40	; 64
     504:	10 93 7e 00 	sts	0x007E, r17
  
  //vref_source(); // Select the Vref Source
  //JTS2do: need to use 2.56 internal reference when measuring phase currents (absolute accuracy)
  //JTS2do: need to use VCC when measuring PWM from 328p (ratiometric)
  //The first ADC measurement after each switch should be discarded
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
     508:	80 91 7b 00 	lds	r24, 0x007B
     50c:	8f 7b       	andi	r24, 0xBF	; 191
     50e:	80 93 7b 00 	sts	0x007B, r24
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
     512:	80 91 7b 00 	lds	r24, 0x007B
     516:	80 62       	ori	r24, 0x20	; 32
     518:	80 93 7b 00 	sts	0x007B, r24
  // Select the Vref Source
//  init_vref_source ();

//  init_adc();
  Adc_config();
     51c:	90 ec       	ldi	r25, 0xC0	; 192
     51e:	90 93 7c 00 	sts	0x007C, r25
     522:	8a e8       	ldi	r24, 0x8A	; 138
     524:	80 93 7a 00 	sts	0x007A, r24
     528:	90 93 7b 00 	sts	0x007B, r25
  Amp1_config();
     52c:	8d e8       	ldi	r24, 0x8D	; 141
     52e:	80 93 76 00 	sts	0x0076, r24
  
  // Be careful : initialize DAC and Over_Current before PWM.
  // DAC is used for over current level
  Dac_config();
     532:	85 e0       	ldi	r24, 0x05	; 5
     534:	80 93 90 00 	sts	0x0090, r24
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
     538:	85 ea       	ldi	r24, 0xA5	; 165
     53a:	80 93 92 00 	sts	0x0092, r24
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
  TCCR0A = 0;
     53e:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
     540:	84 e0       	ldi	r24, 0x04	; 4
     542:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
     544:	20 93 6e 00 	sts	0x006E, r18
  Dac_config();
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
    
  mc_init_timer0();
  mc_init_timer1();
     548:	0e 94 61 02 	call	0x4c2	; 0x4c2 <mc_init_timer1>

  Comp_0_config();
     54c:	94 ec       	ldi	r25, 0xC4	; 196
     54e:	90 93 94 00 	sts	0x0094, r25
  Comp_1_config();
     552:	85 e8       	ldi	r24, 0x85	; 133
     554:	80 93 95 00 	sts	0x0095, r24
  Comp_2_config();
     558:	90 93 96 00 	sts	0x0096, r25
  
  // Use PCINT14 to detect change on H2 sensor
  PCMSK1 = (1<<PCINT14);
     55c:	10 93 6b 00 	sts	0x006B, r17
  PCICR = (1<<PCIE1);
     560:	82 e0       	ldi	r24, 0x02	; 2
     562:	80 93 68 00 	sts	0x0068, r24

//  Start_pll_32_mega(); // Start the PLL and use the 32 MHz PLL output
  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
     566:	86 e0       	ldi	r24, 0x06	; 6
     568:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
     56a:	09 b4       	in	r0, 0x29	; 41
     56c:	00 fe       	sbrs	r0, 0
     56e:	fd cf       	rjmp	.-6      	; 0x56a <mc_init_HW+0x88>


  // => PSCx_Init(Period_Half, Dutyx0_Half, Synchro, Dutyx1_Half)
  PSC_Init();
     570:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PSC_Init>

}
     574:	1f 91       	pop	r17
     576:	08 95       	ret

00000578 <__vector_12>:
  ISR(TIMER1_COMPA_vect)
#else
#pragma vector = TIMER1_COMPA_vect
__interrupt void launch_sampling_period(void)
#endif
{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	8f 93       	push	r24
  g_tick = TRUE;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 1a 01 	sts	0x011A, r24
}
     58a:	8f 91       	pop	r24
     58c:	0f 90       	pop	r0
     58e:	0f be       	out	0x3f, r0	; 63
     590:	0f 90       	pop	r0
     592:	1f 90       	pop	r1
     594:	18 95       	reti

00000596 <mc_ADC_Scheduler>:

//! @brief Launch the scheduler for the ADC
//! @post Get results for Potentiometer and current values.
void mc_ADC_Scheduler(void)
{
  switch(State)
     596:	90 91 1e 01 	lds	r25, 0x011E
     59a:	91 30       	cpi	r25, 0x01	; 1
     59c:	29 f1       	breq	.+74     	; 0x5e8 <mc_ADC_Scheduler+0x52>
     59e:	91 30       	cpi	r25, 0x01	; 1
     5a0:	18 f0       	brcs	.+6      	; 0x5a8 <mc_ADC_Scheduler+0x12>
     5a2:	92 30       	cpi	r25, 0x02	; 2
     5a4:	d1 f5       	brne	.+116    	; 0x61a <mc_ADC_Scheduler+0x84>
     5a6:	06 c0       	rjmp	.+12     	; 0x5b4 <mc_ADC_Scheduler+0x1e>
  {
  case CONV_INIT :
    ADC_State = FREE;
     5a8:	10 92 1f 01 	sts	0x011F, r1
    State = CONV_CURRENT;
     5ac:	82 e0       	ldi	r24, 0x02	; 2
     5ae:	80 93 1e 01 	sts	0x011E, r24
     5b2:	08 95       	ret
    break;

  case CONV_CURRENT :              /* previous state was CONV_CURRENT */
    if(ADC_State == FREE)
     5b4:	80 91 1f 01 	lds	r24, 0x011F
     5b8:	88 23       	and	r24, r24
     5ba:	79 f5       	brne	.+94     	; 0x61a <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	80 93 1f 01 	sts	0x011F, r24
      State= CONV_POT;                        /* new state is CONV_POT */
     5c2:	80 93 1e 01 	sts	0x011E, r24
      Adc_left_adjust_result();
     5c6:	80 91 7c 00 	lds	r24, 0x007C
     5ca:	80 62       	ori	r24, 0x20	; 32
     5cc:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_ISRC); /* get POT on ISRC input */
     5d0:	80 91 7c 00 	lds	r24, 0x007C
     5d4:	80 7e       	andi	r24, 0xE0	; 224
     5d6:	8d 60       	ori	r24, 0x0D	; 13
     5d8:	80 93 7c 00 	sts	0x007C, r24
     5dc:	80 91 7a 00 	lds	r24, 0x007A
     5e0:	80 64       	ori	r24, 0x40	; 64
     5e2:	80 93 7a 00 	sts	0x007A, r24
     5e6:	08 95       	ret
    }
    break;

  case CONV_POT :                           /* previous state was CONV_POT */
    if(ADC_State == FREE)
     5e8:	80 91 1f 01 	lds	r24, 0x011F
     5ec:	88 23       	and	r24, r24
     5ee:	a9 f4       	brne	.+42     	; 0x61a <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     5f0:	90 93 1f 01 	sts	0x011F, r25
      State = CONV_CURRENT;                   /* new state is CONV_CURRENT */
     5f4:	82 e0       	ldi	r24, 0x02	; 2
     5f6:	80 93 1e 01 	sts	0x011E, r24
      Adc_right_adjust_result();
     5fa:	80 91 7c 00 	lds	r24, 0x007C
     5fe:	8f 7d       	andi	r24, 0xDF	; 223
     600:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
     604:	80 91 7c 00 	lds	r24, 0x007C
     608:	80 7e       	andi	r24, 0xE0	; 224
     60a:	8f 60       	ori	r24, 0x0F	; 15
     60c:	80 93 7c 00 	sts	0x007C, r24
     610:	80 91 7a 00 	lds	r24, 0x007A
     614:	80 64       	ori	r24, 0x40	; 64
     616:	80 93 7a 00 	sts	0x007A, r24
     61a:	08 95       	ret

0000061c <mc_disable_during_inrush>:

//! @brief the purpose of this function is to disable \n
//!   the overcurrent detection during startup (inrush current) \n
void mc_disable_during_inrush(void)
{
  inrush_delay = (U16) 500;
     61c:	84 ef       	ldi	r24, 0xF4	; 244
     61e:	91 e0       	ldi	r25, 0x01	; 1
     620:	90 93 1d 01 	sts	0x011D, r25
     624:	80 93 1c 01 	sts	0x011C, r24
  inrush_mask_flag = TRUE;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 1b 01 	sts	0x011B, r24
  Disable_over_current();
     62e:	88 ef       	ldi	r24, 0xF8	; 248
     630:	80 93 b9 00 	sts	0x00B9, r24
}
     634:	08 95       	ret

00000636 <mc_inrush_task>:

//! @brief the purpose of this function is to manage the delay \n
//!   used when the overcurrent detection is disabled \n
void mc_inrush_task(void)
{ 
  if (inrush_mask_flag == TRUE)
     636:	80 91 1b 01 	lds	r24, 0x011B
     63a:	81 30       	cpi	r24, 0x01	; 1
     63c:	81 f4       	brne	.+32     	; 0x65e <mc_inrush_task+0x28>
  {
    if (inrush_delay-- == 0)
     63e:	80 91 1c 01 	lds	r24, 0x011C
     642:	90 91 1d 01 	lds	r25, 0x011D
     646:	01 97       	sbiw	r24, 0x01	; 1
     648:	90 93 1d 01 	sts	0x011D, r25
     64c:	80 93 1c 01 	sts	0x011C, r24
     650:	01 96       	adiw	r24, 0x01	; 1
     652:	29 f4       	brne	.+10     	; 0x65e <mc_inrush_task+0x28>
    {
      inrush_mask_flag = FALSE;
     654:	10 92 1b 01 	sts	0x011B, r1
      Enable_over_current();
     658:	8e ef       	ldi	r24, 0xFE	; 254
     65a:	80 93 b9 00 	sts	0x00B9, r24
     65e:	08 95       	ret

00000660 <__vector_5>:
  ISR(PSC_FAULT_vect)
#else
#pragma vector = PSC_FAULT_vect
__interrupt void mc_overcurrent_detect(void)
#endif
{
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
  PIFR = (1<<PEV1); // clear the interrupt
     682:	84 e0       	ldi	r24, 0x04	; 4
     684:	80 93 bc 00 	sts	0x00BC, r24
  overcurrent = TRUE;
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	80 93 18 01 	sts	0x0118, r24
  mci_stop();
     68e:	0e 94 03 05 	call	0xa06	; 0xa06 <mci_stop>
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_27>:
  ISR(ADC_vect)
#else
#pragma vector = ADC_vect
__interrupt void ADC_end_of_conversion(void)
#endif
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
     6d6:	80 91 7c 00 	lds	r24, 0x007C
     6da:	80 7e       	andi	r24, 0xE0	; 224
     6dc:	82 61       	ori	r24, 0x12	; 18
     6de:	80 93 7c 00 	sts	0x007C, r24
  if(State == CONV_POT) mc_set_potentiometer_value(Adc_get_8_bits_result());
     6e2:	80 91 1e 01 	lds	r24, 0x011E
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	21 f4       	brne	.+8      	; 0x6f2 <__vector_27+0x3e>
     6ea:	80 91 79 00 	lds	r24, 0x0079
     6ee:	0e 94 68 05 	call	0xad0	; 0xad0 <mc_set_potentiometer_value>
  if(State == CONV_CURRENT) mci_store_measured_current(Adc_get_10_bits_result());
     6f2:	80 91 1e 01 	lds	r24, 0x011E
     6f6:	82 30       	cpi	r24, 0x02	; 2
     6f8:	51 f4       	brne	.+20     	; 0x70e <__vector_27+0x5a>
     6fa:	30 91 78 00 	lds	r19, 0x0078
     6fe:	20 91 79 00 	lds	r18, 0x0079
     702:	92 2f       	mov	r25, r18
     704:	80 e0       	ldi	r24, 0x00	; 0
     706:	83 0f       	add	r24, r19
     708:	91 1d       	adc	r25, r1
     70a:	0e 94 2d 05 	call	0xa5a	; 0xa5a <mci_store_measured_current>
  ADC_State = FREE;
     70e:	10 92 1f 01 	sts	0x011F, r1
}
     712:	ff 91       	pop	r31
     714:	ef 91       	pop	r30
     716:	bf 91       	pop	r27
     718:	af 91       	pop	r26
     71a:	9f 91       	pop	r25
     71c:	8f 91       	pop	r24
     71e:	7f 91       	pop	r23
     720:	6f 91       	pop	r22
     722:	5f 91       	pop	r21
     724:	4f 91       	pop	r20
     726:	3f 91       	pop	r19
     728:	2f 91       	pop	r18
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <mc_estimation_speed>:
void mc_estimation_speed(void)
{
  U16 timer_value;
  U32 new_measured_speed;

  if (g_mc_read_enable==TRUE)
     734:	80 91 19 01 	lds	r24, 0x0119
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	41 f5       	brne	.+80     	; 0x78c <mc_estimation_speed+0x58>
  {
    // Two 8 bits variables are use to simulate a 16 bits timers
    timer_value = (ovf_timer<<8) + TCNT0;
     73c:	26 b5       	in	r18, 0x26	; 38
     73e:	90 91 20 01 	lds	r25, 0x0120
     742:	80 e0       	ldi	r24, 0x00	; 0
     744:	ac 01       	movw	r20, r24
     746:	42 0f       	add	r20, r18
     748:	51 1d       	adc	r21, r1
     74a:	9a 01       	movw	r18, r20

    if (timer_value == 0) {timer_value += 1 ;} // warning DIV by 0
     74c:	41 15       	cp	r20, r1
     74e:	51 05       	cpc	r21, r1
     750:	11 f4       	brne	.+4      	; 0x756 <mc_estimation_speed+0x22>
     752:	21 e0       	ldi	r18, 0x01	; 1
     754:	30 e0       	ldi	r19, 0x00	; 0
    new_measured_speed = K_SPEED / timer_value;
     756:	40 e0       	ldi	r20, 0x00	; 0
     758:	50 e0       	ldi	r21, 0x00	; 0
     75a:	65 e8       	ldi	r22, 0x85	; 133
     75c:	7f ec       	ldi	r23, 0xCF	; 207
     75e:	80 e0       	ldi	r24, 0x00	; 0
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	0e 94 51 08 	call	0x10a2	; 0x10a2 <__divmodsi4>
        average = 0;
      }
      else count++;
    #else
      // else get the real speed
      mc_set_measured_speed(new_measured_speed);
     766:	c9 01       	movw	r24, r18
     768:	da 01       	movw	r26, r20
     76a:	8f 3f       	cpi	r24, 0xFF	; 255
     76c:	91 05       	cpc	r25, r1
     76e:	a1 05       	cpc	r26, r1
     770:	b1 05       	cpc	r27, r1
     772:	29 f0       	breq	.+10     	; 0x77e <mc_estimation_speed+0x4a>
     774:	20 f0       	brcs	.+8      	; 0x77e <mc_estimation_speed+0x4a>
     776:	8f ef       	ldi	r24, 0xFF	; 255
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	0e 94 16 05 	call	0xa2c	; 0xa2c <mc_set_measured_speed>
    #endif

    // Reset Timer 0 register and variables
    TCNT0=0x00;
     782:	16 bc       	out	0x26, r1	; 38
    ovf_timer = 0;
     784:	10 92 20 01 	sts	0x0120, r1
    g_mc_read_enable=FALSE;
     788:	10 92 19 01 	sts	0x0119, r1
     78c:	08 95       	ret

0000078e <__vector_17>:
  ISR(TIMER0_OVF_vect)
#else
#pragma vector = TIMER0_OVF_vect
__interrupt void ovfl_timer0(void)
#endif
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
  TCNT0=0x00;
     7b0:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
     7b2:	80 91 20 01 	lds	r24, 0x0120
     7b6:	8f 5f       	subi	r24, 0xFF	; 255
     7b8:	80 93 20 01 	sts	0x0120, r24
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
     7bc:	84 36       	cpi	r24, 0x64	; 100
     7be:	58 f0       	brcs	.+22     	; 0x7d6 <__vector_17+0x48>
  {
    ovf_timer = 0;
     7c0:	10 92 20 01 	sts	0x0120, r1
    mc_set_measured_speed(0);
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	0e 94 16 05 	call	0xa2c	; 0xa2c <mc_set_measured_speed>
    //if the motor was turning and no stop order
    // was given, motor run automatically.
    if(mci_motor_is_running())mci_retry_run();
     7ca:	0e 94 00 05 	call	0xa00	; 0xa00 <mci_motor_is_running>
     7ce:	88 23       	and	r24, r24
     7d0:	11 f0       	breq	.+4      	; 0x7d6 <__vector_17+0x48>
     7d2:	0e 94 77 05 	call	0xaee	; 0xaee <mci_retry_run>
  }
}
     7d6:	ff 91       	pop	r31
     7d8:	ef 91       	pop	r30
     7da:	bf 91       	pop	r27
     7dc:	af 91       	pop	r26
     7de:	9f 91       	pop	r25
     7e0:	8f 91       	pop	r24
     7e2:	7f 91       	pop	r23
     7e4:	6f 91       	pop	r22
     7e6:	5f 91       	pop	r21
     7e8:	4f 91       	pop	r20
     7ea:	3f 91       	pop	r19
     7ec:	2f 91       	pop	r18
     7ee:	0f 90       	pop	r0
     7f0:	0f be       	out	0x3f, r0	; 63
     7f2:	0f 90       	pop	r0
     7f4:	1f 90       	pop	r1
     7f6:	18 95       	reti

000007f8 <mc_switch_commutation>:
*   according to sensor or estimation position
*
* @param position (1 to 6) and direction (FORWARD or BACKWARD)
*/
void mc_switch_commutation(Hall_Position position)
{
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	18 2f       	mov	r17, r24
  // get the motor direction to commute the right switches.
  char direction = mci_get_motor_direction();
     7fe:	0e 94 13 05 	call	0xa26	; 0xa26 <mci_get_motor_direction>
     802:	08 2f       	mov	r16, r24

  // Switches are commuted only if the user start the motor
  if (mci_motor_is_running())
     804:	0e 94 00 05 	call	0xa00	; 0xa00 <mci_motor_is_running>
     808:	88 23       	and	r24, r24
     80a:	89 f1       	breq	.+98     	; 0x86e <mc_switch_commutation+0x76>
  {
    mc_duty_cycle(mc_get_duty_cycle());
     80c:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     810:	0e 94 35 02 	call	0x46a	; 0x46a <mc_duty_cycle>
    switch(position)
     814:	13 30       	cpi	r17, 0x03	; 3
     816:	19 f1       	breq	.+70     	; 0x85e <mc_switch_commutation+0x66>
     818:	14 30       	cpi	r17, 0x04	; 4
     81a:	28 f4       	brcc	.+10     	; 0x826 <mc_switch_commutation+0x2e>
     81c:	11 30       	cpi	r17, 0x01	; 1
     81e:	51 f0       	breq	.+20     	; 0x834 <mc_switch_commutation+0x3c>
     820:	12 30       	cpi	r17, 0x02	; 2
     822:	69 f5       	brne	.+90     	; 0x87e <mc_switch_commutation+0x86>
     824:	16 c0       	rjmp	.+44     	; 0x852 <mc_switch_commutation+0x5a>
     826:	15 30       	cpi	r17, 0x05	; 5
     828:	41 f0       	breq	.+16     	; 0x83a <mc_switch_commutation+0x42>
     82a:	15 30       	cpi	r17, 0x05	; 5
     82c:	48 f0       	brcs	.+18     	; 0x840 <mc_switch_commutation+0x48>
     82e:	16 30       	cpi	r17, 0x06	; 6
     830:	31 f5       	brne	.+76     	; 0x87e <mc_switch_commutation+0x86>
     832:	09 c0       	rjmp	.+18     	; 0x846 <mc_switch_commutation+0x4e>
    {
    // cases according to rotor position
      case HS_001:  if (direction==CCW)  {Set_Q5Q2();}
     834:	01 30       	cpi	r16, 0x01	; 1
     836:	49 f4       	brne	.+18     	; 0x84a <mc_switch_commutation+0x52>
     838:	0a c0       	rjmp	.+20     	; 0x84e <mc_switch_commutation+0x56>
                    else                      {Set_Q1Q6();}
                    break;

      case HS_101:  if (direction==CCW)  {Set_Q3Q2();}
     83a:	01 30       	cpi	r16, 0x01	; 1
     83c:	61 f4       	brne	.+24     	; 0x856 <mc_switch_commutation+0x5e>
     83e:	0d c0       	rjmp	.+26     	; 0x85a <mc_switch_commutation+0x62>
                    else                      {Set_Q1Q4();}
                    break;

      case HS_100:  if (direction==CCW)  {Set_Q3Q6();}
     840:	01 30       	cpi	r16, 0x01	; 1
     842:	79 f4       	brne	.+30     	; 0x862 <mc_switch_commutation+0x6a>
     844:	10 c0       	rjmp	.+32     	; 0x866 <mc_switch_commutation+0x6e>
                    else                      {Set_Q5Q4();}
                    break;

      case HS_110:  if (direction==CCW)  {Set_Q1Q6();}
     846:	01 30       	cpi	r16, 0x01	; 1
     848:	11 f4       	brne	.+4      	; 0x84e <mc_switch_commutation+0x56>
     84a:	81 e2       	ldi	r24, 0x21	; 33
     84c:	0d c0       	rjmp	.+26     	; 0x868 <mc_switch_commutation+0x70>
                    else                      {Set_Q5Q2();}
     84e:	82 e1       	ldi	r24, 0x12	; 18
     850:	0b c0       	rjmp	.+22     	; 0x868 <mc_switch_commutation+0x70>
                    break;

      case HS_010:  if (direction==CCW)  {Set_Q1Q4();}
     852:	01 30       	cpi	r16, 0x01	; 1
     854:	11 f4       	brne	.+4      	; 0x85a <mc_switch_commutation+0x62>
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	07 c0       	rjmp	.+14     	; 0x868 <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q2();}
     85a:	86 e0       	ldi	r24, 0x06	; 6
     85c:	05 c0       	rjmp	.+10     	; 0x868 <mc_switch_commutation+0x70>
                    break;

      case HS_011:  if (direction==CCW)  {Set_Q5Q4();}
     85e:	01 30       	cpi	r16, 0x01	; 1
     860:	11 f4       	brne	.+4      	; 0x866 <mc_switch_commutation+0x6e>
     862:	88 e1       	ldi	r24, 0x18	; 24
     864:	01 c0       	rjmp	.+2      	; 0x868 <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q6();}
     866:	84 e2       	ldi	r24, 0x24	; 36
     868:	80 93 b6 00 	sts	0x00B6, r24
     86c:	08 c0       	rjmp	.+16     	; 0x87e <mc_switch_commutation+0x86>
      default : break;
      }
  }
  else
  {
    Set_none(); // all switches are switched OFF
     86e:	10 92 b6 00 	sts	0x00B6, r1
     872:	2f 98       	cbi	0x05, 7	; 5
     874:	2e 98       	cbi	0x05, 6	; 5
     876:	29 98       	cbi	0x05, 1	; 5
     878:	58 98       	cbi	0x0b, 0	; 11
     87a:	40 98       	cbi	0x08, 0	; 8
     87c:	28 98       	cbi	0x05, 0	; 5
  }
}
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	08 95       	ret

00000884 <__vector_3>:
  ISR(HALL_C())
#else
#pragma vector = HALL_C()
__interrupt void mc_hall_c(void)
#endif
{
     884:	1f 92       	push	r1
     886:	0f 92       	push	r0
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	0f 92       	push	r0
     88c:	11 24       	eor	r1, r1
     88e:	2f 93       	push	r18
     890:	3f 93       	push	r19
     892:	4f 93       	push	r20
     894:	5f 93       	push	r21
     896:	6f 93       	push	r22
     898:	7f 93       	push	r23
     89a:	8f 93       	push	r24
     89c:	9f 93       	push	r25
     89e:	af 93       	push	r26
     8a0:	bf 93       	push	r27
     8a2:	ef 93       	push	r30
     8a4:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     8a6:	49 b1       	in	r20, 0x09	; 9
     8a8:	86 b1       	in	r24, 0x06	; 6
     8aa:	29 b1       	in	r18, 0x09	; 9
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	80 74       	andi	r24, 0x40	; 64
     8b0:	90 70       	andi	r25, 0x00	; 0
     8b2:	65 e0       	ldi	r22, 0x05	; 5
     8b4:	95 95       	asr	r25
     8b6:	87 95       	ror	r24
     8b8:	6a 95       	dec	r22
     8ba:	e1 f7       	brne	.-8      	; 0x8b4 <__vector_3+0x30>
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	20 72       	andi	r18, 0x20	; 32
     8c0:	30 70       	andi	r19, 0x00	; 0
     8c2:	53 e0       	ldi	r21, 0x03	; 3
     8c4:	35 95       	asr	r19
     8c6:	27 95       	ror	r18
     8c8:	5a 95       	dec	r21
     8ca:	e1 f7       	brne	.-8      	; 0x8c4 <__vector_3+0x40>
     8cc:	82 2b       	or	r24, r18
     8ce:	44 1f       	adc	r20, r20
     8d0:	44 27       	eor	r20, r20
     8d2:	44 1f       	adc	r20, r20
     8d4:	84 2b       	or	r24, r20
     8d6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mc_switch_commutation>
}
     8da:	ff 91       	pop	r31
     8dc:	ef 91       	pop	r30
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <__vector_23>:
  ISR(HALL_B())
#else
#pragma vector = HALL_B()
__interrupt void mc_hall_b(void)
#endif
{
     8fc:	1f 92       	push	r1
     8fe:	0f 92       	push	r0
     900:	0f b6       	in	r0, 0x3f	; 63
     902:	0f 92       	push	r0
     904:	11 24       	eor	r1, r1
     906:	2f 93       	push	r18
     908:	3f 93       	push	r19
     90a:	4f 93       	push	r20
     90c:	5f 93       	push	r21
     90e:	6f 93       	push	r22
     910:	7f 93       	push	r23
     912:	8f 93       	push	r24
     914:	9f 93       	push	r25
     916:	af 93       	push	r26
     918:	bf 93       	push	r27
     91a:	ef 93       	push	r30
     91c:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     91e:	49 b1       	in	r20, 0x09	; 9
     920:	86 b1       	in	r24, 0x06	; 6
     922:	29 b1       	in	r18, 0x09	; 9
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	80 74       	andi	r24, 0x40	; 64
     928:	90 70       	andi	r25, 0x00	; 0
     92a:	e5 e0       	ldi	r30, 0x05	; 5
     92c:	95 95       	asr	r25
     92e:	87 95       	ror	r24
     930:	ea 95       	dec	r30
     932:	e1 f7       	brne	.-8      	; 0x92c <__stack+0x2d>
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	20 72       	andi	r18, 0x20	; 32
     938:	30 70       	andi	r19, 0x00	; 0
     93a:	73 e0       	ldi	r23, 0x03	; 3
     93c:	35 95       	asr	r19
     93e:	27 95       	ror	r18
     940:	7a 95       	dec	r23
     942:	e1 f7       	brne	.-8      	; 0x93c <__stack+0x3d>
     944:	82 2b       	or	r24, r18
     946:	44 1f       	adc	r20, r20
     948:	44 27       	eor	r20, r20
     94a:	44 1f       	adc	r20, r20
     94c:	84 2b       	or	r24, r20
     94e:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mc_switch_commutation>
}
     952:	ff 91       	pop	r31
     954:	ef 91       	pop	r30
     956:	bf 91       	pop	r27
     958:	af 91       	pop	r26
     95a:	9f 91       	pop	r25
     95c:	8f 91       	pop	r24
     95e:	7f 91       	pop	r23
     960:	6f 91       	pop	r22
     962:	5f 91       	pop	r21
     964:	4f 91       	pop	r20
     966:	3f 91       	pop	r19
     968:	2f 91       	pop	r18
     96a:	0f 90       	pop	r0
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	0f 90       	pop	r0
     970:	1f 90       	pop	r1
     972:	18 95       	reti

00000974 <__vector_1>:
  ISR(HALL_A())
#else
#pragma vector = HALL_A()
__interrupt void mc_hall_a(void)
#endif
{
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	2f 93       	push	r18
     980:	3f 93       	push	r19
     982:	4f 93       	push	r20
     984:	5f 93       	push	r21
     986:	6f 93       	push	r22
     988:	7f 93       	push	r23
     98a:	8f 93       	push	r24
     98c:	9f 93       	push	r25
     98e:	af 93       	push	r26
     990:	bf 93       	push	r27
     992:	ef 93       	push	r30
     994:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     996:	49 b1       	in	r20, 0x09	; 9
     998:	86 b1       	in	r24, 0x06	; 6
     99a:	29 b1       	in	r18, 0x09	; 9
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	80 74       	andi	r24, 0x40	; 64
     9a0:	90 70       	andi	r25, 0x00	; 0
     9a2:	a5 e0       	ldi	r26, 0x05	; 5
     9a4:	95 95       	asr	r25
     9a6:	87 95       	ror	r24
     9a8:	aa 95       	dec	r26
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <__vector_1+0x30>
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	20 72       	andi	r18, 0x20	; 32
     9b0:	30 70       	andi	r19, 0x00	; 0
     9b2:	f3 e0       	ldi	r31, 0x03	; 3
     9b4:	35 95       	asr	r19
     9b6:	27 95       	ror	r18
     9b8:	fa 95       	dec	r31
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <__vector_1+0x40>
     9bc:	82 2b       	or	r24, r18
     9be:	44 1f       	adc	r20, r20
     9c0:	44 27       	eor	r20, r20
     9c2:	44 1f       	adc	r20, r20
     9c4:	84 2b       	or	r24, r20
     9c6:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mc_switch_commutation>

  //estimation speed on rising edge of Hall_A
  if (PIND&(1<<PORTD7))
     9ca:	4f 9b       	sbis	0x09, 7	; 9
     9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__vector_1+0x64>
  {
    mc_estimation_speed();
     9ce:	0e 94 9a 03 	call	0x734	; 0x734 <mc_estimation_speed>
    g_mc_read_enable=FALSE; // Wait 1 period
     9d2:	10 92 19 01 	sts	0x0119, r1
     9d6:	03 c0       	rjmp	.+6      	; 0x9de <__vector_1+0x6a>
  }
  else
  {
    g_mc_read_enable=TRUE;
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 19 01 	sts	0x0119, r24
  }

}
     9de:	ff 91       	pop	r31
     9e0:	ef 91       	pop	r30
     9e2:	bf 91       	pop	r27
     9e4:	af 91       	pop	r26
     9e6:	9f 91       	pop	r25
     9e8:	8f 91       	pop	r24
     9ea:	7f 91       	pop	r23
     9ec:	6f 91       	pop	r22
     9ee:	5f 91       	pop	r21
     9f0:	4f 91       	pop	r20
     9f2:	3f 91       	pop	r19
     9f4:	2f 91       	pop	r18
     9f6:	0f 90       	pop	r0
     9f8:	0f be       	out	0x3f, r0	; 63
     9fa:	0f 90       	pop	r0
     9fc:	1f 90       	pop	r1
     9fe:	18 95       	reti

00000a00 <mci_motor_is_running>:
* @post We know if the motor is running or not
*/
Bool mci_motor_is_running(void)
{
  return mci_run_stop;
}
     a00:	80 91 22 01 	lds	r24, 0x0122
     a04:	08 95       	ret

00000a06 <mci_stop>:
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     a06:	10 92 22 01 	sts	0x0122, r1
}
     a0a:	08 95       	ret

00000a0c <mci_set_ref_speed>:
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     a0c:	80 93 23 01 	sts	0x0123, r24
}
     a10:	08 95       	ret

00000a12 <mci_get_ref_speed>:
* @post get speed value
*/
U8 mci_get_ref_speed(void)
{
  return mci_ref_speed;
}
     a12:	80 91 23 01 	lds	r24, 0x0123
     a16:	08 95       	ret

00000a18 <mci_forward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     a18:	10 92 21 01 	sts	0x0121, r1
}
     a1c:	08 95       	ret

00000a1e <mci_backward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_backward(void)
{
  mci_direction = CCW;
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 21 01 	sts	0x0121, r24
}
     a24:	08 95       	ret

00000a26 <mci_get_motor_direction>:
* @post get direction value
*/
U8 mci_get_motor_direction(void)
{
  return mci_direction;
}
     a26:	80 91 21 01 	lds	r24, 0x0121
     a2a:	08 95       	ret

00000a2c <mc_set_measured_speed>:
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     a2c:	80 93 24 01 	sts	0x0124, r24
}
     a30:	08 95       	ret

00000a32 <mci_get_measured_speed>:
 * @post none
*/
U8 mci_get_measured_speed(void)
{
  return mci_measured_speed;
}
     a32:	80 91 24 01 	lds	r24, 0x0124
     a36:	08 95       	ret

00000a38 <mci_get_measured_current>:
* @brief Get the current measured in the motor
* @pre Launch ADC scheduler
* @post Get ADC Channel 12 result (Current value on 8bits).
*/
U16 mci_get_measured_current(void)
{
     a38:	20 91 25 01 	lds	r18, 0x0125
     a3c:	30 91 26 01 	lds	r19, 0x0126
     a40:	40 91 27 01 	lds	r20, 0x0127
     a44:	50 91 28 01 	lds	r21, 0x0128
     a48:	86 e0       	ldi	r24, 0x06	; 6
     a4a:	56 95       	lsr	r21
     a4c:	47 95       	ror	r20
     a4e:	37 95       	ror	r19
     a50:	27 95       	ror	r18
     a52:	8a 95       	dec	r24
     a54:	d1 f7       	brne	.-12     	; 0xa4a <mci_get_measured_current+0x12>
  return mci_measured_current/64;
}
     a56:	c9 01       	movw	r24, r18
     a58:	08 95       	ret

00000a5a <mci_store_measured_current>:
* @brief Set the variable 'mc_measured_current' for initialization.
* @pre none
* @post 'mc_measured_current' set with the current value
*/
void mci_store_measured_current(U16 current)
{
     a5a:	ef 92       	push	r14
     a5c:	ff 92       	push	r15
     a5e:	0f 93       	push	r16
     a60:	1f 93       	push	r17
  mci_measured_current = ((63*mci_measured_current)+(64*current))>>6;
     a62:	76 e0       	ldi	r23, 0x06	; 6
     a64:	88 0f       	add	r24, r24
     a66:	99 1f       	adc	r25, r25
     a68:	7a 95       	dec	r23
     a6a:	e1 f7       	brne	.-8      	; 0xa64 <mci_store_measured_current+0xa>
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	e0 90 25 01 	lds	r14, 0x0125
     a74:	f0 90 26 01 	lds	r15, 0x0126
     a78:	00 91 27 01 	lds	r16, 0x0127
     a7c:	10 91 28 01 	lds	r17, 0x0128
     a80:	a8 01       	movw	r20, r16
     a82:	97 01       	movw	r18, r14
     a84:	66 e0       	ldi	r22, 0x06	; 6
     a86:	22 0f       	add	r18, r18
     a88:	33 1f       	adc	r19, r19
     a8a:	44 1f       	adc	r20, r20
     a8c:	55 1f       	adc	r21, r21
     a8e:	6a 95       	dec	r22
     a90:	d1 f7       	brne	.-12     	; 0xa86 <mci_store_measured_current+0x2c>
     a92:	2e 19       	sub	r18, r14
     a94:	3f 09       	sbc	r19, r15
     a96:	40 0b       	sbc	r20, r16
     a98:	51 0b       	sbc	r21, r17
     a9a:	82 0f       	add	r24, r18
     a9c:	93 1f       	adc	r25, r19
     a9e:	a4 1f       	adc	r26, r20
     aa0:	b5 1f       	adc	r27, r21
     aa2:	26 e0       	ldi	r18, 0x06	; 6
     aa4:	b6 95       	lsr	r27
     aa6:	a7 95       	ror	r26
     aa8:	97 95       	ror	r25
     aaa:	87 95       	ror	r24
     aac:	2a 95       	dec	r18
     aae:	d1 f7       	brne	.-12     	; 0xaa4 <mci_store_measured_current+0x4a>
     ab0:	80 93 25 01 	sts	0x0125, r24
     ab4:	90 93 26 01 	sts	0x0126, r25
     ab8:	a0 93 27 01 	sts	0x0127, r26
     abc:	b0 93 28 01 	sts	0x0128, r27
}
     ac0:	1f 91       	pop	r17
     ac2:	0f 91       	pop	r16
     ac4:	ff 90       	pop	r15
     ac6:	ef 90       	pop	r14
     ac8:	08 95       	ret

00000aca <mc_get_potentiometer_value>:
* @post Get ADC Channel 6 result (Potentiometer value on 8bits).
*/
U8 mc_get_potentiometer_value(void)
{
  return mc_potentiometer_value;
}
     aca:	80 91 29 01 	lds	r24, 0x0129
     ace:	08 95       	ret

00000ad0 <mc_set_potentiometer_value>:
* @pre Launch ADC scheduler
* @post 'mc_potentiometer_value' set with the potentiometer value
*/
void mc_set_potentiometer_value(U8 potentiometer)
{
  mc_potentiometer_value = potentiometer;
     ad0:	80 93 29 01 	sts	0x0129, r24
}
     ad4:	08 95       	ret

00000ad6 <mc_init>:
* @post configuration of hardware and sotware
* @pre none
*/
void mc_init()
{
  mc_init_HW();
     ad6:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mc_init_HW>
  Enable_interrupt();
     ada:	78 94       	sei
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     adc:	10 92 22 01 	sts	0x0122, r1
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     ae0:	10 92 21 01 	sts	0x0121, r1
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     ae4:	10 92 23 01 	sts	0x0123, r1
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     ae8:	10 92 24 01 	sts	0x0124, r1

  mci_stop();
  mci_forward();
  mci_set_ref_speed(0);
  mc_set_measured_speed(0);
}
     aec:	08 95       	ret

00000aee <mci_retry_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_retry_run(void)
{
  mci_run_stop = TRUE;
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     af4:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     af8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     afc:	0e 94 35 02 	call	0x46a	; 0x46a <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     b00:	0e 94 1c 02 	call	0x438	; 0x438 <mc_get_hall>
     b04:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     b08:	0e 94 0e 03 	call	0x61c	; 0x61c <mc_disable_during_inrush>
}
     b0c:	08 95       	ret

00000b0e <mci_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_run(void)
{
  if (!(PCTL & (1<<PRUN))) /* if there is an overcurrent */
     b0e:	80 91 b7 00 	lds	r24, 0x00B7
     b12:	80 fd       	sbrc	r24, 0
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <mci_run+0xc>
  {
    PSC_Init();
     b16:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PSC_Init>
  }
  overcurrent = FALSE;
     b1a:	10 92 18 01 	sts	0x0118, r1
  mci_run_stop = TRUE;
     b1e:	81 e0       	ldi	r24, 0x01	; 1
     b20:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     b24:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     b28:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     b2c:	0e 94 35 02 	call	0x46a	; 0x46a <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     b30:	0e 94 1c 02 	call	0x438	; 0x438 <mc_get_hall>
     b34:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     b38:	0e 94 0e 03 	call	0x61c	; 0x61c <mc_disable_during_inrush>
}
     b3c:	08 95       	ret

00000b3e <print_hex16>:
//!
//! @param
//!
//! @return none
void print_hex16(U16 value)
{
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	ec 01       	movw	r28, r24
   U8 d4;
   U8 d3;
   U8 d2;
   U8 d1;

   d4 = (U16)(value >> 12) & 0x0F;
     b4c:	7c 01       	movw	r14, r24
     b4e:	2f 2d       	mov	r18, r15
     b50:	22 95       	swap	r18
     b52:	2f 70       	andi	r18, 0x0F	; 15
   d3 = (U16)(value >> 8) & 0x0F;
     b54:	1f 2d       	mov	r17, r15
     b56:	1f 70       	andi	r17, 0x0F	; 15
   d2 = (U16)(value >> 4) & 0x0F;
     b58:	34 e0       	ldi	r19, 0x04	; 4
     b5a:	96 95       	lsr	r25
     b5c:	87 95       	ror	r24
     b5e:	3a 95       	dec	r19
     b60:	e1 f7       	brne	.-8      	; 0xb5a <print_hex16+0x1c>
     b62:	08 2f       	mov	r16, r24
     b64:	0f 70       	andi	r16, 0x0F	; 15
   d1 = (U16)(value) & 0x0F;

   if (d4 != 0)
     b66:	22 23       	and	r18, r18
     b68:	39 f0       	breq	.+14     	; 0xb78 <print_hex16+0x3a>
   {
      c = bin_to_ascii(d4);
     b6a:	82 2f       	mov	r24, r18
     b6c:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
      uart_putchar(c);
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
     b76:	02 c0       	rjmp	.+4      	; 0xb7c <print_hex16+0x3e>
      c = bin_to_ascii(d2);
      uart_putchar(c);
   }
   else
   {
      if (d3 != 0)
     b78:	11 23       	and	r17, r17
     b7a:	39 f0       	breq	.+14     	; 0xb8a <print_hex16+0x4c>
      {
         c = bin_to_ascii(d3);
     b7c:	81 2f       	mov	r24, r17
     b7e:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
         uart_putchar(c);
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <print_hex16+0x50>
         c = bin_to_ascii(d2);
         uart_putchar(c);
      }
      else
      {
         if (d2 != 0)
     b8a:	00 23       	and	r16, r16
     b8c:	31 f0       	breq	.+12     	; 0xb9a <print_hex16+0x5c>
         {
            c = bin_to_ascii(d2);
     b8e:	80 2f       	mov	r24, r16
     b90:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
            uart_putchar(c);
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
         }
      }
   }

   c = bin_to_ascii(d1);
     b9a:	9e 01       	movw	r18, r28
     b9c:	2f 70       	andi	r18, 0x0F	; 15
     b9e:	82 2f       	mov	r24, r18
     ba0:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
   uart_putchar(c);
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	ff 90       	pop	r15
     bb4:	ef 90       	pop	r14
     bb6:	08 95       	ret

00000bb8 <print_msg>:
#ifdef __GNUC__
void print_msg(U8 const *str)
#else
void print_msg(U8 code *str)
#endif
{
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
   {
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
     bbc:	fc 01       	movw	r30, r24
     bbe:	ec 01       	movw	r28, r24
     bc0:	84 91       	lpm	r24, Z+
     bc2:	05 c0       	rjmp	.+10     	; 0xbce <print_msg+0x16>
   while(c!=0)
   {
      uart_putchar(c);
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
      c=pgm_read_byte_near((unsigned int)str++);
     bca:	fe 01       	movw	r30, r28
     bcc:	84 91       	lpm	r24, Z+
     bce:	21 96       	adiw	r28, 0x01	; 1
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
   while(c!=0)
     bd0:	88 23       	and	r24, r24
     bd2:	c1 f7       	brne	.-16     	; 0xbc4 <print_msg+0xc>
      uart_putchar(c);
      c=pgm_read_byte_near((unsigned int)str++);
   }
#endif

}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <parse_cmd>:
{
   U8 i=0;
   U8 j;

   //Get command type
   for(i=0;cmd_str[i]!=' ' && i<=i_str;i++);
     bda:	90 91 2b 01 	lds	r25, 0x012B
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <parse_cmd+0xa>
     be2:	4f 5f       	subi	r20, 0xFF	; 255
     be4:	e4 2f       	mov	r30, r20
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	e0 5b       	subi	r30, 0xB0	; 176
     bea:	fe 4f       	sbci	r31, 0xFE	; 254
     bec:	80 81       	ld	r24, Z
     bee:	80 32       	cpi	r24, 0x20	; 32
     bf0:	11 f0       	breq	.+4      	; 0xbf6 <parse_cmd+0x1c>
     bf2:	94 17       	cp	r25, r20
     bf4:	b0 f7       	brcc	.-20     	; 0xbe2 <parse_cmd+0x8>
   cmd=TRUE;
     bf6:	81 e0       	ldi	r24, 0x01	; 1
     bf8:	80 93 2c 01 	sts	0x012C, r24

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
     bfc:	94 2f       	mov	r25, r20
     bfe:	91 50       	subi	r25, 0x01	; 1
     c00:	a0 e5       	ldi	r26, 0x50	; 80
     c02:	b1 e0       	ldi	r27, 0x01	; 1
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c08:	f9 01       	movw	r30, r18
     c0a:	e4 58       	subi	r30, 0x84	; 132
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	e4 91       	lpm	r30, Z+
     c10:	8c 91       	ld	r24, X
     c12:	8e 17       	cp	r24, r30
     c14:	39 f4       	brne	.+14     	; 0xc24 <parse_cmd+0x4a>
     c16:	2f 5f       	subi	r18, 0xFF	; 255
     c18:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c1a:	92 17       	cp	r25, r18
     c1c:	08 f4       	brcc	.+2      	; 0xc20 <parse_cmd+0x46>
     c1e:	e6 c0       	rjmp	.+460    	; 0xdec <parse_cmd+0x212>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c20:	11 96       	adiw	r26, 0x01	; 1
     c22:	f2 cf       	rjmp	.-28     	; 0xc08 <parse_cmd+0x2e>
     c24:	a0 e5       	ldi	r26, 0x50	; 80
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c2c:	f9 01       	movw	r30, r18
     c2e:	e1 58       	subi	r30, 0x81	; 129
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	e4 91       	lpm	r30, Z+
     c34:	8c 91       	ld	r24, X
     c36:	8e 17       	cp	r24, r30
     c38:	39 f4       	brne	.+14     	; 0xc48 <parse_cmd+0x6e>
     c3a:	2f 5f       	subi	r18, 0xFF	; 255
     c3c:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c3e:	92 17       	cp	r25, r18
     c40:	08 f4       	brcc	.+2      	; 0xc44 <parse_cmd+0x6a>
     c42:	d6 c0       	rjmp	.+428    	; 0xdf0 <parse_cmd+0x216>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c44:	11 96       	adiw	r26, 0x01	; 1
     c46:	f2 cf       	rjmp	.-28     	; 0xc2c <parse_cmd+0x52>
     c48:	a0 e5       	ldi	r26, 0x50	; 80
     c4a:	b1 e0       	ldi	r27, 0x01	; 1
     c4c:	20 e0       	ldi	r18, 0x00	; 0
     c4e:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c50:	f9 01       	movw	r30, r18
     c52:	ee 57       	subi	r30, 0x7E	; 126
     c54:	ff 4f       	sbci	r31, 0xFF	; 255
     c56:	e4 91       	lpm	r30, Z+
     c58:	8c 91       	ld	r24, X
     c5a:	8e 17       	cp	r24, r30
     c5c:	39 f4       	brne	.+14     	; 0xc6c <parse_cmd+0x92>
     c5e:	2f 5f       	subi	r18, 0xFF	; 255
     c60:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c62:	92 17       	cp	r25, r18
     c64:	08 f4       	brcc	.+2      	; 0xc68 <parse_cmd+0x8e>
     c66:	c6 c0       	rjmp	.+396    	; 0xdf4 <parse_cmd+0x21a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c68:	11 96       	adiw	r26, 0x01	; 1
     c6a:	f2 cf       	rjmp	.-28     	; 0xc50 <parse_cmd+0x76>
     c6c:	a0 e5       	ldi	r26, 0x50	; 80
     c6e:	b1 e0       	ldi	r27, 0x01	; 1
     c70:	20 e0       	ldi	r18, 0x00	; 0
     c72:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c74:	f9 01       	movw	r30, r18
     c76:	e9 57       	subi	r30, 0x79	; 121
     c78:	ff 4f       	sbci	r31, 0xFF	; 255
     c7a:	e4 91       	lpm	r30, Z+
     c7c:	8c 91       	ld	r24, X
     c7e:	8e 17       	cp	r24, r30
     c80:	39 f4       	brne	.+14     	; 0xc90 <parse_cmd+0xb6>
     c82:	2f 5f       	subi	r18, 0xFF	; 255
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c86:	92 17       	cp	r25, r18
     c88:	08 f4       	brcc	.+2      	; 0xc8c <parse_cmd+0xb2>
     c8a:	b6 c0       	rjmp	.+364    	; 0xdf8 <parse_cmd+0x21e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c8c:	11 96       	adiw	r26, 0x01	; 1
     c8e:	f2 cf       	rjmp	.-28     	; 0xc74 <parse_cmd+0x9a>
     c90:	a0 e5       	ldi	r26, 0x50	; 80
     c92:	b1 e0       	ldi	r27, 0x01	; 1
     c94:	20 e0       	ldi	r18, 0x00	; 0
     c96:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c98:	f9 01       	movw	r30, r18
     c9a:	e6 57       	subi	r30, 0x76	; 118
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	e4 91       	lpm	r30, Z+
     ca0:	8c 91       	ld	r24, X
     ca2:	8e 17       	cp	r24, r30
     ca4:	39 f4       	brne	.+14     	; 0xcb4 <parse_cmd+0xda>
     ca6:	2f 5f       	subi	r18, 0xFF	; 255
     ca8:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     caa:	92 17       	cp	r25, r18
     cac:	08 f4       	brcc	.+2      	; 0xcb0 <parse_cmd+0xd6>
     cae:	a6 c0       	rjmp	.+332    	; 0xdfc <parse_cmd+0x222>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     cb0:	11 96       	adiw	r26, 0x01	; 1
     cb2:	f2 cf       	rjmp	.-28     	; 0xc98 <parse_cmd+0xbe>
     cb4:	a0 e5       	ldi	r26, 0x50	; 80
     cb6:	b1 e0       	ldi	r27, 0x01	; 1
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     cbc:	f9 01       	movw	r30, r18
     cbe:	e3 57       	subi	r30, 0x73	; 115
     cc0:	ff 4f       	sbci	r31, 0xFF	; 255
     cc2:	e4 91       	lpm	r30, Z+
     cc4:	8c 91       	ld	r24, X
     cc6:	8e 17       	cp	r24, r30
     cc8:	39 f4       	brne	.+14     	; 0xcd8 <parse_cmd+0xfe>
     cca:	2f 5f       	subi	r18, 0xFF	; 255
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     cce:	92 17       	cp	r25, r18
     cd0:	08 f4       	brcc	.+2      	; 0xcd4 <parse_cmd+0xfa>
     cd2:	96 c0       	rjmp	.+300    	; 0xe00 <parse_cmd+0x226>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     cd4:	11 96       	adiw	r26, 0x01	; 1
     cd6:	f2 cf       	rjmp	.-28     	; 0xcbc <parse_cmd+0xe2>
     cd8:	a0 e5       	ldi	r26, 0x50	; 80
     cda:	b1 e0       	ldi	r27, 0x01	; 1
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     ce0:	f9 01       	movw	r30, r18
     ce2:	e0 57       	subi	r30, 0x70	; 112
     ce4:	ff 4f       	sbci	r31, 0xFF	; 255
     ce6:	e4 91       	lpm	r30, Z+
     ce8:	8c 91       	ld	r24, X
     cea:	8e 17       	cp	r24, r30
     cec:	39 f4       	brne	.+14     	; 0xcfc <parse_cmd+0x122>
     cee:	2f 5f       	subi	r18, 0xFF	; 255
     cf0:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     cf2:	92 17       	cp	r25, r18
     cf4:	08 f4       	brcc	.+2      	; 0xcf8 <parse_cmd+0x11e>
     cf6:	86 c0       	rjmp	.+268    	; 0xe04 <parse_cmd+0x22a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     cf8:	11 96       	adiw	r26, 0x01	; 1
     cfa:	f2 cf       	rjmp	.-28     	; 0xce0 <parse_cmd+0x106>
     cfc:	a0 e5       	ldi	r26, 0x50	; 80
     cfe:	b1 e0       	ldi	r27, 0x01	; 1
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     d04:	f9 01       	movw	r30, r18
     d06:	ed 56       	subi	r30, 0x6D	; 109
     d08:	ff 4f       	sbci	r31, 0xFF	; 255
     d0a:	e4 91       	lpm	r30, Z+
     d0c:	8c 91       	ld	r24, X
     d0e:	8e 17       	cp	r24, r30
     d10:	39 f4       	brne	.+14     	; 0xd20 <parse_cmd+0x146>
     d12:	2f 5f       	subi	r18, 0xFF	; 255
     d14:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     d16:	92 17       	cp	r25, r18
     d18:	08 f4       	brcc	.+2      	; 0xd1c <parse_cmd+0x142>
     d1a:	76 c0       	rjmp	.+236    	; 0xe08 <parse_cmd+0x22e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     d1c:	11 96       	adiw	r26, 0x01	; 1
     d1e:	f2 cf       	rjmp	.-28     	; 0xd04 <parse_cmd+0x12a>
     d20:	a0 e5       	ldi	r26, 0x50	; 80
     d22:	b1 e0       	ldi	r27, 0x01	; 1
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     d28:	f9 01       	movw	r30, r18
     d2a:	ea 56       	subi	r30, 0x6A	; 106
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	e4 91       	lpm	r30, Z+
     d30:	8c 91       	ld	r24, X
     d32:	8e 17       	cp	r24, r30
     d34:	39 f4       	brne	.+14     	; 0xd44 <parse_cmd+0x16a>
     d36:	2f 5f       	subi	r18, 0xFF	; 255
     d38:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     d3a:	92 17       	cp	r25, r18
     d3c:	08 f4       	brcc	.+2      	; 0xd40 <parse_cmd+0x166>
     d3e:	66 c0       	rjmp	.+204    	; 0xe0c <parse_cmd+0x232>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     d40:	11 96       	adiw	r26, 0x01	; 1
     d42:	f2 cf       	rjmp	.-28     	; 0xd28 <parse_cmd+0x14e>
   {  cmd_type=CMD_GET_STATUS0; }
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
   else
   {
      if(i_str)
     d44:	80 91 2b 01 	lds	r24, 0x012B
     d48:	88 23       	and	r24, r24
     d4a:	21 f0       	breq	.+8      	; 0xd54 <parse_cmd+0x17a>
      {
        print_msg(msg_er_cmd_not_found);
     d4c:	85 e0       	ldi	r24, 0x05	; 5
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
      }
      print_msg(msg_prompt);
     d54:	89 e9       	ldi	r24, 0x99	; 153
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
      cmd=FALSE;
     d5c:	10 92 2c 01 	sts	0x012C, r1
     d60:	08 95       	ret
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
   }
   else   {  return; }
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0a c0       	rjmp	.+20     	; 0xd7a <parse_cmd+0x1a0>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str1[j])=cmd_str[i];
     d66:	e9 2f       	mov	r30, r25
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e2 5d       	subi	r30, 0xD2	; 210
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	30 83       	st	Z, r19
         MSB(par_str1[j])=0;
     d74:	11 82       	std	Z+1, r1	; 0x01
         j++;
     d76:	9f 5f       	subi	r25, 0xFF	; 255

  //Get first arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     d78:	2f 5f       	subi	r18, 0xFF	; 255
     d7a:	e2 2f       	mov	r30, r18
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	e0 5b       	subi	r30, 0xB0	; 176
     d80:	fe 4f       	sbci	r31, 0xFE	; 254
     d82:	30 81       	ld	r19, Z
     d84:	30 32       	cpi	r19, 0x20	; 32
     d86:	21 f0       	breq	.+8      	; 0xd90 <parse_cmd+0x1b6>
     d88:	80 91 2b 01 	lds	r24, 0x012B
     d8c:	28 17       	cp	r18, r24
     d8e:	58 f3       	brcs	.-42     	; 0xd66 <parse_cmd+0x18c>
      {
         LSB(par_str1[j])=cmd_str[i];
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
     d90:	e9 2f       	mov	r30, r25
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	ee 0f       	add	r30, r30
     d96:	ff 1f       	adc	r31, r31
     d98:	e2 5d       	subi	r30, 0xD2	; 210
     d9a:	fe 4f       	sbci	r31, 0xFE	; 254
     d9c:	10 82       	st	Z, r1
     d9e:	11 82       	std	Z+1, r1	; 0x01
   }
   else   {  return; }

   //Get second arg (if any)
   if(++i<i_str)
     da0:	92 2f       	mov	r25, r18
     da2:	9f 5f       	subi	r25, 0xFF	; 255
     da4:	80 91 2b 01 	lds	r24, 0x012B
     da8:	98 17       	cp	r25, r24
     daa:	d0 f5       	brcc	.+116    	; 0xe20 <parse_cmd+0x246>
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
   }
   else   { return; }
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	0a c0       	rjmp	.+20     	; 0xdc4 <parse_cmd+0x1ea>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str2[j])=cmd_str[i];
     db0:	e2 2f       	mov	r30, r18
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e2 5c       	subi	r30, 0xC2	; 194
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	30 83       	st	Z, r19
         MSB(par_str2[j])=0;
     dbe:	11 82       	std	Z+1, r1	; 0x01
         j++;
     dc0:	2f 5f       	subi	r18, 0xFF	; 255

   //Get second arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     dc2:	9f 5f       	subi	r25, 0xFF	; 255
     dc4:	e9 2f       	mov	r30, r25
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	e0 5b       	subi	r30, 0xB0	; 176
     dca:	fe 4f       	sbci	r31, 0xFE	; 254
     dcc:	30 81       	ld	r19, Z
     dce:	30 32       	cpi	r19, 0x20	; 32
     dd0:	21 f0       	breq	.+8      	; 0xdda <parse_cmd+0x200>
     dd2:	80 91 2b 01 	lds	r24, 0x012B
     dd6:	98 17       	cp	r25, r24
     dd8:	58 f3       	brcs	.-42     	; 0xdb0 <parse_cmd+0x1d6>
      {
         LSB(par_str2[j])=cmd_str[i];
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
     dda:	e2 2f       	mov	r30, r18
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e2 5c       	subi	r30, 0xC2	; 194
     de4:	fe 4f       	sbci	r31, 0xFE	; 254
     de6:	10 82       	st	Z, r1
     de8:	11 82       	std	Z+1, r1	; 0x01
     dea:	08 95       	ret
   cmd=TRUE;

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
   {  cmd_type=CMD_RUN; }
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_stop,i-1))
   {  cmd_type=CMD_STOP; }
     df0:	83 e0       	ldi	r24, 0x03	; 3
     df2:	0d c0       	rjmp	.+26     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_help,i-1))
   {  cmd_type=CMD_HELP; }
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	0b c0       	rjmp	.+22     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_forward,i-1))
   {  cmd_type=CMD_FORWARD; }
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_backward,i-1))
   {  cmd_type=CMD_BACKWARD; }
     dfc:	85 e0       	ldi	r24, 0x05	; 5
     dfe:	07 c0       	rjmp	.+14     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_set_speed,i-1))
   {  cmd_type=CMD_SET_SPEED; }
     e00:	86 e0       	ldi	r24, 0x06	; 6
     e02:	05 c0       	rjmp	.+10     	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_id,i-1))
   {  cmd_type=CMD_GET_ID; }
     e04:	87 e0       	ldi	r24, 0x07	; 7
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status0,i-1))
   {  cmd_type=CMD_GET_STATUS0; }
     e08:	88 e0       	ldi	r24, 0x08	; 8
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
     e0c:	89 e0       	ldi	r24, 0x09	; 9
     e0e:	80 93 2d 01 	sts	0x012D, r24
      cmd=FALSE;
      return;
   }

  //Get first arg (if any)
   if(++i<i_str)
     e12:	24 2f       	mov	r18, r20
     e14:	2f 5f       	subi	r18, 0xFF	; 255
     e16:	80 91 2b 01 	lds	r24, 0x012B
     e1a:	28 17       	cp	r18, r24
     e1c:	08 f4       	brcc	.+2      	; 0xe20 <parse_cmd+0x246>
     e1e:	a1 cf       	rjmp	.-190    	; 0xd62 <parse_cmd+0x188>
     e20:	08 95       	ret

00000e22 <convert_param1>:
//!
//! @param none
//!
//! @return none
void convert_param1(void)
{
     e22:	ff 92       	push	r15
     e24:	0f 93       	push	r16
     e26:	1f 93       	push	r17
   U8 i = 0;
   param1 = 0;
     e28:	10 92 4f 01 	sts	0x014F, r1
     e2c:	10 92 4e 01 	sts	0x014E, r1
     e30:	ff 24       	eor	r15, r15
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <convert_param1+0x3e>
   while ( par_str1[i] != 0 )
   {
      param1 = param1 << 4;
     e34:	00 91 4e 01 	lds	r16, 0x014E
     e38:	10 91 4f 01 	lds	r17, 0x014F
     e3c:	94 e0       	ldi	r25, 0x04	; 4
     e3e:	00 0f       	add	r16, r16
     e40:	11 1f       	adc	r17, r17
     e42:	9a 95       	dec	r25
     e44:	e1 f7       	brne	.-8      	; 0xe3e <convert_param1+0x1c>
     e46:	10 93 4f 01 	sts	0x014F, r17
     e4a:	00 93 4e 01 	sts	0x014E, r16
      param1 = param1 + ascii_to_bin(par_str1[i]);
     e4e:	0e 94 aa 00 	call	0x154	; 0x154 <ascii_to_bin>
     e52:	08 0f       	add	r16, r24
     e54:	11 1d       	adc	r17, r1
     e56:	10 93 4f 01 	sts	0x014F, r17
     e5a:	00 93 4e 01 	sts	0x014E, r16
      i++;
     e5e:	f3 94       	inc	r15
//! @return none
void convert_param1(void)
{
   U8 i = 0;
   param1 = 0;
   while ( par_str1[i] != 0 )
     e60:	ef 2d       	mov	r30, r15
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	ee 0f       	add	r30, r30
     e66:	ff 1f       	adc	r31, r31
     e68:	e2 5d       	subi	r30, 0xD2	; 210
     e6a:	fe 4f       	sbci	r31, 0xFE	; 254
     e6c:	80 81       	ld	r24, Z
     e6e:	91 81       	ldd	r25, Z+1	; 0x01
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	01 f7       	brne	.-64     	; 0xe34 <convert_param1+0x12>
   {
      param1 = param1 << 4;
      param1 = param1 + ascii_to_bin(par_str1[i]);
      i++;
   }
}
     e74:	1f 91       	pop	r17
     e76:	0f 91       	pop	r16
     e78:	ff 90       	pop	r15
     e7a:	08 95       	ret

00000e7c <build_cmd>:
//! @return none
void build_cmd(void)
{
U8 c;

   if (uart_test_hit())    //Something new of  the UART ?
     e7c:	0e 94 27 08 	call	0x104e	; 0x104e <uart_test_hit>
     e80:	88 23       	and	r24, r24
     e82:	09 f4       	brne	.+2      	; 0xe86 <build_cmd+0xa>
     e84:	45 c0       	rjmp	.+138    	; 0xf10 <build_cmd+0x94>
   {
      c=uart_getchar();
     e86:	0e 94 4a 08 	call	0x1094	; 0x1094 <uart_getchar>
     e8a:	98 2f       	mov	r25, r24
      switch (c)
     e8c:	88 30       	cpi	r24, 0x08	; 8
     e8e:	f1 f0       	breq	.+60     	; 0xecc <build_cmd+0x50>
     e90:	8d 30       	cpi	r24, 0x0D	; 13
     e92:	19 f0       	breq	.+6      	; 0xe9a <build_cmd+0x1e>
     e94:	83 30       	cpi	r24, 0x03	; 3
     e96:	91 f5       	brne	.+100    	; 0xefc <build_cmd+0x80>
     e98:	0b c0       	rjmp	.+22     	; 0xeb0 <build_cmd+0x34>
      {
         case CR:
            cmd_str[i_str]=0;  //Add NULL char
     e9a:	e0 91 2b 01 	lds	r30, 0x012B
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	e0 5b       	subi	r30, 0xB0	; 176
     ea2:	fe 4f       	sbci	r31, 0xFE	; 254
     ea4:	10 82       	st	Z, r1
            parse_cmd();    //Decode the command
     ea6:	0e 94 ed 05 	call	0xbda	; 0xbda <parse_cmd>
            i_str=0;
     eaa:	10 92 2b 01 	sts	0x012B, r1
     eae:	08 95       	ret
            break;
         case ABORT_CHAR:    //^c abort cmd
            i_str=0;
     eb0:	10 92 2b 01 	sts	0x012B, r1
            printf("\r#");
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <build_cmd+0x3a>
     eb6:	80 e0       	ldi	r24, 0x00	; 0
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	ed b7       	in	r30, 0x3d	; 61
     ebc:	fe b7       	in	r31, 0x3e	; 62
     ebe:	92 83       	std	Z+2, r25	; 0x02
     ec0:	81 83       	std	Z+1, r24	; 0x01
     ec2:	0e 94 8e 08 	call	0x111c	; 0x111c <printf>
     ec6:	0f 90       	pop	r0
     ec8:	0f 90       	pop	r0
     eca:	08 95       	ret
            break;
         case BKSPACE_CHAR:   //backspace
            if(i_str>0)
     ecc:	80 91 2b 01 	lds	r24, 0x012B
     ed0:	88 23       	and	r24, r24
     ed2:	61 f0       	breq	.+24     	; 0xeec <build_cmd+0x70>
            {
               uart_putchar(c);
     ed4:	88 e0       	ldi	r24, 0x08	; 8
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
               uart_putchar(' ');
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
               uart_putchar(c);
     ee4:	88 e0       	ldi	r24, 0x08	; 8
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            }
            if(i_str>=1)
     eec:	80 91 2b 01 	lds	r24, 0x012B
     ef0:	88 23       	and	r24, r24
     ef2:	71 f0       	breq	.+28     	; 0xf10 <build_cmd+0x94>
            {
               i_str--;
     ef4:	81 50       	subi	r24, 0x01	; 1
     ef6:	80 93 2b 01 	sts	0x012B, r24
     efa:	08 95       	ret
            }
            break;

         default:
            cmd_str[i_str++]=c;  //append to cmd line
     efc:	80 91 2b 01 	lds	r24, 0x012B
     f00:	e8 2f       	mov	r30, r24
     f02:	f0 e0       	ldi	r31, 0x00	; 0
     f04:	e0 5b       	subi	r30, 0xB0	; 176
     f06:	fe 4f       	sbci	r31, 0xFE	; 254
     f08:	90 83       	st	Z, r25
     f0a:	8f 5f       	subi	r24, 0xFF	; 255
     f0c:	80 93 2b 01 	sts	0x012B, r24
     f10:	08 95       	ret

00000f12 <ushell_task>:
//! @return none
void ushell_task(void)
{
   U8 status = 0;

   if(cmd==FALSE)
     f12:	80 91 2c 01 	lds	r24, 0x012C
     f16:	88 23       	and	r24, r24
     f18:	19 f4       	brne	.+6      	; 0xf20 <ushell_task+0xe>
   {
      build_cmd();
     f1a:	0e 94 3e 07 	call	0xe7c	; 0xe7c <build_cmd>
     f1e:	08 95       	ret
   }
   else
   {
      switch (cmd_type)
     f20:	80 91 2d 01 	lds	r24, 0x012D
     f24:	85 30       	cpi	r24, 0x05	; 5
     f26:	31 f1       	breq	.+76     	; 0xf74 <ushell_task+0x62>
     f28:	86 30       	cpi	r24, 0x06	; 6
     f2a:	70 f4       	brcc	.+28     	; 0xf48 <ushell_task+0x36>
     f2c:	82 30       	cpi	r24, 0x02	; 2
     f2e:	c9 f0       	breq	.+50     	; 0xf62 <ushell_task+0x50>
     f30:	83 30       	cpi	r24, 0x03	; 3
     f32:	20 f4       	brcc	.+8      	; 0xf3c <ushell_task+0x2a>
     f34:	81 30       	cpi	r24, 0x01	; 1
     f36:	09 f0       	breq	.+2      	; 0xf3a <ushell_task+0x28>
     f38:	6e c0       	rjmp	.+220    	; 0x1016 <ushell_task+0x104>
     f3a:	10 c0       	rjmp	.+32     	; 0xf5c <ushell_task+0x4a>
     f3c:	83 30       	cpi	r24, 0x03	; 3
     f3e:	a1 f0       	breq	.+40     	; 0xf68 <ushell_task+0x56>
     f40:	84 30       	cpi	r24, 0x04	; 4
     f42:	09 f0       	breq	.+2      	; 0xf46 <ushell_task+0x34>
     f44:	68 c0       	rjmp	.+208    	; 0x1016 <ushell_task+0x104>
     f46:	13 c0       	rjmp	.+38     	; 0xf6e <ushell_task+0x5c>
     f48:	87 30       	cpi	r24, 0x07	; 7
     f4a:	01 f1       	breq	.+64     	; 0xf8c <ushell_task+0x7a>
     f4c:	87 30       	cpi	r24, 0x07	; 7
     f4e:	a8 f0       	brcs	.+42     	; 0xf7a <ushell_task+0x68>
     f50:	88 30       	cpi	r24, 0x08	; 8
     f52:	79 f1       	breq	.+94     	; 0xfb2 <ushell_task+0xa0>
     f54:	89 30       	cpi	r24, 0x09	; 9
     f56:	09 f0       	breq	.+2      	; 0xf5a <ushell_task+0x48>
     f58:	5e c0       	rjmp	.+188    	; 0x1016 <ushell_task+0x104>
     f5a:	50 c0       	rjmp	.+160    	; 0xffc <ushell_task+0xea>
      {
         case CMD_HELP:
            print_msg(msg_help);
     f5c:	8b eb       	ldi	r24, 0xBB	; 187
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	5c c0       	rjmp	.+184    	; 0x101a <ushell_task+0x108>
            break;
         case CMD_RUN:
            mci_run();
     f62:	0e 94 87 05 	call	0xb0e	; 0xb0e <mci_run>
     f66:	5b c0       	rjmp	.+182    	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_STOP:
            mci_stop();
     f68:	0e 94 03 05 	call	0xa06	; 0xa06 <mci_stop>
     f6c:	58 c0       	rjmp	.+176    	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_FORWARD:
            mci_forward();
     f6e:	0e 94 0c 05 	call	0xa18	; 0xa18 <mci_forward>
     f72:	55 c0       	rjmp	.+170    	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_BACKWARD:
            mci_backward();
     f74:	0e 94 0f 05 	call	0xa1e	; 0xa1e <mci_backward>
     f78:	52 c0       	rjmp	.+164    	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_SET_SPEED:
            convert_param1();
     f7a:	0e 94 11 07 	call	0xe22	; 0xe22 <convert_param1>
            mc_disable_during_inrush();
     f7e:	0e 94 0e 03 	call	0x61c	; 0x61c <mc_disable_during_inrush>
            mci_set_ref_speed((U8)param1);
     f82:	80 91 4e 01 	lds	r24, 0x014E
     f86:	0e 94 06 05 	call	0xa0c	; 0xa0c <mci_set_ref_speed>
     f8a:	49 c0       	rjmp	.+146    	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_GET_ID:
            print_hex16(BOARD_ID);
     f8c:	83 e0       	ldi	r24, 0x03	; 3
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            uart_putchar(' ');
     f94:	80 e2       	ldi	r24, 0x20	; 32
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            print_hex16(SOFT_ID);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            uart_putchar(' ');
     fa4:	80 e2       	ldi	r24, 0x20	; 32
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            print_hex16(REV_ID);
     fac:	81 e0       	ldi	r24, 0x01	; 1
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	2f c0       	rjmp	.+94     	; 0x1010 <ushell_task+0xfe>
            break;
         case CMD_GET_STATUS0:
            status = 0;
            if (mci_direction == CCW) {status |= (1<<3);}
     fb2:	80 91 21 01 	lds	r24, 0x0121
     fb6:	81 30       	cpi	r24, 0x01	; 1
     fb8:	11 f4       	brne	.+4      	; 0xfbe <ushell_task+0xac>
     fba:	98 e0       	ldi	r25, 0x08	; 8
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <ushell_task+0xae>
     fbe:	90 e0       	ldi	r25, 0x00	; 0
            if (mci_run_stop == TRUE) {status |= (1<<2);}
     fc0:	80 91 22 01 	lds	r24, 0x0122
     fc4:	81 30       	cpi	r24, 0x01	; 1
     fc6:	09 f4       	brne	.+2      	; 0xfca <ushell_task+0xb8>
     fc8:	94 60       	ori	r25, 0x04	; 4
            print_hex16(status);
     fca:	89 2f       	mov	r24, r25
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            uart_putchar(' ');
     fd2:	80 e2       	ldi	r24, 0x20	; 32
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            print_hex16(mci_get_measured_speed());
     fda:	0e 94 19 05 	call	0xa32	; 0xa32 <mci_get_measured_speed>
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            uart_putchar(' ');
     fe4:	80 e2       	ldi	r24, 0x20	; 32
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            print_hex16(mci_get_measured_current());
     fec:	0e 94 1c 05 	call	0xa38	; 0xa38 <mci_get_measured_current>
     ff0:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            ushell_active = TRUE;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	80 93 2a 01 	sts	0x012A, r24
     ffa:	11 c0       	rjmp	.+34     	; 0x101e <ushell_task+0x10c>
            break;
         case CMD_GET_STATUS1:
            print_hex16(0xDEA);
     ffc:	8a ee       	ldi	r24, 0xEA	; 234
     ffe:	9d e0       	ldi	r25, 0x0D	; 13
    1000:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
            uart_putchar(' ');
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 41 08 	call	0x1082	; 0x1082 <uart_putchar>
            print_hex16(0x123);
    100c:	83 e2       	ldi	r24, 0x23	; 35
    100e:	91 e0       	ldi	r25, 0x01	; 1
    1010:	0e 94 9f 05 	call	0xb3e	; 0xb3e <print_hex16>
    1014:	04 c0       	rjmp	.+8      	; 0x101e <ushell_task+0x10c>
            break;
         default:    //Unknown command
            print_msg(msg_er_cmd_not_found);
    1016:	85 e0       	ldi	r24, 0x05	; 5
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
      }
      cmd_type=CMD_NONE;
    101e:	10 92 2d 01 	sts	0x012D, r1
      cmd=FALSE;
    1022:	10 92 2c 01 	sts	0x012C, r1
      print_msg(msg_prompt);
    1026:	89 e9       	ldi	r24, 0x99	; 153
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
    102e:	08 95       	ret

00001030 <ushell_task_init>:
//! @return none
//!
//!/
void ushell_task_init(void)
{
   uart_init();
    1030:	0e 94 2b 08 	call	0x1056	; 0x1056 <uart_init>
   print_msg(msg_welcome);
    1034:	8c e9       	ldi	r24, 0x9C	; 156
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
   print_msg(msg_prompt);
    103c:	89 e9       	ldi	r24, 0x99	; 153
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <print_msg>
   cmd=FALSE;
    1044:	10 92 2c 01 	sts	0x012C, r1
   cmd_type=CMD_NONE;
    1048:	10 92 2d 01 	sts	0x012D, r1
}
    104c:	08 95       	ret

0000104e <uart_test_hit>:
/*_____ M A C R O S ________________________________________________________*/


bit uart_test_hit(void)
{
  return (Lin_rx_response_ready());
    104e:	80 91 c9 00 	lds	r24, 0x00C9
}
    1052:	81 70       	andi	r24, 0x01	; 1
    1054:	08 95       	ret

00001056 <uart_init>:


bit uart_init(void)
{
   Lin_set_btr_brr(BITSAMPLING,BAUDRATE);
    1056:	e8 ec       	ldi	r30, 0xC8	; 200
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	90 81       	ld	r25, Z
    105c:	80 81       	ld	r24, Z
    105e:	87 7f       	andi	r24, 0xF7	; 247
    1060:	80 83       	st	Z, r24
    1062:	88 e8       	ldi	r24, 0x88	; 136
    1064:	80 93 cc 00 	sts	0x00CC, r24
    1068:	10 92 ce 00 	sts	0x00CE, r1
    106c:	83 e3       	ldi	r24, 0x33	; 51
    106e:	80 93 cd 00 	sts	0x00CD, r24
    1072:	90 83       	st	Z, r25
   Byte_transfer_enable();
    1074:	8f e0       	ldi	r24, 0x0F	; 15
    1076:	80 83       	st	Z, r24
   Lin_set_data(0xFF);
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	80 93 d2 00 	sts	0x00D2, r24
   return TRUE;
}
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	08 95       	ret

00001082 <uart_putchar>:


r_uart_ptchar uart_putchar(p_uart_ptchar ch)
{
    1082:	28 2f       	mov	r18, r24
   while (!Lin_tx_response_ready());
    1084:	80 91 c9 00 	lds	r24, 0x00C9
    1088:	81 ff       	sbrs	r24, 1
    108a:	fc cf       	rjmp	.-8      	; 0x1084 <uart_putchar+0x2>
   Lin_set_data(ch);
    108c:	20 93 d2 00 	sts	0x00D2, r18
   return (ch);
}
    1090:	82 2f       	mov	r24, r18
    1092:	08 95       	ret

00001094 <uart_getchar>:



r_uart_gtchar uart_getchar(void)
{
    while(!Lin_rx_response_ready());
    1094:	80 91 c9 00 	lds	r24, 0x00C9
    1098:	80 ff       	sbrs	r24, 0
    109a:	fc cf       	rjmp	.-8      	; 0x1094 <uart_getchar>
    return Lin_get_data();
    109c:	80 91 d2 00 	lds	r24, 0x00D2
}
    10a0:	08 95       	ret

000010a2 <__divmodsi4>:
    10a2:	97 fb       	bst	r25, 7
    10a4:	09 2e       	mov	r0, r25
    10a6:	05 26       	eor	r0, r21
    10a8:	0e d0       	rcall	.+28     	; 0x10c6 <__divmodsi4_neg1>
    10aa:	57 fd       	sbrc	r21, 7
    10ac:	04 d0       	rcall	.+8      	; 0x10b6 <__divmodsi4_neg2>
    10ae:	14 d0       	rcall	.+40     	; 0x10d8 <__udivmodsi4>
    10b0:	0a d0       	rcall	.+20     	; 0x10c6 <__divmodsi4_neg1>
    10b2:	00 1c       	adc	r0, r0
    10b4:	38 f4       	brcc	.+14     	; 0x10c4 <__divmodsi4_exit>

000010b6 <__divmodsi4_neg2>:
    10b6:	50 95       	com	r21
    10b8:	40 95       	com	r20
    10ba:	30 95       	com	r19
    10bc:	21 95       	neg	r18
    10be:	3f 4f       	sbci	r19, 0xFF	; 255
    10c0:	4f 4f       	sbci	r20, 0xFF	; 255
    10c2:	5f 4f       	sbci	r21, 0xFF	; 255

000010c4 <__divmodsi4_exit>:
    10c4:	08 95       	ret

000010c6 <__divmodsi4_neg1>:
    10c6:	f6 f7       	brtc	.-4      	; 0x10c4 <__divmodsi4_exit>
    10c8:	90 95       	com	r25
    10ca:	80 95       	com	r24
    10cc:	70 95       	com	r23
    10ce:	61 95       	neg	r22
    10d0:	7f 4f       	sbci	r23, 0xFF	; 255
    10d2:	8f 4f       	sbci	r24, 0xFF	; 255
    10d4:	9f 4f       	sbci	r25, 0xFF	; 255
    10d6:	08 95       	ret

000010d8 <__udivmodsi4>:
    10d8:	a1 e2       	ldi	r26, 0x21	; 33
    10da:	1a 2e       	mov	r1, r26
    10dc:	aa 1b       	sub	r26, r26
    10de:	bb 1b       	sub	r27, r27
    10e0:	fd 01       	movw	r30, r26
    10e2:	0d c0       	rjmp	.+26     	; 0x10fe <__udivmodsi4_ep>

000010e4 <__udivmodsi4_loop>:
    10e4:	aa 1f       	adc	r26, r26
    10e6:	bb 1f       	adc	r27, r27
    10e8:	ee 1f       	adc	r30, r30
    10ea:	ff 1f       	adc	r31, r31
    10ec:	a2 17       	cp	r26, r18
    10ee:	b3 07       	cpc	r27, r19
    10f0:	e4 07       	cpc	r30, r20
    10f2:	f5 07       	cpc	r31, r21
    10f4:	20 f0       	brcs	.+8      	; 0x10fe <__udivmodsi4_ep>
    10f6:	a2 1b       	sub	r26, r18
    10f8:	b3 0b       	sbc	r27, r19
    10fa:	e4 0b       	sbc	r30, r20
    10fc:	f5 0b       	sbc	r31, r21

000010fe <__udivmodsi4_ep>:
    10fe:	66 1f       	adc	r22, r22
    1100:	77 1f       	adc	r23, r23
    1102:	88 1f       	adc	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	1a 94       	dec	r1
    1108:	69 f7       	brne	.-38     	; 0x10e4 <__udivmodsi4_loop>
    110a:	60 95       	com	r22
    110c:	70 95       	com	r23
    110e:	80 95       	com	r24
    1110:	90 95       	com	r25
    1112:	9b 01       	movw	r18, r22
    1114:	ac 01       	movw	r20, r24
    1116:	bd 01       	movw	r22, r26
    1118:	cf 01       	movw	r24, r30
    111a:	08 95       	ret

0000111c <printf>:
    111c:	a0 e0       	ldi	r26, 0x00	; 0
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e4 e9       	ldi	r30, 0x94	; 148
    1122:	f8 e0       	ldi	r31, 0x08	; 8
    1124:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__prologue_saves__+0x20>
    1128:	fe 01       	movw	r30, r28
    112a:	35 96       	adiw	r30, 0x05	; 5
    112c:	61 91       	ld	r22, Z+
    112e:	71 91       	ld	r23, Z+
    1130:	80 91 6c 01 	lds	r24, 0x016C
    1134:	90 91 6d 01 	lds	r25, 0x016D
    1138:	af 01       	movw	r20, r30
    113a:	0e 94 a3 08 	call	0x1146	; 0x1146 <vfprintf>
    113e:	20 96       	adiw	r28, 0x00	; 0
    1140:	e2 e0       	ldi	r30, 0x02	; 2
    1142:	0c 94 4c 0b 	jmp	0x1698	; 0x1698 <__epilogue_restores__+0x20>

00001146 <vfprintf>:
    1146:	ab e0       	ldi	r26, 0x0B	; 11
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e9 ea       	ldi	r30, 0xA9	; 169
    114c:	f8 e0       	ldi	r31, 0x08	; 8
    114e:	0c 94 20 0b 	jmp	0x1640	; 0x1640 <__prologue_saves__>
    1152:	3c 01       	movw	r6, r24
    1154:	2b 01       	movw	r4, r22
    1156:	5a 01       	movw	r10, r20
    1158:	fc 01       	movw	r30, r24
    115a:	17 82       	std	Z+7, r1	; 0x07
    115c:	16 82       	std	Z+6, r1	; 0x06
    115e:	83 81       	ldd	r24, Z+3	; 0x03
    1160:	81 fd       	sbrc	r24, 1
    1162:	03 c0       	rjmp	.+6      	; 0x116a <vfprintf+0x24>
    1164:	6f ef       	ldi	r22, 0xFF	; 255
    1166:	7f ef       	ldi	r23, 0xFF	; 255
    1168:	c6 c1       	rjmp	.+908    	; 0x14f6 <vfprintf+0x3b0>
    116a:	9a e0       	ldi	r25, 0x0A	; 10
    116c:	89 2e       	mov	r8, r25
    116e:	1e 01       	movw	r2, r28
    1170:	08 94       	sec
    1172:	21 1c       	adc	r2, r1
    1174:	31 1c       	adc	r3, r1
    1176:	f3 01       	movw	r30, r6
    1178:	23 81       	ldd	r18, Z+3	; 0x03
    117a:	f2 01       	movw	r30, r4
    117c:	23 fd       	sbrc	r18, 3
    117e:	85 91       	lpm	r24, Z+
    1180:	23 ff       	sbrs	r18, 3
    1182:	81 91       	ld	r24, Z+
    1184:	2f 01       	movw	r4, r30
    1186:	88 23       	and	r24, r24
    1188:	09 f4       	brne	.+2      	; 0x118c <vfprintf+0x46>
    118a:	b2 c1       	rjmp	.+868    	; 0x14f0 <vfprintf+0x3aa>
    118c:	85 32       	cpi	r24, 0x25	; 37
    118e:	39 f4       	brne	.+14     	; 0x119e <vfprintf+0x58>
    1190:	23 fd       	sbrc	r18, 3
    1192:	85 91       	lpm	r24, Z+
    1194:	23 ff       	sbrs	r18, 3
    1196:	81 91       	ld	r24, Z+
    1198:	2f 01       	movw	r4, r30
    119a:	85 32       	cpi	r24, 0x25	; 37
    119c:	29 f4       	brne	.+10     	; 0x11a8 <vfprintf+0x62>
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	b3 01       	movw	r22, r6
    11a2:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    11a6:	e7 cf       	rjmp	.-50     	; 0x1176 <vfprintf+0x30>
    11a8:	98 2f       	mov	r25, r24
    11aa:	ff 24       	eor	r15, r15
    11ac:	ee 24       	eor	r14, r14
    11ae:	99 24       	eor	r9, r9
    11b0:	ff e1       	ldi	r31, 0x1F	; 31
    11b2:	ff 15       	cp	r31, r15
    11b4:	d0 f0       	brcs	.+52     	; 0x11ea <vfprintf+0xa4>
    11b6:	9b 32       	cpi	r25, 0x2B	; 43
    11b8:	69 f0       	breq	.+26     	; 0x11d4 <vfprintf+0x8e>
    11ba:	9c 32       	cpi	r25, 0x2C	; 44
    11bc:	28 f4       	brcc	.+10     	; 0x11c8 <vfprintf+0x82>
    11be:	90 32       	cpi	r25, 0x20	; 32
    11c0:	59 f0       	breq	.+22     	; 0x11d8 <vfprintf+0x92>
    11c2:	93 32       	cpi	r25, 0x23	; 35
    11c4:	91 f4       	brne	.+36     	; 0x11ea <vfprintf+0xa4>
    11c6:	0e c0       	rjmp	.+28     	; 0x11e4 <vfprintf+0x9e>
    11c8:	9d 32       	cpi	r25, 0x2D	; 45
    11ca:	49 f0       	breq	.+18     	; 0x11de <vfprintf+0x98>
    11cc:	90 33       	cpi	r25, 0x30	; 48
    11ce:	69 f4       	brne	.+26     	; 0x11ea <vfprintf+0xa4>
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	24 c0       	rjmp	.+72     	; 0x121c <vfprintf+0xd6>
    11d4:	52 e0       	ldi	r21, 0x02	; 2
    11d6:	f5 2a       	or	r15, r21
    11d8:	84 e0       	ldi	r24, 0x04	; 4
    11da:	f8 2a       	or	r15, r24
    11dc:	28 c0       	rjmp	.+80     	; 0x122e <vfprintf+0xe8>
    11de:	98 e0       	ldi	r25, 0x08	; 8
    11e0:	f9 2a       	or	r15, r25
    11e2:	25 c0       	rjmp	.+74     	; 0x122e <vfprintf+0xe8>
    11e4:	e0 e1       	ldi	r30, 0x10	; 16
    11e6:	fe 2a       	or	r15, r30
    11e8:	22 c0       	rjmp	.+68     	; 0x122e <vfprintf+0xe8>
    11ea:	f7 fc       	sbrc	r15, 7
    11ec:	29 c0       	rjmp	.+82     	; 0x1240 <vfprintf+0xfa>
    11ee:	89 2f       	mov	r24, r25
    11f0:	80 53       	subi	r24, 0x30	; 48
    11f2:	8a 30       	cpi	r24, 0x0A	; 10
    11f4:	70 f4       	brcc	.+28     	; 0x1212 <vfprintf+0xcc>
    11f6:	f6 fe       	sbrs	r15, 6
    11f8:	05 c0       	rjmp	.+10     	; 0x1204 <vfprintf+0xbe>
    11fa:	98 9c       	mul	r9, r8
    11fc:	90 2c       	mov	r9, r0
    11fe:	11 24       	eor	r1, r1
    1200:	98 0e       	add	r9, r24
    1202:	15 c0       	rjmp	.+42     	; 0x122e <vfprintf+0xe8>
    1204:	e8 9c       	mul	r14, r8
    1206:	e0 2c       	mov	r14, r0
    1208:	11 24       	eor	r1, r1
    120a:	e8 0e       	add	r14, r24
    120c:	f0 e2       	ldi	r31, 0x20	; 32
    120e:	ff 2a       	or	r15, r31
    1210:	0e c0       	rjmp	.+28     	; 0x122e <vfprintf+0xe8>
    1212:	9e 32       	cpi	r25, 0x2E	; 46
    1214:	29 f4       	brne	.+10     	; 0x1220 <vfprintf+0xda>
    1216:	f6 fc       	sbrc	r15, 6
    1218:	6b c1       	rjmp	.+726    	; 0x14f0 <vfprintf+0x3aa>
    121a:	40 e4       	ldi	r20, 0x40	; 64
    121c:	f4 2a       	or	r15, r20
    121e:	07 c0       	rjmp	.+14     	; 0x122e <vfprintf+0xe8>
    1220:	9c 36       	cpi	r25, 0x6C	; 108
    1222:	19 f4       	brne	.+6      	; 0x122a <vfprintf+0xe4>
    1224:	50 e8       	ldi	r21, 0x80	; 128
    1226:	f5 2a       	or	r15, r21
    1228:	02 c0       	rjmp	.+4      	; 0x122e <vfprintf+0xe8>
    122a:	98 36       	cpi	r25, 0x68	; 104
    122c:	49 f4       	brne	.+18     	; 0x1240 <vfprintf+0xfa>
    122e:	f2 01       	movw	r30, r4
    1230:	23 fd       	sbrc	r18, 3
    1232:	95 91       	lpm	r25, Z+
    1234:	23 ff       	sbrs	r18, 3
    1236:	91 91       	ld	r25, Z+
    1238:	2f 01       	movw	r4, r30
    123a:	99 23       	and	r25, r25
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0xfa>
    123e:	b8 cf       	rjmp	.-144    	; 0x11b0 <vfprintf+0x6a>
    1240:	89 2f       	mov	r24, r25
    1242:	85 54       	subi	r24, 0x45	; 69
    1244:	83 30       	cpi	r24, 0x03	; 3
    1246:	18 f0       	brcs	.+6      	; 0x124e <vfprintf+0x108>
    1248:	80 52       	subi	r24, 0x20	; 32
    124a:	83 30       	cpi	r24, 0x03	; 3
    124c:	38 f4       	brcc	.+14     	; 0x125c <vfprintf+0x116>
    124e:	44 e0       	ldi	r20, 0x04	; 4
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	a4 0e       	add	r10, r20
    1254:	b5 1e       	adc	r11, r21
    1256:	5f e3       	ldi	r21, 0x3F	; 63
    1258:	59 83       	std	Y+1, r21	; 0x01
    125a:	0f c0       	rjmp	.+30     	; 0x127a <vfprintf+0x134>
    125c:	93 36       	cpi	r25, 0x63	; 99
    125e:	31 f0       	breq	.+12     	; 0x126c <vfprintf+0x126>
    1260:	93 37       	cpi	r25, 0x73	; 115
    1262:	79 f0       	breq	.+30     	; 0x1282 <vfprintf+0x13c>
    1264:	93 35       	cpi	r25, 0x53	; 83
    1266:	09 f0       	breq	.+2      	; 0x126a <vfprintf+0x124>
    1268:	56 c0       	rjmp	.+172    	; 0x1316 <vfprintf+0x1d0>
    126a:	20 c0       	rjmp	.+64     	; 0x12ac <vfprintf+0x166>
    126c:	f5 01       	movw	r30, r10
    126e:	80 81       	ld	r24, Z
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	42 e0       	ldi	r20, 0x02	; 2
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	a4 0e       	add	r10, r20
    1278:	b5 1e       	adc	r11, r21
    127a:	61 01       	movw	r12, r2
    127c:	01 e0       	ldi	r16, 0x01	; 1
    127e:	10 e0       	ldi	r17, 0x00	; 0
    1280:	12 c0       	rjmp	.+36     	; 0x12a6 <vfprintf+0x160>
    1282:	f5 01       	movw	r30, r10
    1284:	c0 80       	ld	r12, Z
    1286:	d1 80       	ldd	r13, Z+1	; 0x01
    1288:	f6 fc       	sbrc	r15, 6
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <vfprintf+0x14c>
    128c:	6f ef       	ldi	r22, 0xFF	; 255
    128e:	7f ef       	ldi	r23, 0xFF	; 255
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x150>
    1292:	69 2d       	mov	r22, r9
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	42 e0       	ldi	r20, 0x02	; 2
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	a4 0e       	add	r10, r20
    129c:	b5 1e       	adc	r11, r21
    129e:	c6 01       	movw	r24, r12
    12a0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <strnlen>
    12a4:	8c 01       	movw	r16, r24
    12a6:	5f e7       	ldi	r21, 0x7F	; 127
    12a8:	f5 22       	and	r15, r21
    12aa:	14 c0       	rjmp	.+40     	; 0x12d4 <vfprintf+0x18e>
    12ac:	f5 01       	movw	r30, r10
    12ae:	c0 80       	ld	r12, Z
    12b0:	d1 80       	ldd	r13, Z+1	; 0x01
    12b2:	f6 fc       	sbrc	r15, 6
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x176>
    12b6:	6f ef       	ldi	r22, 0xFF	; 255
    12b8:	7f ef       	ldi	r23, 0xFF	; 255
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x17a>
    12bc:	69 2d       	mov	r22, r9
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	42 e0       	ldi	r20, 0x02	; 2
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	a4 0e       	add	r10, r20
    12c6:	b5 1e       	adc	r11, r21
    12c8:	c6 01       	movw	r24, r12
    12ca:	0e 94 80 0a 	call	0x1500	; 0x1500 <strnlen_P>
    12ce:	8c 01       	movw	r16, r24
    12d0:	50 e8       	ldi	r21, 0x80	; 128
    12d2:	f5 2a       	or	r15, r21
    12d4:	f3 fe       	sbrs	r15, 3
    12d6:	07 c0       	rjmp	.+14     	; 0x12e6 <vfprintf+0x1a0>
    12d8:	1a c0       	rjmp	.+52     	; 0x130e <vfprintf+0x1c8>
    12da:	80 e2       	ldi	r24, 0x20	; 32
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	b3 01       	movw	r22, r6
    12e0:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    12e4:	ea 94       	dec	r14
    12e6:	8e 2d       	mov	r24, r14
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	08 17       	cp	r16, r24
    12ec:	19 07       	cpc	r17, r25
    12ee:	a8 f3       	brcs	.-22     	; 0x12da <vfprintf+0x194>
    12f0:	0e c0       	rjmp	.+28     	; 0x130e <vfprintf+0x1c8>
    12f2:	f6 01       	movw	r30, r12
    12f4:	f7 fc       	sbrc	r15, 7
    12f6:	85 91       	lpm	r24, Z+
    12f8:	f7 fe       	sbrs	r15, 7
    12fa:	81 91       	ld	r24, Z+
    12fc:	6f 01       	movw	r12, r30
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	b3 01       	movw	r22, r6
    1302:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    1306:	e1 10       	cpse	r14, r1
    1308:	ea 94       	dec	r14
    130a:	01 50       	subi	r16, 0x01	; 1
    130c:	10 40       	sbci	r17, 0x00	; 0
    130e:	01 15       	cp	r16, r1
    1310:	11 05       	cpc	r17, r1
    1312:	79 f7       	brne	.-34     	; 0x12f2 <vfprintf+0x1ac>
    1314:	ea c0       	rjmp	.+468    	; 0x14ea <vfprintf+0x3a4>
    1316:	94 36       	cpi	r25, 0x64	; 100
    1318:	11 f0       	breq	.+4      	; 0x131e <vfprintf+0x1d8>
    131a:	99 36       	cpi	r25, 0x69	; 105
    131c:	69 f5       	brne	.+90     	; 0x1378 <vfprintf+0x232>
    131e:	f7 fe       	sbrs	r15, 7
    1320:	08 c0       	rjmp	.+16     	; 0x1332 <vfprintf+0x1ec>
    1322:	f5 01       	movw	r30, r10
    1324:	20 81       	ld	r18, Z
    1326:	31 81       	ldd	r19, Z+1	; 0x01
    1328:	42 81       	ldd	r20, Z+2	; 0x02
    132a:	53 81       	ldd	r21, Z+3	; 0x03
    132c:	84 e0       	ldi	r24, 0x04	; 4
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0a c0       	rjmp	.+20     	; 0x1346 <vfprintf+0x200>
    1332:	f5 01       	movw	r30, r10
    1334:	80 81       	ld	r24, Z
    1336:	91 81       	ldd	r25, Z+1	; 0x01
    1338:	9c 01       	movw	r18, r24
    133a:	44 27       	eor	r20, r20
    133c:	37 fd       	sbrc	r19, 7
    133e:	40 95       	com	r20
    1340:	54 2f       	mov	r21, r20
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	a8 0e       	add	r10, r24
    1348:	b9 1e       	adc	r11, r25
    134a:	9f e6       	ldi	r25, 0x6F	; 111
    134c:	f9 22       	and	r15, r25
    134e:	57 ff       	sbrs	r21, 7
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <vfprintf+0x21e>
    1352:	50 95       	com	r21
    1354:	40 95       	com	r20
    1356:	30 95       	com	r19
    1358:	21 95       	neg	r18
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	4f 4f       	sbci	r20, 0xFF	; 255
    135e:	5f 4f       	sbci	r21, 0xFF	; 255
    1360:	e0 e8       	ldi	r30, 0x80	; 128
    1362:	fe 2a       	or	r15, r30
    1364:	ca 01       	movw	r24, r20
    1366:	b9 01       	movw	r22, r18
    1368:	a1 01       	movw	r20, r2
    136a:	2a e0       	ldi	r18, 0x0A	; 10
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__ultoa_invert>
    1372:	d8 2e       	mov	r13, r24
    1374:	d2 18       	sub	r13, r2
    1376:	40 c0       	rjmp	.+128    	; 0x13f8 <vfprintf+0x2b2>
    1378:	95 37       	cpi	r25, 0x75	; 117
    137a:	29 f4       	brne	.+10     	; 0x1386 <vfprintf+0x240>
    137c:	1f 2d       	mov	r17, r15
    137e:	1f 7e       	andi	r17, 0xEF	; 239
    1380:	2a e0       	ldi	r18, 0x0A	; 10
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	1d c0       	rjmp	.+58     	; 0x13c0 <vfprintf+0x27a>
    1386:	1f 2d       	mov	r17, r15
    1388:	19 7f       	andi	r17, 0xF9	; 249
    138a:	9f 36       	cpi	r25, 0x6F	; 111
    138c:	61 f0       	breq	.+24     	; 0x13a6 <vfprintf+0x260>
    138e:	90 37       	cpi	r25, 0x70	; 112
    1390:	20 f4       	brcc	.+8      	; 0x139a <vfprintf+0x254>
    1392:	98 35       	cpi	r25, 0x58	; 88
    1394:	09 f0       	breq	.+2      	; 0x1398 <vfprintf+0x252>
    1396:	ac c0       	rjmp	.+344    	; 0x14f0 <vfprintf+0x3aa>
    1398:	0f c0       	rjmp	.+30     	; 0x13b8 <vfprintf+0x272>
    139a:	90 37       	cpi	r25, 0x70	; 112
    139c:	39 f0       	breq	.+14     	; 0x13ac <vfprintf+0x266>
    139e:	98 37       	cpi	r25, 0x78	; 120
    13a0:	09 f0       	breq	.+2      	; 0x13a4 <vfprintf+0x25e>
    13a2:	a6 c0       	rjmp	.+332    	; 0x14f0 <vfprintf+0x3aa>
    13a4:	04 c0       	rjmp	.+8      	; 0x13ae <vfprintf+0x268>
    13a6:	28 e0       	ldi	r18, 0x08	; 8
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	0a c0       	rjmp	.+20     	; 0x13c0 <vfprintf+0x27a>
    13ac:	10 61       	ori	r17, 0x10	; 16
    13ae:	14 fd       	sbrc	r17, 4
    13b0:	14 60       	ori	r17, 0x04	; 4
    13b2:	20 e1       	ldi	r18, 0x10	; 16
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	04 c0       	rjmp	.+8      	; 0x13c0 <vfprintf+0x27a>
    13b8:	14 fd       	sbrc	r17, 4
    13ba:	16 60       	ori	r17, 0x06	; 6
    13bc:	20 e1       	ldi	r18, 0x10	; 16
    13be:	32 e0       	ldi	r19, 0x02	; 2
    13c0:	17 ff       	sbrs	r17, 7
    13c2:	08 c0       	rjmp	.+16     	; 0x13d4 <vfprintf+0x28e>
    13c4:	f5 01       	movw	r30, r10
    13c6:	60 81       	ld	r22, Z
    13c8:	71 81       	ldd	r23, Z+1	; 0x01
    13ca:	82 81       	ldd	r24, Z+2	; 0x02
    13cc:	93 81       	ldd	r25, Z+3	; 0x03
    13ce:	44 e0       	ldi	r20, 0x04	; 4
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	08 c0       	rjmp	.+16     	; 0x13e4 <vfprintf+0x29e>
    13d4:	f5 01       	movw	r30, r10
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	bc 01       	movw	r22, r24
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	42 e0       	ldi	r20, 0x02	; 2
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	a4 0e       	add	r10, r20
    13e6:	b5 1e       	adc	r11, r21
    13e8:	a1 01       	movw	r20, r2
    13ea:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__ultoa_invert>
    13ee:	d8 2e       	mov	r13, r24
    13f0:	d2 18       	sub	r13, r2
    13f2:	8f e7       	ldi	r24, 0x7F	; 127
    13f4:	f8 2e       	mov	r15, r24
    13f6:	f1 22       	and	r15, r17
    13f8:	f6 fe       	sbrs	r15, 6
    13fa:	0b c0       	rjmp	.+22     	; 0x1412 <vfprintf+0x2cc>
    13fc:	5e ef       	ldi	r21, 0xFE	; 254
    13fe:	f5 22       	and	r15, r21
    1400:	d9 14       	cp	r13, r9
    1402:	38 f4       	brcc	.+14     	; 0x1412 <vfprintf+0x2cc>
    1404:	f4 fe       	sbrs	r15, 4
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <vfprintf+0x2d0>
    1408:	f2 fc       	sbrc	r15, 2
    140a:	05 c0       	rjmp	.+10     	; 0x1416 <vfprintf+0x2d0>
    140c:	8f ee       	ldi	r24, 0xEF	; 239
    140e:	f8 22       	and	r15, r24
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <vfprintf+0x2d0>
    1412:	1d 2d       	mov	r17, r13
    1414:	01 c0       	rjmp	.+2      	; 0x1418 <vfprintf+0x2d2>
    1416:	19 2d       	mov	r17, r9
    1418:	f4 fe       	sbrs	r15, 4
    141a:	0d c0       	rjmp	.+26     	; 0x1436 <vfprintf+0x2f0>
    141c:	fe 01       	movw	r30, r28
    141e:	ed 0d       	add	r30, r13
    1420:	f1 1d       	adc	r31, r1
    1422:	80 81       	ld	r24, Z
    1424:	80 33       	cpi	r24, 0x30	; 48
    1426:	19 f4       	brne	.+6      	; 0x142e <vfprintf+0x2e8>
    1428:	99 ee       	ldi	r25, 0xE9	; 233
    142a:	f9 22       	and	r15, r25
    142c:	08 c0       	rjmp	.+16     	; 0x143e <vfprintf+0x2f8>
    142e:	1f 5f       	subi	r17, 0xFF	; 255
    1430:	f2 fe       	sbrs	r15, 2
    1432:	05 c0       	rjmp	.+10     	; 0x143e <vfprintf+0x2f8>
    1434:	03 c0       	rjmp	.+6      	; 0x143c <vfprintf+0x2f6>
    1436:	8f 2d       	mov	r24, r15
    1438:	86 78       	andi	r24, 0x86	; 134
    143a:	09 f0       	breq	.+2      	; 0x143e <vfprintf+0x2f8>
    143c:	1f 5f       	subi	r17, 0xFF	; 255
    143e:	0f 2d       	mov	r16, r15
    1440:	f3 fc       	sbrc	r15, 3
    1442:	14 c0       	rjmp	.+40     	; 0x146c <vfprintf+0x326>
    1444:	f0 fe       	sbrs	r15, 0
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <vfprintf+0x320>
    1448:	1e 15       	cp	r17, r14
    144a:	10 f0       	brcs	.+4      	; 0x1450 <vfprintf+0x30a>
    144c:	9d 2c       	mov	r9, r13
    144e:	0b c0       	rjmp	.+22     	; 0x1466 <vfprintf+0x320>
    1450:	9d 2c       	mov	r9, r13
    1452:	9e 0c       	add	r9, r14
    1454:	91 1a       	sub	r9, r17
    1456:	1e 2d       	mov	r17, r14
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <vfprintf+0x320>
    145a:	80 e2       	ldi	r24, 0x20	; 32
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	b3 01       	movw	r22, r6
    1460:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    1464:	1f 5f       	subi	r17, 0xFF	; 255
    1466:	1e 15       	cp	r17, r14
    1468:	c0 f3       	brcs	.-16     	; 0x145a <vfprintf+0x314>
    146a:	04 c0       	rjmp	.+8      	; 0x1474 <vfprintf+0x32e>
    146c:	1e 15       	cp	r17, r14
    146e:	10 f4       	brcc	.+4      	; 0x1474 <vfprintf+0x32e>
    1470:	e1 1a       	sub	r14, r17
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <vfprintf+0x330>
    1474:	ee 24       	eor	r14, r14
    1476:	04 ff       	sbrs	r16, 4
    1478:	0f c0       	rjmp	.+30     	; 0x1498 <vfprintf+0x352>
    147a:	80 e3       	ldi	r24, 0x30	; 48
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	b3 01       	movw	r22, r6
    1480:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    1484:	02 ff       	sbrs	r16, 2
    1486:	1d c0       	rjmp	.+58     	; 0x14c2 <vfprintf+0x37c>
    1488:	01 fd       	sbrc	r16, 1
    148a:	03 c0       	rjmp	.+6      	; 0x1492 <vfprintf+0x34c>
    148c:	88 e7       	ldi	r24, 0x78	; 120
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <vfprintf+0x368>
    1492:	88 e5       	ldi	r24, 0x58	; 88
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	0b c0       	rjmp	.+22     	; 0x14ae <vfprintf+0x368>
    1498:	80 2f       	mov	r24, r16
    149a:	86 78       	andi	r24, 0x86	; 134
    149c:	91 f0       	breq	.+36     	; 0x14c2 <vfprintf+0x37c>
    149e:	01 ff       	sbrs	r16, 1
    14a0:	02 c0       	rjmp	.+4      	; 0x14a6 <vfprintf+0x360>
    14a2:	8b e2       	ldi	r24, 0x2B	; 43
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <vfprintf+0x362>
    14a6:	80 e2       	ldi	r24, 0x20	; 32
    14a8:	f7 fc       	sbrc	r15, 7
    14aa:	8d e2       	ldi	r24, 0x2D	; 45
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	b3 01       	movw	r22, r6
    14b0:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14b4:	06 c0       	rjmp	.+12     	; 0x14c2 <vfprintf+0x37c>
    14b6:	80 e3       	ldi	r24, 0x30	; 48
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	b3 01       	movw	r22, r6
    14bc:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14c0:	9a 94       	dec	r9
    14c2:	d9 14       	cp	r13, r9
    14c4:	c0 f3       	brcs	.-16     	; 0x14b6 <vfprintf+0x370>
    14c6:	da 94       	dec	r13
    14c8:	f1 01       	movw	r30, r2
    14ca:	ed 0d       	add	r30, r13
    14cc:	f1 1d       	adc	r31, r1
    14ce:	80 81       	ld	r24, Z
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	b3 01       	movw	r22, r6
    14d4:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14d8:	dd 20       	and	r13, r13
    14da:	a9 f7       	brne	.-22     	; 0x14c6 <vfprintf+0x380>
    14dc:	06 c0       	rjmp	.+12     	; 0x14ea <vfprintf+0x3a4>
    14de:	80 e2       	ldi	r24, 0x20	; 32
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	b3 01       	movw	r22, r6
    14e4:	0e 94 96 0a 	call	0x152c	; 0x152c <fputc>
    14e8:	ea 94       	dec	r14
    14ea:	ee 20       	and	r14, r14
    14ec:	c1 f7       	brne	.-16     	; 0x14de <vfprintf+0x398>
    14ee:	43 ce       	rjmp	.-890    	; 0x1176 <vfprintf+0x30>
    14f0:	f3 01       	movw	r30, r6
    14f2:	66 81       	ldd	r22, Z+6	; 0x06
    14f4:	77 81       	ldd	r23, Z+7	; 0x07
    14f6:	cb 01       	movw	r24, r22
    14f8:	2b 96       	adiw	r28, 0x0b	; 11
    14fa:	e2 e1       	ldi	r30, 0x12	; 18
    14fc:	0c 94 3c 0b 	jmp	0x1678	; 0x1678 <__epilogue_restores__>

00001500 <strnlen_P>:
    1500:	fc 01       	movw	r30, r24
    1502:	05 90       	lpm	r0, Z+
    1504:	61 50       	subi	r22, 0x01	; 1
    1506:	70 40       	sbci	r23, 0x00	; 0
    1508:	01 10       	cpse	r0, r1
    150a:	d8 f7       	brcc	.-10     	; 0x1502 <strnlen_P+0x2>
    150c:	80 95       	com	r24
    150e:	90 95       	com	r25
    1510:	8e 0f       	add	r24, r30
    1512:	9f 1f       	adc	r25, r31
    1514:	08 95       	ret

00001516 <strnlen>:
    1516:	fc 01       	movw	r30, r24
    1518:	61 50       	subi	r22, 0x01	; 1
    151a:	70 40       	sbci	r23, 0x00	; 0
    151c:	01 90       	ld	r0, Z+
    151e:	01 10       	cpse	r0, r1
    1520:	d8 f7       	brcc	.-10     	; 0x1518 <strnlen+0x2>
    1522:	80 95       	com	r24
    1524:	90 95       	com	r25
    1526:	8e 0f       	add	r24, r30
    1528:	9f 1f       	adc	r25, r31
    152a:	08 95       	ret

0000152c <fputc>:
    152c:	0f 93       	push	r16
    152e:	1f 93       	push	r17
    1530:	cf 93       	push	r28
    1532:	df 93       	push	r29
    1534:	8c 01       	movw	r16, r24
    1536:	eb 01       	movw	r28, r22
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	81 ff       	sbrs	r24, 1
    153c:	1b c0       	rjmp	.+54     	; 0x1574 <fputc+0x48>
    153e:	82 ff       	sbrs	r24, 2
    1540:	0d c0       	rjmp	.+26     	; 0x155c <fputc+0x30>
    1542:	2e 81       	ldd	r18, Y+6	; 0x06
    1544:	3f 81       	ldd	r19, Y+7	; 0x07
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	28 17       	cp	r18, r24
    154c:	39 07       	cpc	r19, r25
    154e:	64 f4       	brge	.+24     	; 0x1568 <fputc+0x3c>
    1550:	e8 81       	ld	r30, Y
    1552:	f9 81       	ldd	r31, Y+1	; 0x01
    1554:	01 93       	st	Z+, r16
    1556:	f9 83       	std	Y+1, r31	; 0x01
    1558:	e8 83       	st	Y, r30
    155a:	06 c0       	rjmp	.+12     	; 0x1568 <fputc+0x3c>
    155c:	e8 85       	ldd	r30, Y+8	; 0x08
    155e:	f9 85       	ldd	r31, Y+9	; 0x09
    1560:	80 2f       	mov	r24, r16
    1562:	09 95       	icall
    1564:	89 2b       	or	r24, r25
    1566:	31 f4       	brne	.+12     	; 0x1574 <fputc+0x48>
    1568:	8e 81       	ldd	r24, Y+6	; 0x06
    156a:	9f 81       	ldd	r25, Y+7	; 0x07
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	9f 83       	std	Y+7, r25	; 0x07
    1570:	8e 83       	std	Y+6, r24	; 0x06
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <fputc+0x4c>
    1574:	0f ef       	ldi	r16, 0xFF	; 255
    1576:	1f ef       	ldi	r17, 0xFF	; 255
    1578:	c8 01       	movw	r24, r16
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	08 95       	ret

00001584 <__ultoa_invert>:
    1584:	fa 01       	movw	r30, r20
    1586:	aa 27       	eor	r26, r26
    1588:	28 30       	cpi	r18, 0x08	; 8
    158a:	51 f1       	breq	.+84     	; 0x15e0 <__ultoa_invert+0x5c>
    158c:	20 31       	cpi	r18, 0x10	; 16
    158e:	81 f1       	breq	.+96     	; 0x15f0 <__ultoa_invert+0x6c>
    1590:	e8 94       	clt
    1592:	6f 93       	push	r22
    1594:	6e 7f       	andi	r22, 0xFE	; 254
    1596:	6e 5f       	subi	r22, 0xFE	; 254
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	8f 4f       	sbci	r24, 0xFF	; 255
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	af 4f       	sbci	r26, 0xFF	; 255
    15a0:	b1 e0       	ldi	r27, 0x01	; 1
    15a2:	3e d0       	rcall	.+124    	; 0x1620 <__ultoa_invert+0x9c>
    15a4:	b4 e0       	ldi	r27, 0x04	; 4
    15a6:	3c d0       	rcall	.+120    	; 0x1620 <__ultoa_invert+0x9c>
    15a8:	67 0f       	add	r22, r23
    15aa:	78 1f       	adc	r23, r24
    15ac:	89 1f       	adc	r24, r25
    15ae:	9a 1f       	adc	r25, r26
    15b0:	a1 1d       	adc	r26, r1
    15b2:	68 0f       	add	r22, r24
    15b4:	79 1f       	adc	r23, r25
    15b6:	8a 1f       	adc	r24, r26
    15b8:	91 1d       	adc	r25, r1
    15ba:	a1 1d       	adc	r26, r1
    15bc:	6a 0f       	add	r22, r26
    15be:	71 1d       	adc	r23, r1
    15c0:	81 1d       	adc	r24, r1
    15c2:	91 1d       	adc	r25, r1
    15c4:	a1 1d       	adc	r26, r1
    15c6:	20 d0       	rcall	.+64     	; 0x1608 <__ultoa_invert+0x84>
    15c8:	09 f4       	brne	.+2      	; 0x15cc <__ultoa_invert+0x48>
    15ca:	68 94       	set
    15cc:	3f 91       	pop	r19
    15ce:	2a e0       	ldi	r18, 0x0A	; 10
    15d0:	26 9f       	mul	r18, r22
    15d2:	11 24       	eor	r1, r1
    15d4:	30 19       	sub	r19, r0
    15d6:	30 5d       	subi	r19, 0xD0	; 208
    15d8:	31 93       	st	Z+, r19
    15da:	de f6       	brtc	.-74     	; 0x1592 <__ultoa_invert+0xe>
    15dc:	cf 01       	movw	r24, r30
    15de:	08 95       	ret
    15e0:	46 2f       	mov	r20, r22
    15e2:	47 70       	andi	r20, 0x07	; 7
    15e4:	40 5d       	subi	r20, 0xD0	; 208
    15e6:	41 93       	st	Z+, r20
    15e8:	b3 e0       	ldi	r27, 0x03	; 3
    15ea:	0f d0       	rcall	.+30     	; 0x160a <__ultoa_invert+0x86>
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__ultoa_invert+0x5c>
    15ee:	f6 cf       	rjmp	.-20     	; 0x15dc <__ultoa_invert+0x58>
    15f0:	46 2f       	mov	r20, r22
    15f2:	4f 70       	andi	r20, 0x0F	; 15
    15f4:	40 5d       	subi	r20, 0xD0	; 208
    15f6:	4a 33       	cpi	r20, 0x3A	; 58
    15f8:	18 f0       	brcs	.+6      	; 0x1600 <__ultoa_invert+0x7c>
    15fa:	49 5d       	subi	r20, 0xD9	; 217
    15fc:	31 fd       	sbrc	r19, 1
    15fe:	40 52       	subi	r20, 0x20	; 32
    1600:	41 93       	st	Z+, r20
    1602:	02 d0       	rcall	.+4      	; 0x1608 <__ultoa_invert+0x84>
    1604:	a9 f7       	brne	.-22     	; 0x15f0 <__ultoa_invert+0x6c>
    1606:	ea cf       	rjmp	.-44     	; 0x15dc <__ultoa_invert+0x58>
    1608:	b4 e0       	ldi	r27, 0x04	; 4
    160a:	a6 95       	lsr	r26
    160c:	97 95       	ror	r25
    160e:	87 95       	ror	r24
    1610:	77 95       	ror	r23
    1612:	67 95       	ror	r22
    1614:	ba 95       	dec	r27
    1616:	c9 f7       	brne	.-14     	; 0x160a <__ultoa_invert+0x86>
    1618:	00 97       	sbiw	r24, 0x00	; 0
    161a:	61 05       	cpc	r22, r1
    161c:	71 05       	cpc	r23, r1
    161e:	08 95       	ret
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	0a 2e       	mov	r0, r26
    1626:	06 94       	lsr	r0
    1628:	57 95       	ror	r21
    162a:	47 95       	ror	r20
    162c:	37 95       	ror	r19
    162e:	27 95       	ror	r18
    1630:	ba 95       	dec	r27
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__ultoa_invert+0xa2>
    1634:	62 0f       	add	r22, r18
    1636:	73 1f       	adc	r23, r19
    1638:	84 1f       	adc	r24, r20
    163a:	95 1f       	adc	r25, r21
    163c:	a0 1d       	adc	r26, r0
    163e:	08 95       	ret

00001640 <__prologue_saves__>:
    1640:	2f 92       	push	r2
    1642:	3f 92       	push	r3
    1644:	4f 92       	push	r4
    1646:	5f 92       	push	r5
    1648:	6f 92       	push	r6
    164a:	7f 92       	push	r7
    164c:	8f 92       	push	r8
    164e:	9f 92       	push	r9
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	cd b7       	in	r28, 0x3d	; 61
    1666:	de b7       	in	r29, 0x3e	; 62
    1668:	ca 1b       	sub	r28, r26
    166a:	db 0b       	sbc	r29, r27
    166c:	0f b6       	in	r0, 0x3f	; 63
    166e:	f8 94       	cli
    1670:	de bf       	out	0x3e, r29	; 62
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	cd bf       	out	0x3d, r28	; 61
    1676:	09 94       	ijmp

00001678 <__epilogue_restores__>:
    1678:	2a 88       	ldd	r2, Y+18	; 0x12
    167a:	39 88       	ldd	r3, Y+17	; 0x11
    167c:	48 88       	ldd	r4, Y+16	; 0x10
    167e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1680:	6e 84       	ldd	r6, Y+14	; 0x0e
    1682:	7d 84       	ldd	r7, Y+13	; 0x0d
    1684:	8c 84       	ldd	r8, Y+12	; 0x0c
    1686:	9b 84       	ldd	r9, Y+11	; 0x0b
    1688:	aa 84       	ldd	r10, Y+10	; 0x0a
    168a:	b9 84       	ldd	r11, Y+9	; 0x09
    168c:	c8 84       	ldd	r12, Y+8	; 0x08
    168e:	df 80       	ldd	r13, Y+7	; 0x07
    1690:	ee 80       	ldd	r14, Y+6	; 0x06
    1692:	fd 80       	ldd	r15, Y+5	; 0x05
    1694:	0c 81       	ldd	r16, Y+4	; 0x04
    1696:	1b 81       	ldd	r17, Y+3	; 0x03
    1698:	aa 81       	ldd	r26, Y+2	; 0x02
    169a:	b9 81       	ldd	r27, Y+1	; 0x01
    169c:	ce 0f       	add	r28, r30
    169e:	d1 1d       	adc	r29, r1
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	ed 01       	movw	r28, r26
    16ac:	08 95       	ret

000016ae <_exit>:
    16ae:	f8 94       	cli

000016b0 <__stop_program>:
    16b0:	ff cf       	rjmp	.-2      	; 0x16b0 <__stop_program>
