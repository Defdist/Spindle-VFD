
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000015f2  00001686  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000015f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800104  00800104  0000168a  2**0
                  ALLOC
  3 .debug_aranges 00000268  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007ba  00000000  00000000  000018f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001548  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  000035f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013f6  00000000  00000000  00003d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003f0  00000000  00000000  00005158  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000084e  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3f  00000000  00000000  00005d96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000230  00000000  00000000  000067d5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
}


//! @brief set type of regulation
//! @post Open loop regulation Set
void mc_set_open_loop(){regulation_type = OPEN_LOOP;}
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
 * The timer 0 is used to generate an IT when an overflow occurs
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
         return FALSE;
      }
      str1++;str2++;
   }
   return TRUE;
}
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 24 03 	jmp	0x648	; 0x648 <__vector_5>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 b0 02 	jmp	0x560	; 0x560 <__vector_12>
      34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 bb 03 	jmp	0x776	; 0x776 <__vector_17>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 36 04 	jmp	0x86c	; 0x86c <__vector_23>
      60:	0c 94 70 04 	jmp	0x8e0	; 0x8e0 <__vector_24>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__vector_27>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

0000007c <str_run>:
      7c:	72 75 00                                            ru.

0000007f <str_stop>:
      7f:	73 74 00                                            st.

00000082 <str_help>:
      82:	68 65 6c 70 00                                      help.

00000087 <str_forward>:
      87:	66 77 00                                            fw.

0000008a <str_backward>:
      8a:	62 77 00                                            bw.

0000008d <str_set_speed>:
      8d:	73 73 00                                            ss.

00000090 <str_get_id>:
      90:	67 69 00                                            gi.

00000093 <str_get_status0>:
      93:	67 30 00                                            g0.

00000096 <str_get_status1>:
      96:	67 31 00                                            g1.

00000099 <msg_prompt>:
      99:	0d 3e 00                                            .>.

0000009c <msg_welcome>:
      9c:	0d 41 54 4d 45 4c 20 4d 6f 74 6f 72 20 43 6f 6e     .ATMEL Motor Con
      ac:	74 72 6f 6c 20 49 6e 74 65 72 66 61 63 65 00        trol Interface.

000000bb <msg_help>:
      bb:	0d 72 75 20 3a 20 72 75 6e 0d 73 74 20 3a 20 73     .ru : run.st : s
      cb:	74 6f 70 0d 66 77 20 3a 20 66 6f 72 77 61 72 64     top.fw : forward
      db:	0d 62 77 20 3a 20 62 61 63 6b 77 61 72 64 0d 73     .bw : backward.s
      eb:	73 20 3a 20 73 65 74 20 73 70 65 65 64 0d 67 69     s : set speed.gi
      fb:	20 3a 20 67 65 74 20 69 64 00                        : get id.

00000105 <msg_er_cmd_not_found>:
     105:	55 6e 6b 6e 6f 77 6e 20 43 6f 6d 6d 61 6e 64 00     Unknown Command.
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e2 ef       	ldi	r30, 0xF2	; 242
     12a:	f5 e1       	ldi	r31, 0x15	; 21
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a4 30       	cpi	r26, 0x04	; 4
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a4 e0       	ldi	r26, 0x04	; 4
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a0 37       	cpi	r26, 0x70	; 112
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 ba 00 	call	0x174	; 0x174 <main>
     14c:	0c 94 f7 0a 	jmp	0x15ee	; 0x15ee <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <ascii_to_bin>:
//! @return none
//!
//!/
U8 ascii_to_bin (U8 c)
{
  if (c>='a') return(c-('a'-0x0A));
     154:	81 36       	cpi	r24, 0x61	; 97
     156:	10 f0       	brcs	.+4      	; 0x15c <ascii_to_bin+0x8>
     158:	87 55       	subi	r24, 0x57	; 87
     15a:	08 95       	ret
  if (c>='A') return(c-('A'-0x0A));
     15c:	81 34       	cpi	r24, 0x41	; 65
     15e:	10 f0       	brcs	.+4      	; 0x164 <ascii_to_bin+0x10>
     160:	87 53       	subi	r24, 0x37	; 55
     162:	08 95       	ret
  return(c-'0');
     164:	80 53       	subi	r24, 0x30	; 48
}
     166:	08 95       	ret

00000168 <bin_to_ascii>:
//! @return none
//!
//!/
U8 bin_to_ascii (U8 c)
{
  if (c>=0x0A) return (c+('A'-0x0A));
     168:	8a 30       	cpi	r24, 0x0A	; 10
     16a:	10 f0       	brcs	.+4      	; 0x170 <bin_to_ascii+0x8>
     16c:	89 5c       	subi	r24, 0xC9	; 201
     16e:	08 95       	ret
  return (c+'0');
     170:	80 5d       	subi	r24, 0xD0	; 208
}
     172:	08 95       	ret

00000174 <main>:
//!
int main(void)
{

  // init motor
  mc_init();  // launch initialization of the motor application
     174:	0e 94 0b 05 	call	0xa16	; 0xa16 <mc_init>
  
  // Initialyze the communication system for External Command through Uart
  ushell_task_init();
     178:	0e 94 b8 07 	call	0xf70	; 0xf70 <ushell_task_init>

  // Start the motor
  mci_set_ref_speed(0);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 a6 04 	call	0x94c	; 0x94c <mci_set_ref_speed>
  mci_run();
     182:	0e 94 27 05 	call	0xa4e	; 0xa4e <mci_run>
  mc_set_speed_loop(); // uncomment to activate the speed regulation loop
     186:	0e 94 f6 00 	call	0x1ec	; 0x1ec <mc_set_speed_loop>
  while(1)
  {
    // Launch regulation loop
    // Timer 1 generate an IT (g_tick) all 250us
    // Sampling period = n * 250us
    if (g_tick == TRUE)
     18a:	80 91 1a 01 	lds	r24, 0x011A
     18e:	81 30       	cpi	r24, 0x01	; 1
     190:	29 f5       	brne	.+74     	; 0x1dc <main+0x68>
    {
      g_tick = FALSE;
     192:	10 92 1a 01 	sts	0x011A, r1
      mc_ADC_Scheduler(); // Get Current and potentiometer value
     196:	0e 94 bf 02 	call	0x57e	; 0x57e <mc_ADC_Scheduler>
      g_regulation_period += 1;
     19a:	80 91 04 01 	lds	r24, 0x0104
     19e:	90 91 05 01 	lds	r25, 0x0105
     1a2:	01 96       	adiw	r24, 0x01	; 1
     1a4:	90 93 05 01 	sts	0x0105, r25
     1a8:	80 93 04 01 	sts	0x0104, r24
	  
      if(g_regulation_period >= 40) //n * 250us = Te
     1ac:	88 97       	sbiw	r24, 0x28	; 40
     1ae:	70 f0       	brcs	.+28     	; 0x1cc <main+0x58>
      {
        g_regulation_period = 0;
     1b0:	10 92 05 01 	sts	0x0105, r1
     1b4:	10 92 04 01 	sts	0x0104, r1

        if (ushell_active == FALSE)
     1b8:	80 91 2a 01 	lds	r24, 0x012A
     1bc:	88 23       	and	r24, r24
     1be:	21 f4       	brne	.+8      	; 0x1c8 <main+0x54>
        {
          // Set User Speed Command with potentiometer
          mci_set_ref_speed(mc_get_potentiometer_value());
     1c0:	0e 94 05 05 	call	0xa0a	; 0xa0a <mc_get_potentiometer_value>
     1c4:	0e 94 a6 04 	call	0x94c	; 0x94c <mci_set_ref_speed>
        }
        mc_regulation_loop(); // launch regulation loop
     1c8:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
      }
      mc_duty_cycle(mc_get_duty_cycle());
     1cc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     1d0:	0e 94 29 02 	call	0x452	; 0x452 <mc_duty_cycle>
      ushell_task();
     1d4:	0e 94 29 07 	call	0xe52	; 0xe52 <ushell_task>
      mc_inrush_task();       // manage the inrush current
     1d8:	0e 94 0f 03 	call	0x61e	; 0x61e <mc_inrush_task>
    }
	
    if (overcurrent==0)
     1dc:	80 91 18 01 	lds	r24, 0x0118
     1e0:	88 23       	and	r24, r24
     1e2:	11 f4       	brne	.+4      	; 0x1e8 <main+0x74>
    {
	    A4910_Enable();
     1e4:	2c 9a       	sbi	0x05, 4	; 5
     1e6:	d1 cf       	rjmp	.-94     	; 0x18a <main+0x16>
    }
    else
    {
	    A4910_Disable();
     1e8:	2c 98       	cbi	0x05, 4	; 5
     1ea:	cf cf       	rjmp	.-98     	; 0x18a <main+0x16>

000001ec <mc_set_speed_loop>:


//! @brief set type of regulation
void mc_set_speed_loop(){regulation_type = SPEED_LOOP;}
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 07 01 	sts	0x0107, r24
     1f2:	08 95       	ret

000001f4 <mc_get_duty_cycle>:

//! @brief set type of regulation
U8 mc_get_duty_cycle()
{
  return duty_cycle;
}
     1f4:	80 91 06 01 	lds	r24, 0x0106
     1f8:	08 95       	ret

000001fa <mc_control_current>:
* need parameter : Kp_cur, Ki_cur ,Kd_cur and K_cur_scal in config_motor.h
* need to call in Te ms
* @return value of current, duty cycle on 8 bits
*/
U8 mc_control_current(U8 cur_cmd)
{
     1fa:	1f 93       	push	r17
     1fc:	18 2f       	mov	r17, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  cur_error = cur_cmd - (mci_get_measured_current());// value -255 <=> 255
     1fe:	0e 94 bc 04 	call	0x978	; 0x978 <mci_get_measured_current>
     202:	41 2f       	mov	r20, r17
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	48 1b       	sub	r20, r24
     208:	59 0b       	sbc	r21, r25
     20a:	50 93 11 01 	sts	0x0111, r21
     20e:	40 93 10 01 	sts	0x0110, r20

  // proportional term calculation
  cur_proportional = Kp_cur*cur_error;
     212:	50 93 17 01 	sts	0x0117, r21
     216:	40 93 16 01 	sts	0x0116, r20

  // integral term calculation
  cur_integral = cur_integral + cur_error;
     21a:	80 91 12 01 	lds	r24, 0x0112
     21e:	90 91 13 01 	lds	r25, 0x0113
     222:	84 0f       	add	r24, r20
     224:	95 1f       	adc	r25, r21
     226:	90 93 13 01 	sts	0x0113, r25
     22a:	80 93 12 01 	sts	0x0112, r24

  if(cur_integral >  255) cur_integral =  255;
     22e:	8f 3f       	cpi	r24, 0xFF	; 255
     230:	91 05       	cpc	r25, r1
     232:	39 f0       	breq	.+14     	; 0x242 <mc_control_current+0x48>
     234:	34 f0       	brlt	.+12     	; 0x242 <mc_control_current+0x48>
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	90 93 13 01 	sts	0x0113, r25
     23e:	80 93 12 01 	sts	0x0112, r24
  if(cur_integral < -255) cur_integral = -255;
     242:	80 91 12 01 	lds	r24, 0x0112
     246:	90 91 13 01 	lds	r25, 0x0113
     24a:	81 50       	subi	r24, 0x01	; 1
     24c:	9f 4f       	sbci	r25, 0xFF	; 255
     24e:	34 f4       	brge	.+12     	; 0x25c <mc_control_current+0x62>
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	9f ef       	ldi	r25, 0xFF	; 255
     254:	90 93 13 01 	sts	0x0113, r25
     258:	80 93 12 01 	sts	0x0112, r24

  cur_integ = Ki_cur*cur_integral;
     25c:	20 91 12 01 	lds	r18, 0x0112
     260:	30 91 13 01 	lds	r19, 0x0113
     264:	c9 01       	movw	r24, r18
     266:	88 0f       	add	r24, r24
     268:	99 1f       	adc	r25, r25
     26a:	82 0f       	add	r24, r18
     26c:	93 1f       	adc	r25, r19
     26e:	90 93 15 01 	sts	0x0115, r25
     272:	80 93 14 01 	sts	0x0114, r24
  cur_der = Kd_cur*cur_derivative;

  last_cur_error = cur_error;*/

  // Duty Cycle calculation
  increment = cur_proportional + cur_integ;
     276:	48 0f       	add	r20, r24
     278:	59 1f       	adc	r21, r25
     27a:	ca 01       	movw	r24, r20
     27c:	aa 27       	eor	r26, r26
     27e:	97 fd       	sbrc	r25, 7
     280:	a0 95       	com	r26
     282:	ba 2f       	mov	r27, r26
  //increment += cur_der;
  increment = increment >> K_cur_scal;
     284:	24 e0       	ldi	r18, 0x04	; 4
     286:	b5 95       	asr	r27
     288:	a7 95       	ror	r26
     28a:	97 95       	ror	r25
     28c:	87 95       	ror	r24
     28e:	2a 95       	dec	r18
     290:	d1 f7       	brne	.-12     	; 0x286 <mc_control_current+0x8c>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     292:	8f 3f       	cpi	r24, 0xFF	; 255
     294:	91 05       	cpc	r25, r1
     296:	a1 05       	cpc	r26, r1
     298:	b1 05       	cpc	r27, r1
     29a:	14 f0       	brlt	.+4      	; 0x2a0 <mc_control_current+0xa6>
     29c:	8f ef       	ldi	r24, 0xFF	; 255
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <mc_control_current+0xb2>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     2a0:	18 16       	cp	r1, r24
     2a2:	19 06       	cpc	r1, r25
     2a4:	1a 06       	cpc	r1, r26
     2a6:	1b 06       	cpc	r1, r27
     2a8:	0c f0       	brlt	.+2      	; 0x2ac <mc_control_current+0xb2>
     2aa:	80 e0       	ldi	r24, 0x00	; 0
    else Duty = (U8)(increment);
  }

  // return Duty Cycle
  return Duty;
}
     2ac:	1f 91       	pop	r17
     2ae:	08 95       	ret

000002b0 <mc_control_speed>:
* need parameter : Kp_speed, Ki_speed ,Kd_speed and K_speed_scal in config_motor.h
* need to call in Te ms
* @return value of speed, duty cycle on 8 bits
*/
U8 mc_control_speed(U8 speed_cmd)
{
     2b0:	0f 93       	push	r16
     2b2:	1f 93       	push	r17
     2b4:	08 2f       	mov	r16, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  speed_error = speed_cmd - mci_get_measured_speed();// value -255 <=> 255
     2b6:	0e 94 b9 04 	call	0x972	; 0x972 <mci_get_measured_speed>
     2ba:	10 e0       	ldi	r17, 0x00	; 0
     2bc:	08 1b       	sub	r16, r24
     2be:	11 09       	sbc	r17, r1
     2c0:	10 93 09 01 	sts	0x0109, r17
     2c4:	00 93 08 01 	sts	0x0108, r16

  // proportional term calculation
  speed_proportional = Kp_speed*speed_error;
     2c8:	c8 01       	movw	r24, r16
     2ca:	88 0f       	add	r24, r24
     2cc:	99 1f       	adc	r25, r25
     2ce:	a8 01       	movw	r20, r16
     2d0:	a5 e0       	ldi	r26, 0x05	; 5
     2d2:	44 0f       	add	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	aa 95       	dec	r26
     2d8:	e1 f7       	brne	.-8      	; 0x2d2 <mc_control_speed+0x22>
     2da:	48 1b       	sub	r20, r24
     2dc:	59 0b       	sbc	r21, r25
     2de:	50 93 0f 01 	sts	0x010F, r21
     2e2:	40 93 0e 01 	sts	0x010E, r20
  if(speed_integral >  255) speed_integral =  255;
  if(speed_integral < -255) speed_integral = -255;

  speed_integ = Ki_speed*speed_integral;
*/
  speed_integral = Ki_speed*(speed_integral + speed_error);
     2e6:	80 91 0a 01 	lds	r24, 0x010A
     2ea:	90 91 0b 01 	lds	r25, 0x010B
     2ee:	80 0f       	add	r24, r16
     2f0:	91 1f       	adc	r25, r17
     2f2:	9c 01       	movw	r18, r24
     2f4:	f5 e0       	ldi	r31, 0x05	; 5
     2f6:	22 0f       	add	r18, r18
     2f8:	33 1f       	adc	r19, r19
     2fa:	fa 95       	dec	r31
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <mc_control_speed+0x46>
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	28 1b       	sub	r18, r24
     304:	39 0b       	sbc	r19, r25
     306:	30 93 0b 01 	sts	0x010B, r19
     30a:	20 93 0a 01 	sts	0x010A, r18

  if(speed_integral >  255) speed_integral =  255;
     30e:	2f 3f       	cpi	r18, 0xFF	; 255
     310:	31 05       	cpc	r19, r1
     312:	39 f0       	breq	.+14     	; 0x322 <mc_control_speed+0x72>
     314:	34 f0       	brlt	.+12     	; 0x322 <mc_control_speed+0x72>
     316:	8f ef       	ldi	r24, 0xFF	; 255
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	90 93 0b 01 	sts	0x010B, r25
     31e:	80 93 0a 01 	sts	0x010A, r24
  if(speed_integral < -255) speed_integral = -255;
     322:	80 91 0a 01 	lds	r24, 0x010A
     326:	90 91 0b 01 	lds	r25, 0x010B
     32a:	81 50       	subi	r24, 0x01	; 1
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	34 f4       	brge	.+12     	; 0x33c <mc_control_speed+0x8c>
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	9f ef       	ldi	r25, 0xFF	; 255
     334:	90 93 0b 01 	sts	0x010B, r25
     338:	80 93 0a 01 	sts	0x010A, r24
  speed_der = Kd_speed*speed_derivative;

  last_speed_error = speed_error;*/

  // Duty Cycle calculation
  increment = speed_proportional + speed_integ;
     33c:	80 91 0c 01 	lds	r24, 0x010C
     340:	90 91 0d 01 	lds	r25, 0x010D
     344:	84 0f       	add	r24, r20
     346:	95 1f       	adc	r25, r21
     348:	9c 01       	movw	r18, r24
     34a:	44 27       	eor	r20, r20
     34c:	37 fd       	sbrc	r19, 7
     34e:	40 95       	com	r20
     350:	54 2f       	mov	r21, r20
  //increment += speed_der;
  increment = increment >> K_speed_scal;
     352:	74 e0       	ldi	r23, 0x04	; 4
     354:	55 95       	asr	r21
     356:	47 95       	ror	r20
     358:	37 95       	ror	r19
     35a:	27 95       	ror	r18
     35c:	7a 95       	dec	r23
     35e:	d1 f7       	brne	.-12     	; 0x354 <mc_control_speed+0xa4>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     360:	2f 3f       	cpi	r18, 0xFF	; 255
     362:	31 05       	cpc	r19, r1
     364:	41 05       	cpc	r20, r1
     366:	51 05       	cpc	r21, r1
     368:	14 f0       	brlt	.+4      	; 0x36e <mc_control_speed+0xbe>
     36a:	8f ef       	ldi	r24, 0xFF	; 255
     36c:	08 c0       	rjmp	.+16     	; 0x37e <mc_control_speed+0xce>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     36e:	12 16       	cp	r1, r18
     370:	13 06       	cpc	r1, r19
     372:	14 06       	cpc	r1, r20
     374:	15 06       	cpc	r1, r21
     376:	14 f0       	brlt	.+4      	; 0x37c <mc_control_speed+0xcc>
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	01 c0       	rjmp	.+2      	; 0x37e <mc_control_speed+0xce>
    else Duty = (U8)(increment);
     37c:	82 2f       	mov	r24, r18
  }

  // return Duty Cycle
  return Duty;
}
     37e:	1f 91       	pop	r17
     380:	0f 91       	pop	r16
     382:	08 95       	ret

00000384 <mc_regulation_loop>:

//! @brief launch speed control or no regulation
//! @post new duty cycle on PWM
void mc_regulation_loop()
{
  switch(regulation_type)
     384:	80 91 07 01 	lds	r24, 0x0107
     388:	81 30       	cpi	r24, 0x01	; 1
     38a:	41 f0       	breq	.+16     	; 0x39c <mc_regulation_loop+0x18>
     38c:	81 30       	cpi	r24, 0x01	; 1
     38e:	18 f0       	brcs	.+6      	; 0x396 <mc_regulation_loop+0x12>
     390:	82 30       	cpi	r24, 0x02	; 2
     392:	91 f4       	brne	.+36     	; 0x3b8 <mc_regulation_loop+0x34>
     394:	0b c0       	rjmp	.+22     	; 0x3ac <mc_regulation_loop+0x28>
  {
    case OPEN_LOOP     : duty_cycle = mci_get_ref_speed();break;
     396:	0e 94 a9 04 	call	0x952	; 0x952 <mci_get_ref_speed>
     39a:	05 c0       	rjmp	.+10     	; 0x3a6 <mc_regulation_loop+0x22>
    case SPEED_LOOP    : duty_cycle = mc_control_speed(2*mci_get_ref_speed());break;
     39c:	0e 94 a9 04 	call	0x952	; 0x952 <mci_get_ref_speed>
     3a0:	88 0f       	add	r24, r24
     3a2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <mc_control_speed>
     3a6:	80 93 06 01 	sts	0x0106, r24
     3aa:	08 95       	ret
    case CURRENT_LOOP  : duty_cycle = mc_control_current(mc_get_potentiometer_value());break;
     3ac:	0e 94 05 05 	call	0xa0a	; 0xa0a <mc_get_potentiometer_value>
     3b0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <mc_control_current>
     3b4:	80 93 06 01 	sts	0x0106, r24
     3b8:	08 95       	ret

000003ba <PSC_Init>:


//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
     3ba:	10 92 a1 00 	sts	0x00A1, r1
     3be:	10 92 a0 00 	sts	0x00A0, r1
     3c2:	10 92 a3 00 	sts	0x00A3, r1
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 a2 00 	sts	0x00A2, r24
     3cc:	10 92 a5 00 	sts	0x00A5, r1
     3d0:	10 92 a4 00 	sts	0x00A4, r1
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
     3d4:	10 92 a7 00 	sts	0x00A7, r1
     3d8:	10 92 a6 00 	sts	0x00A6, r1
     3dc:	10 92 a9 00 	sts	0x00A9, r1
     3e0:	80 93 a8 00 	sts	0x00A8, r24
     3e4:	10 92 ab 00 	sts	0x00AB, r1
     3e8:	10 92 aa 00 	sts	0x00AA, r1
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
     3ec:	10 92 ad 00 	sts	0x00AD, r1
     3f0:	10 92 ac 00 	sts	0x00AC, r1
     3f4:	10 92 af 00 	sts	0x00AF, r1
     3f8:	80 93 ae 00 	sts	0x00AE, r24
     3fc:	10 92 b1 00 	sts	0x00B1, r1
     400:	10 92 b0 00 	sts	0x00B0, r1
   Psc_set_register_RB(RB_VAL);
     404:	10 92 b3 00 	sts	0x00B3, r1
     408:	8f ef       	ldi	r24, 0xFF	; 255
     40a:	80 93 b2 00 	sts	0x00B2, r24

   Psc_config();
     40e:	84 e1       	ldi	r24, 0x14	; 20
     410:	80 93 b5 00 	sts	0x00B5, r24

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
     414:	98 e9       	ldi	r25, 0x98	; 152
     416:	90 93 b8 00 	sts	0x00B8, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
     41a:	88 ef       	ldi	r24, 0xF8	; 248
     41c:	80 93 b9 00 	sts	0x00B9, r24
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
     420:	90 93 ba 00 	sts	0x00BA, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
     424:	8f e0       	ldi	r24, 0x0F	; 15
     426:	80 93 bc 00 	sts	0x00BC, r24
   PIM = (1<<PEVE1);
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	80 93 bb 00 	sts	0x00BB, r24

   Psc_run();
     430:	81 e2       	ldi	r24, 0x21	; 33
     432:	80 93 b7 00 	sts	0x00B7, r24
}
     436:	08 95       	ret

00000438 <mc_get_hall>:
* @pre configuration of port PB and PD
* @post new value of position
*/
Hall_Position mc_get_hall(void)
{
  return HALL_SENSOR_VALUE();
     438:	29 b1       	in	r18, 0x09	; 9
     43a:	96 b1       	in	r25, 0x06	; 6
     43c:	89 b1       	in	r24, 0x09	; 9
     43e:	84 70       	andi	r24, 0x04	; 4
     440:	92 70       	andi	r25, 0x02	; 2
     442:	89 2b       	or	r24, r25
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	22 70       	andi	r18, 0x02	; 2
     448:	30 70       	andi	r19, 0x00	; 0
     44a:	35 95       	asr	r19
     44c:	27 95       	ror	r18
}
     44e:	82 2b       	or	r24, r18
     450:	08 95       	ret

00000452 <mc_duty_cycle>:
#if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
   U8 dutydt;   /* duty with dead time */
   if (duty >= DEADTIME) dutydt = duty - DEADTIME;
#endif
   
   Psc_lock();
     452:	e5 eb       	ldi	r30, 0xB5	; 181
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	94 e3       	ldi	r25, 0x34	; 52
     458:	90 83       	st	Z, r25

  // Duty = 0   => Duty Cycle   0%
  // Duty = 255 => Duty Cycle 100%
 
#if (CURRENT_DECAY == FAST_DECAY)
   Psc_set_module_A(duty,A_RA_VAL,duty);
     45a:	10 92 a1 00 	sts	0x00A1, r1
     45e:	80 93 a0 00 	sts	0x00A0, r24
     462:	10 92 a3 00 	sts	0x00A3, r1
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	90 93 a2 00 	sts	0x00A2, r25
     46c:	10 92 a5 00 	sts	0x00A5, r1
     470:	80 93 a4 00 	sts	0x00A4, r24
   Psc_set_module_B(duty,B_RA_VAL,duty);
     474:	10 92 a7 00 	sts	0x00A7, r1
     478:	80 93 a6 00 	sts	0x00A6, r24
     47c:	10 92 a9 00 	sts	0x00A9, r1
     480:	90 93 a8 00 	sts	0x00A8, r25
     484:	10 92 ab 00 	sts	0x00AB, r1
     488:	80 93 aa 00 	sts	0x00AA, r24
   Psc_set_module_C(duty,C_RA_VAL,duty);
     48c:	10 92 ad 00 	sts	0x00AD, r1
     490:	80 93 ac 00 	sts	0x00AC, r24
     494:	10 92 af 00 	sts	0x00AF, r1
     498:	90 93 ae 00 	sts	0x00AE, r25
     49c:	10 92 b1 00 	sts	0x00B1, r1
     4a0:	80 93 b0 00 	sts	0x00B0, r24
   Psc_set_module_B(duty,B_RA_VAL,0);
   Psc_set_module_C(duty,C_RA_VAL,0);
#endif
#endif
   
   Psc_unlock();
     4a4:	84 e1       	ldi	r24, 0x14	; 20
     4a6:	80 83       	st	Z, r24
}
     4a8:	08 95       	ret

000004aa <mc_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_init_timer1(void)  //JTS2do: swap with counter 0, which uses software 16 bit.
{
  TCCR1A = 0; //Normal port operation + Mode CTC
     4aa:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + clock prescaler=64
     4ae:	8b e0       	ldi	r24, 0x0B	; 11
     4b0:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0;
     4b4:	10 92 82 00 	sts	0x0082, r1
  OCR1AH = 0; //output compare register high byte
     4b8:	10 92 89 00 	sts	0x0089, r1
  OCR1AL = 63; // f ocra = 16MHz/64 = 250 kHz tick
     4bc:	8f e3       	ldi	r24, 0x3F	; 63
     4be:	80 93 88 00 	sts	0x0088, r24
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
     4c2:	82 e0       	ldi	r24, 0x02	; 2
     4c4:	80 93 6f 00 	sts	0x006F, r24
}
     4c8:	08 95       	ret

000004ca <mc_init_HW>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
     4ca:	85 b1       	in	r24, 0x05	; 5
     4cc:	8c 73       	andi	r24, 0x3C	; 60
     4ce:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
     4d0:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
     4d2:	58 98       	cbi	0x0b, 0	; 11

  // Set PSC MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
     4d4:	83 ec       	ldi	r24, 0xC3	; 195
     4d6:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
     4d8:	21 e0       	ldi	r18, 0x01	; 1
     4da:	27 b9       	out	0x07, r18	; 7
  DDRD = (1<<DDD0);
     4dc:	2a b9       	out	0x0a, r18	; 10
  
  A4910pinPB4_reset_Init(); //configure pin to digital output
     4de:	24 9a       	sbi	0x04, 4	; 4
  A4910_Enable(); //enable MOSFET driver
     4e0:	2c 9a       	sbi	0x05, 4	; 5

  // Set to disable digital input circuitry on all pins used as analog inputs.
  // This reduces power consumption, particularly when an analog signal is near Vcc/2.
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D); //CUR_B & CUR_C ADC inputs
     4e2:	83 e0       	ldi	r24, 0x03	; 3
     4e4:	80 93 7f 00 	sts	0x007F, r24
  DIDR0 = (1<<ADC6D); //CUR_A ADC input
     4e8:	80 e4       	ldi	r24, 0x40	; 64
     4ea:	80 93 7e 00 	sts	0x007E, r24
  
  //vref_source(); // Select the Vref Source
  //JTS2do: need to use 2.56 internal reference when measuring phase currents (absolute accuracy)
  //JTS2do: need to use VCC when measuring PWM from 328p (ratiometric)
  //The first ADC measurement after each switch should be discarded
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
     4ee:	80 91 7b 00 	lds	r24, 0x007B
     4f2:	8f 7b       	andi	r24, 0xBF	; 191
     4f4:	80 93 7b 00 	sts	0x007B, r24
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
     4f8:	80 91 7b 00 	lds	r24, 0x007B
     4fc:	80 62       	ori	r24, 0x20	; 32
     4fe:	80 93 7b 00 	sts	0x007B, r24
  // Select the Vref Source
//  init_vref_source ();

//  init_adc();
  Adc_config();
     502:	90 ec       	ldi	r25, 0xC0	; 192
     504:	90 93 7c 00 	sts	0x007C, r25
     508:	8a e8       	ldi	r24, 0x8A	; 138
     50a:	80 93 7a 00 	sts	0x007A, r24
     50e:	90 93 7b 00 	sts	0x007B, r25
  Amp1_config();
     512:	8d e8       	ldi	r24, 0x8D	; 141
     514:	80 93 76 00 	sts	0x0076, r24
  
  // Be careful : initialize DAC and Over_Current before PWM.
  // DAC is used for over current level
  Dac_config();
     518:	85 e0       	ldi	r24, 0x05	; 5
     51a:	80 93 90 00 	sts	0x0090, r24
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
     51e:	85 ea       	ldi	r24, 0xA5	; 165
     520:	80 93 92 00 	sts	0x0092, r24
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
  TCCR0A = 0;
     524:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
     526:	84 e0       	ldi	r24, 0x04	; 4
     528:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
     52a:	20 93 6e 00 	sts	0x006E, r18
  Dac_config();
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
    
  mc_init_timer0();
  mc_init_timer1();
     52e:	0e 94 55 02 	call	0x4aa	; 0x4aa <mc_init_timer1>

  Comp_0_config();
     532:	94 ec       	ldi	r25, 0xC4	; 196
     534:	90 93 94 00 	sts	0x0094, r25
  Comp_1_config();
     538:	85 e8       	ldi	r24, 0x85	; 133
     53a:	80 93 95 00 	sts	0x0095, r24
  Comp_2_config();
     53e:	90 93 96 00 	sts	0x0096, r25
  
  //JTS rewrote
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
     542:	96 e0       	ldi	r25, 0x06	; 6
     544:	90 93 6c 00 	sts	0x006C, r25
  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
     548:	82 e0       	ldi	r24, 0x02	; 2
     54a:	80 93 6b 00 	sts	0x006B, r24
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
     54e:	90 93 68 00 	sts	0x0068, r25

//  Start_pll_32_mega(); // Start the PLL and use the 32 MHz PLL output
  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
     552:	99 bd       	out	0x29, r25	; 41
  Wait_pll_ready();
     554:	09 b4       	in	r0, 0x29	; 41
     556:	00 fe       	sbrs	r0, 0
     558:	fd cf       	rjmp	.-6      	; 0x554 <mc_init_HW+0x8a>


  // => PSCx_Init(Period_Half, Dutyx0_Half, Synchro, Dutyx1_Half)
  PSC_Init();
     55a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PSC_Init>

}
     55e:	08 95       	ret

00000560 <__vector_12>:
  * @brief Launch the regulation loop (see main.c) .
  * @pre configuration of timer 1 registers
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_init_timer1()
{
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
  g_tick = TRUE;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 1a 01 	sts	0x011A, r24
}
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <mc_ADC_Scheduler>:

//! @brief Launch the scheduler for the ADC
//! @post Get results for Potentiometer and current values.
void mc_ADC_Scheduler(void)
{
  switch(State)
     57e:	90 91 1e 01 	lds	r25, 0x011E
     582:	91 30       	cpi	r25, 0x01	; 1
     584:	29 f1       	breq	.+74     	; 0x5d0 <mc_ADC_Scheduler+0x52>
     586:	91 30       	cpi	r25, 0x01	; 1
     588:	18 f0       	brcs	.+6      	; 0x590 <mc_ADC_Scheduler+0x12>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	d1 f5       	brne	.+116    	; 0x602 <mc_ADC_Scheduler+0x84>
     58e:	06 c0       	rjmp	.+12     	; 0x59c <mc_ADC_Scheduler+0x1e>
  {
  case CONV_INIT :
    ADC_State = FREE;
     590:	10 92 1f 01 	sts	0x011F, r1
    State = CONV_CURRENT;
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	80 93 1e 01 	sts	0x011E, r24
     59a:	08 95       	ret
    break;

  case CONV_CURRENT :              /* previous state was CONV_CURRENT */
    if(ADC_State == FREE)
     59c:	80 91 1f 01 	lds	r24, 0x011F
     5a0:	88 23       	and	r24, r24
     5a2:	79 f5       	brne	.+94     	; 0x602 <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	80 93 1f 01 	sts	0x011F, r24
      State= CONV_POT;                        /* new state is CONV_POT */
     5aa:	80 93 1e 01 	sts	0x011E, r24
      Adc_left_adjust_result();
     5ae:	80 91 7c 00 	lds	r24, 0x007C
     5b2:	80 62       	ori	r24, 0x20	; 32
     5b4:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_ISRC); /* get POT on ISRC input */
     5b8:	80 91 7c 00 	lds	r24, 0x007C
     5bc:	80 7e       	andi	r24, 0xE0	; 224
     5be:	8d 60       	ori	r24, 0x0D	; 13
     5c0:	80 93 7c 00 	sts	0x007C, r24
     5c4:	80 91 7a 00 	lds	r24, 0x007A
     5c8:	80 64       	ori	r24, 0x40	; 64
     5ca:	80 93 7a 00 	sts	0x007A, r24
     5ce:	08 95       	ret
    }
    break;

  case CONV_POT :                           /* previous state was CONV_POT */
    if(ADC_State == FREE)
     5d0:	80 91 1f 01 	lds	r24, 0x011F
     5d4:	88 23       	and	r24, r24
     5d6:	a9 f4       	brne	.+42     	; 0x602 <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     5d8:	90 93 1f 01 	sts	0x011F, r25
      State = CONV_CURRENT;                   /* new state is CONV_CURRENT */
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	80 93 1e 01 	sts	0x011E, r24
      Adc_right_adjust_result();
     5e2:	80 91 7c 00 	lds	r24, 0x007C
     5e6:	8f 7d       	andi	r24, 0xDF	; 223
     5e8:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
     5ec:	80 91 7c 00 	lds	r24, 0x007C
     5f0:	80 7e       	andi	r24, 0xE0	; 224
     5f2:	8f 60       	ori	r24, 0x0F	; 15
     5f4:	80 93 7c 00 	sts	0x007C, r24
     5f8:	80 91 7a 00 	lds	r24, 0x007A
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	80 93 7a 00 	sts	0x007A, r24
     602:	08 95       	ret

00000604 <mc_disable_during_inrush>:

//! @brief the purpose of this function is to disable \n
//!   the overcurrent detection during startup (inrush current) \n
void mc_disable_during_inrush(void)
{
  inrush_delay = (U16) 500;
     604:	84 ef       	ldi	r24, 0xF4	; 244
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	90 93 1d 01 	sts	0x011D, r25
     60c:	80 93 1c 01 	sts	0x011C, r24
  inrush_mask_flag = TRUE;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 1b 01 	sts	0x011B, r24
  Disable_over_current();
     616:	88 ef       	ldi	r24, 0xF8	; 248
     618:	80 93 b9 00 	sts	0x00B9, r24
}
     61c:	08 95       	ret

0000061e <mc_inrush_task>:

//! @brief the purpose of this function is to manage the delay \n
//!   used when the overcurrent detection is disabled \n
void mc_inrush_task(void)
{ 
  if (inrush_mask_flag == TRUE)
     61e:	80 91 1b 01 	lds	r24, 0x011B
     622:	81 30       	cpi	r24, 0x01	; 1
     624:	81 f4       	brne	.+32     	; 0x646 <mc_inrush_task+0x28>
  {
    if (inrush_delay-- == 0)
     626:	80 91 1c 01 	lds	r24, 0x011C
     62a:	90 91 1d 01 	lds	r25, 0x011D
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	90 93 1d 01 	sts	0x011D, r25
     634:	80 93 1c 01 	sts	0x011C, r24
     638:	01 96       	adiw	r24, 0x01	; 1
     63a:	29 f4       	brne	.+10     	; 0x646 <mc_inrush_task+0x28>
    {
      inrush_mask_flag = FALSE;
     63c:	10 92 1b 01 	sts	0x011B, r1
      Enable_over_current();
     640:	8e ef       	ldi	r24, 0xFE	; 254
     642:	80 93 b9 00 	sts	0x00B9, r24
     646:	08 95       	ret

00000648 <__vector_5>:
  ISR(PSC_FAULT_vect)
#else
#pragma vector = PSC_FAULT_vect
__interrupt void mc_overcurrent_detect(void)
#endif
{
     648:	1f 92       	push	r1
     64a:	0f 92       	push	r0
     64c:	0f b6       	in	r0, 0x3f	; 63
     64e:	0f 92       	push	r0
     650:	11 24       	eor	r1, r1
     652:	2f 93       	push	r18
     654:	3f 93       	push	r19
     656:	4f 93       	push	r20
     658:	5f 93       	push	r21
     65a:	6f 93       	push	r22
     65c:	7f 93       	push	r23
     65e:	8f 93       	push	r24
     660:	9f 93       	push	r25
     662:	af 93       	push	r26
     664:	bf 93       	push	r27
     666:	ef 93       	push	r30
     668:	ff 93       	push	r31
  PIFR = (1<<PEV1); // clear the interrupt
     66a:	84 e0       	ldi	r24, 0x04	; 4
     66c:	80 93 bc 00 	sts	0x00BC, r24
  overcurrent = TRUE;
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	80 93 18 01 	sts	0x0118, r24
  mci_stop();
     676:	0e 94 a3 04 	call	0x946	; 0x946 <mci_stop>
}
     67a:	ff 91       	pop	r31
     67c:	ef 91       	pop	r30
     67e:	bf 91       	pop	r27
     680:	af 91       	pop	r26
     682:	9f 91       	pop	r25
     684:	8f 91       	pop	r24
     686:	7f 91       	pop	r23
     688:	6f 91       	pop	r22
     68a:	5f 91       	pop	r21
     68c:	4f 91       	pop	r20
     68e:	3f 91       	pop	r19
     690:	2f 91       	pop	r18
     692:	0f 90       	pop	r0
     694:	0f be       	out	0x3f, r0	; 63
     696:	0f 90       	pop	r0
     698:	1f 90       	pop	r1
     69a:	18 95       	reti

0000069c <__vector_27>:
  ISR(ADC_vect)
#else
#pragma vector = ADC_vect
__interrupt void ADC_end_of_conversion(void)
#endif
{
     69c:	1f 92       	push	r1
     69e:	0f 92       	push	r0
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	0f 92       	push	r0
     6a4:	11 24       	eor	r1, r1
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
     6be:	80 91 7c 00 	lds	r24, 0x007C
     6c2:	80 7e       	andi	r24, 0xE0	; 224
     6c4:	82 61       	ori	r24, 0x12	; 18
     6c6:	80 93 7c 00 	sts	0x007C, r24
  if(State == CONV_POT) mc_set_potentiometer_value(Adc_get_8_bits_result());
     6ca:	80 91 1e 01 	lds	r24, 0x011E
     6ce:	81 30       	cpi	r24, 0x01	; 1
     6d0:	21 f4       	brne	.+8      	; 0x6da <__vector_27+0x3e>
     6d2:	80 91 79 00 	lds	r24, 0x0079
     6d6:	0e 94 08 05 	call	0xa10	; 0xa10 <mc_set_potentiometer_value>
  if(State == CONV_CURRENT) mci_store_measured_current(Adc_get_10_bits_result());
     6da:	80 91 1e 01 	lds	r24, 0x011E
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	51 f4       	brne	.+20     	; 0x6f6 <__vector_27+0x5a>
     6e2:	30 91 78 00 	lds	r19, 0x0078
     6e6:	20 91 79 00 	lds	r18, 0x0079
     6ea:	92 2f       	mov	r25, r18
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	83 0f       	add	r24, r19
     6f0:	91 1d       	adc	r25, r1
     6f2:	0e 94 cd 04 	call	0x99a	; 0x99a <mci_store_measured_current>
  ADC_State = FREE;
     6f6:	10 92 1f 01 	sts	0x011F, r1
}
     6fa:	ff 91       	pop	r31
     6fc:	ef 91       	pop	r30
     6fe:	bf 91       	pop	r27
     700:	af 91       	pop	r26
     702:	9f 91       	pop	r25
     704:	8f 91       	pop	r24
     706:	7f 91       	pop	r23
     708:	6f 91       	pop	r22
     70a:	5f 91       	pop	r21
     70c:	4f 91       	pop	r20
     70e:	3f 91       	pop	r19
     710:	2f 91       	pop	r18
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0
     718:	1f 90       	pop	r1
     71a:	18 95       	reti

0000071c <mc_estimation_speed>:
void mc_estimation_speed(void) //JTS2do: This should be inlined because it's called inside ISR
{
  U16 timer_value;
  U32 new_measured_speed;

  if (g_mc_read_enable==TRUE)
     71c:	80 91 19 01 	lds	r24, 0x0119
     720:	81 30       	cpi	r24, 0x01	; 1
     722:	41 f5       	brne	.+80     	; 0x774 <mc_estimation_speed+0x58>
  {
    // Two 8 bits variables are use to simulate a 16 bits timers
    timer_value = (ovf_timer<<8) + TCNT0;
     724:	26 b5       	in	r18, 0x26	; 38
     726:	90 91 20 01 	lds	r25, 0x0120
     72a:	80 e0       	ldi	r24, 0x00	; 0
     72c:	ac 01       	movw	r20, r24
     72e:	42 0f       	add	r20, r18
     730:	51 1d       	adc	r21, r1
     732:	9a 01       	movw	r18, r20

    if (timer_value == 0) {timer_value += 1 ;} // prevent DIV by 0 in next line
     734:	41 15       	cp	r20, r1
     736:	51 05       	cpc	r21, r1
     738:	11 f4       	brne	.+4      	; 0x73e <mc_estimation_speed+0x22>
     73a:	21 e0       	ldi	r18, 0x01	; 1
     73c:	30 e0       	ldi	r19, 0x00	; 0
    new_measured_speed = K_SPEED / timer_value;
     73e:	40 e0       	ldi	r20, 0x00	; 0
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	65 e8       	ldi	r22, 0x85	; 133
     744:	7f ec       	ldi	r23, 0xCF	; 207
     746:	80 e0       	ldi	r24, 0x00	; 0
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <__divmodsi4>
        average = 0;
      }
      else count++;
    #else
      // else get the real speed
      mc_set_measured_speed(new_measured_speed);
     74e:	c9 01       	movw	r24, r18
     750:	da 01       	movw	r26, r20
     752:	8f 3f       	cpi	r24, 0xFF	; 255
     754:	91 05       	cpc	r25, r1
     756:	a1 05       	cpc	r26, r1
     758:	b1 05       	cpc	r27, r1
     75a:	29 f0       	breq	.+10     	; 0x766 <mc_estimation_speed+0x4a>
     75c:	20 f0       	brcs	.+8      	; 0x766 <mc_estimation_speed+0x4a>
     75e:	8f ef       	ldi	r24, 0xFF	; 255
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	a0 e0       	ldi	r26, 0x00	; 0
     764:	b0 e0       	ldi	r27, 0x00	; 0
     766:	0e 94 b6 04 	call	0x96c	; 0x96c <mc_set_measured_speed>
    #endif

    // Reset Timer 0 register and variables
    TCNT0=0x00;
     76a:	16 bc       	out	0x26, r1	; 38
    ovf_timer = 0;
     76c:	10 92 20 01 	sts	0x0120, r1
    g_mc_read_enable=FALSE;
     770:	10 92 19 01 	sts	0x0119, r1
     774:	08 95       	ret

00000776 <__vector_17>:
  * @brief Timer0 Overflow for speed measurement
  * @pre configuration of timer 0
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
     776:	1f 92       	push	r1
     778:	0f 92       	push	r0
     77a:	0f b6       	in	r0, 0x3f	; 63
     77c:	0f 92       	push	r0
     77e:	11 24       	eor	r1, r1
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
  TCNT0=0x00;
     798:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
     79a:	80 91 20 01 	lds	r24, 0x0120
     79e:	8f 5f       	subi	r24, 0xFF	; 255
     7a0:	80 93 20 01 	sts	0x0120, r24
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
     7a4:	84 36       	cpi	r24, 0x64	; 100
     7a6:	58 f0       	brcs	.+22     	; 0x7be <__vector_17+0x48>
  {
    ovf_timer = 0;
     7a8:	10 92 20 01 	sts	0x0120, r1
    mc_set_measured_speed(0);
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 b6 04 	call	0x96c	; 0x96c <mc_set_measured_speed>
    //if the motor was turning and no stop order
    // was given, motor run automatically.
    if(mci_motor_is_running())mci_retry_run();
     7b2:	0e 94 a0 04 	call	0x940	; 0x940 <mci_motor_is_running>
     7b6:	88 23       	and	r24, r24
     7b8:	11 f0       	breq	.+4      	; 0x7be <__vector_17+0x48>
     7ba:	0e 94 17 05 	call	0xa2e	; 0xa2e <mci_retry_run>
  }
}
     7be:	ff 91       	pop	r31
     7c0:	ef 91       	pop	r30
     7c2:	bf 91       	pop	r27
     7c4:	af 91       	pop	r26
     7c6:	9f 91       	pop	r25
     7c8:	8f 91       	pop	r24
     7ca:	7f 91       	pop	r23
     7cc:	6f 91       	pop	r22
     7ce:	5f 91       	pop	r21
     7d0:	4f 91       	pop	r20
     7d2:	3f 91       	pop	r19
     7d4:	2f 91       	pop	r18
     7d6:	0f 90       	pop	r0
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	0f 90       	pop	r0
     7dc:	1f 90       	pop	r1
     7de:	18 95       	reti

000007e0 <mc_switch_commutation>:
*   according to sensor or estimation position
*
* @param position (1 to 6) and direction (FORWARD or BACKWARD)
*/
void mc_switch_commutation(Hall_Position position)
{
     7e0:	0f 93       	push	r16
     7e2:	1f 93       	push	r17
     7e4:	18 2f       	mov	r17, r24
  // get the motor direction to commute the right switches.
  char direction = mci_get_motor_direction();
     7e6:	0e 94 b3 04 	call	0x966	; 0x966 <mci_get_motor_direction>
     7ea:	08 2f       	mov	r16, r24

  // Switches are commuted only if the user start the motor
  if (mci_motor_is_running())
     7ec:	0e 94 a0 04 	call	0x940	; 0x940 <mci_motor_is_running>
     7f0:	88 23       	and	r24, r24
     7f2:	89 f1       	breq	.+98     	; 0x856 <mc_switch_commutation+0x76>
  {
    mc_duty_cycle(mc_get_duty_cycle());
     7f4:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     7f8:	0e 94 29 02 	call	0x452	; 0x452 <mc_duty_cycle>
    switch(position)
     7fc:	13 30       	cpi	r17, 0x03	; 3
     7fe:	19 f1       	breq	.+70     	; 0x846 <mc_switch_commutation+0x66>
     800:	14 30       	cpi	r17, 0x04	; 4
     802:	28 f4       	brcc	.+10     	; 0x80e <mc_switch_commutation+0x2e>
     804:	11 30       	cpi	r17, 0x01	; 1
     806:	51 f0       	breq	.+20     	; 0x81c <mc_switch_commutation+0x3c>
     808:	12 30       	cpi	r17, 0x02	; 2
     80a:	69 f5       	brne	.+90     	; 0x866 <mc_switch_commutation+0x86>
     80c:	16 c0       	rjmp	.+44     	; 0x83a <mc_switch_commutation+0x5a>
     80e:	15 30       	cpi	r17, 0x05	; 5
     810:	41 f0       	breq	.+16     	; 0x822 <mc_switch_commutation+0x42>
     812:	15 30       	cpi	r17, 0x05	; 5
     814:	48 f0       	brcs	.+18     	; 0x828 <mc_switch_commutation+0x48>
     816:	16 30       	cpi	r17, 0x06	; 6
     818:	31 f5       	brne	.+76     	; 0x866 <mc_switch_commutation+0x86>
     81a:	09 c0       	rjmp	.+18     	; 0x82e <mc_switch_commutation+0x4e>
    {
    // cases according to rotor position
      case HS_001:  if (direction==CCW)  {Set_Q5Q2();}
     81c:	01 30       	cpi	r16, 0x01	; 1
     81e:	49 f4       	brne	.+18     	; 0x832 <mc_switch_commutation+0x52>
     820:	0a c0       	rjmp	.+20     	; 0x836 <mc_switch_commutation+0x56>
                    else                      {Set_Q1Q6();}
                    break;

      case HS_101:  if (direction==CCW)  {Set_Q3Q2();}
     822:	01 30       	cpi	r16, 0x01	; 1
     824:	61 f4       	brne	.+24     	; 0x83e <mc_switch_commutation+0x5e>
     826:	0d c0       	rjmp	.+26     	; 0x842 <mc_switch_commutation+0x62>
                    else                      {Set_Q1Q4();}
                    break;

      case HS_100:  if (direction==CCW)  {Set_Q3Q6();}
     828:	01 30       	cpi	r16, 0x01	; 1
     82a:	79 f4       	brne	.+30     	; 0x84a <mc_switch_commutation+0x6a>
     82c:	10 c0       	rjmp	.+32     	; 0x84e <mc_switch_commutation+0x6e>
                    else                      {Set_Q5Q4();}
                    break;

      case HS_110:  if (direction==CCW)  {Set_Q1Q6();}
     82e:	01 30       	cpi	r16, 0x01	; 1
     830:	11 f4       	brne	.+4      	; 0x836 <mc_switch_commutation+0x56>
     832:	81 e2       	ldi	r24, 0x21	; 33
     834:	0d c0       	rjmp	.+26     	; 0x850 <mc_switch_commutation+0x70>
                    else                      {Set_Q5Q2();}
     836:	82 e1       	ldi	r24, 0x12	; 18
     838:	0b c0       	rjmp	.+22     	; 0x850 <mc_switch_commutation+0x70>
                    break;

      case HS_010:  if (direction==CCW)  {Set_Q1Q4();}
     83a:	01 30       	cpi	r16, 0x01	; 1
     83c:	11 f4       	brne	.+4      	; 0x842 <mc_switch_commutation+0x62>
     83e:	89 e0       	ldi	r24, 0x09	; 9
     840:	07 c0       	rjmp	.+14     	; 0x850 <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q2();}
     842:	86 e0       	ldi	r24, 0x06	; 6
     844:	05 c0       	rjmp	.+10     	; 0x850 <mc_switch_commutation+0x70>
                    break;

      case HS_011:  if (direction==CCW)  {Set_Q5Q4();}
     846:	01 30       	cpi	r16, 0x01	; 1
     848:	11 f4       	brne	.+4      	; 0x84e <mc_switch_commutation+0x6e>
     84a:	88 e1       	ldi	r24, 0x18	; 24
     84c:	01 c0       	rjmp	.+2      	; 0x850 <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q6();}
     84e:	84 e2       	ldi	r24, 0x24	; 36
     850:	80 93 b6 00 	sts	0x00B6, r24
     854:	08 c0       	rjmp	.+16     	; 0x866 <mc_switch_commutation+0x86>
      default : break;
      }
  }
  else
  {
    Set_none(); // all switches are switched OFF
     856:	10 92 b6 00 	sts	0x00B6, r1
     85a:	2f 98       	cbi	0x05, 7	; 5
     85c:	2e 98       	cbi	0x05, 6	; 5
     85e:	29 98       	cbi	0x05, 1	; 5
     860:	58 98       	cbi	0x0b, 0	; 11
     862:	40 98       	cbi	0x08, 0	; 8
     864:	28 98       	cbi	0x05, 0	; 5
  }
}
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <__vector_23>:
{
  mc_switch_commutation( HALL_SENSOR_VALUE() );
}

ISR( HALL_B() )
{
     86c:	1f 92       	push	r1
     86e:	0f 92       	push	r0
     870:	0f b6       	in	r0, 0x3f	; 63
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
  mc_switch_commutation( HALL_SENSOR_VALUE() ); 
     88e:	29 b1       	in	r18, 0x09	; 9
     890:	96 b1       	in	r25, 0x06	; 6
     892:	89 b1       	in	r24, 0x09	; 9
     894:	84 70       	andi	r24, 0x04	; 4
     896:	92 70       	andi	r25, 0x02	; 2
     898:	89 2b       	or	r24, r25
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	22 70       	andi	r18, 0x02	; 2
     89e:	30 70       	andi	r19, 0x00	; 0
     8a0:	35 95       	asr	r19
     8a2:	27 95       	ror	r18
     8a4:	82 2b       	or	r24, r18
     8a6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mc_switch_commutation>
  if (PINC&(1<<PINC1)) //"is Hall_B logic high?"
     8aa:	31 9b       	sbis	0x06, 1	; 6
     8ac:	05 c0       	rjmp	.+10     	; 0x8b8 <__vector_23+0x4c>
  {
	mc_estimation_speed(); //estimate speed on Hall_B rising edge
     8ae:	0e 94 8e 03 	call	0x71c	; 0x71c <mc_estimation_speed>
	g_mc_read_enable=FALSE; // Wait 1 period
     8b2:	10 92 19 01 	sts	0x0119, r1
     8b6:	03 c0       	rjmp	.+6      	; 0x8be <__vector_23+0x52>
	} else {
	g_mc_read_enable=TRUE;
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 19 01 	sts	0x0119, r24
  } 
}
     8be:	ff 91       	pop	r31
     8c0:	ef 91       	pop	r30
     8c2:	bf 91       	pop	r27
     8c4:	af 91       	pop	r26
     8c6:	9f 91       	pop	r25
     8c8:	8f 91       	pop	r24
     8ca:	7f 91       	pop	r23
     8cc:	6f 91       	pop	r22
     8ce:	5f 91       	pop	r21
     8d0:	4f 91       	pop	r20
     8d2:	3f 91       	pop	r19
     8d4:	2f 91       	pop	r18
     8d6:	0f 90       	pop	r0
     8d8:	0f be       	out	0x3f, r0	; 63
     8da:	0f 90       	pop	r0
     8dc:	1f 90       	pop	r1
     8de:	18 95       	reti

000008e0 <__vector_24>:
  return HALL_SENSOR_VALUE();
}

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC() )  //Hall_A & Hall_C share the same interrupt vector byte
{
     8e0:	1f 92       	push	r1
     8e2:	0f 92       	push	r0
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	0f 92       	push	r0
     8e8:	11 24       	eor	r1, r1
     8ea:	2f 93       	push	r18
     8ec:	3f 93       	push	r19
     8ee:	4f 93       	push	r20
     8f0:	5f 93       	push	r21
     8f2:	6f 93       	push	r22
     8f4:	7f 93       	push	r23
     8f6:	8f 93       	push	r24
     8f8:	9f 93       	push	r25
     8fa:	af 93       	push	r26
     8fc:	bf 93       	push	r27
     8fe:	ef 93       	push	r30
     900:	ff 93       	push	r31
  mc_switch_commutation( HALL_SENSOR_VALUE() );
     902:	29 b1       	in	r18, 0x09	; 9
     904:	96 b1       	in	r25, 0x06	; 6
     906:	89 b1       	in	r24, 0x09	; 9
     908:	84 70       	andi	r24, 0x04	; 4
     90a:	92 70       	andi	r25, 0x02	; 2
     90c:	89 2b       	or	r24, r25
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	22 70       	andi	r18, 0x02	; 2
     912:	30 70       	andi	r19, 0x00	; 0
     914:	35 95       	asr	r19
     916:	27 95       	ror	r18
     918:	82 2b       	or	r24, r18
     91a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mc_switch_commutation>
}
     91e:	ff 91       	pop	r31
     920:	ef 91       	pop	r30
     922:	bf 91       	pop	r27
     924:	af 91       	pop	r26
     926:	9f 91       	pop	r25
     928:	8f 91       	pop	r24
     92a:	7f 91       	pop	r23
     92c:	6f 91       	pop	r22
     92e:	5f 91       	pop	r21
     930:	4f 91       	pop	r20
     932:	3f 91       	pop	r19
     934:	2f 91       	pop	r18
     936:	0f 90       	pop	r0
     938:	0f be       	out	0x3f, r0	; 63
     93a:	0f 90       	pop	r0
     93c:	1f 90       	pop	r1
     93e:	18 95       	reti

00000940 <mci_motor_is_running>:
* @post We know if the motor is running or not
*/
Bool mci_motor_is_running(void)
{
  return mci_run_stop;
}
     940:	80 91 22 01 	lds	r24, 0x0122
     944:	08 95       	ret

00000946 <mci_stop>:
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     946:	10 92 22 01 	sts	0x0122, r1
}
     94a:	08 95       	ret

0000094c <mci_set_ref_speed>:
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     94c:	80 93 23 01 	sts	0x0123, r24
}
     950:	08 95       	ret

00000952 <mci_get_ref_speed>:
* @post get speed value
*/
U8 mci_get_ref_speed(void)
{
  return mci_ref_speed;
}
     952:	80 91 23 01 	lds	r24, 0x0123
     956:	08 95       	ret

00000958 <mci_forward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     958:	10 92 21 01 	sts	0x0121, r1
}
     95c:	08 95       	ret

0000095e <mci_backward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_backward(void)
{
  mci_direction = CCW;
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	80 93 21 01 	sts	0x0121, r24
}
     964:	08 95       	ret

00000966 <mci_get_motor_direction>:
* @post get direction value
*/
U8 mci_get_motor_direction(void)
{
  return mci_direction;
}
     966:	80 91 21 01 	lds	r24, 0x0121
     96a:	08 95       	ret

0000096c <mc_set_measured_speed>:
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     96c:	80 93 24 01 	sts	0x0124, r24
}
     970:	08 95       	ret

00000972 <mci_get_measured_speed>:
 * @post none
*/
U8 mci_get_measured_speed(void)
{
  return mci_measured_speed;
}
     972:	80 91 24 01 	lds	r24, 0x0124
     976:	08 95       	ret

00000978 <mci_get_measured_current>:
* @brief Get the current measured in the motor
* @pre Launch ADC scheduler
* @post Get ADC Channel 12 result (Current value on 8bits).
*/
U16 mci_get_measured_current(void)
{
     978:	20 91 25 01 	lds	r18, 0x0125
     97c:	30 91 26 01 	lds	r19, 0x0126
     980:	40 91 27 01 	lds	r20, 0x0127
     984:	50 91 28 01 	lds	r21, 0x0128
     988:	86 e0       	ldi	r24, 0x06	; 6
     98a:	56 95       	lsr	r21
     98c:	47 95       	ror	r20
     98e:	37 95       	ror	r19
     990:	27 95       	ror	r18
     992:	8a 95       	dec	r24
     994:	d1 f7       	brne	.-12     	; 0x98a <mci_get_measured_current+0x12>
  return mci_measured_current/64;
}
     996:	c9 01       	movw	r24, r18
     998:	08 95       	ret

0000099a <mci_store_measured_current>:
* @brief Set the variable 'mc_measured_current' for initialization.
* @pre none
* @post 'mc_measured_current' set with the current value
*/
void mci_store_measured_current(U16 current)
{
     99a:	ef 92       	push	r14
     99c:	ff 92       	push	r15
     99e:	0f 93       	push	r16
     9a0:	1f 93       	push	r17
  mci_measured_current = ((63*mci_measured_current)+(64*current))>>6;
     9a2:	76 e0       	ldi	r23, 0x06	; 6
     9a4:	88 0f       	add	r24, r24
     9a6:	99 1f       	adc	r25, r25
     9a8:	7a 95       	dec	r23
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <mci_store_measured_current+0xa>
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e0 90 25 01 	lds	r14, 0x0125
     9b4:	f0 90 26 01 	lds	r15, 0x0126
     9b8:	00 91 27 01 	lds	r16, 0x0127
     9bc:	10 91 28 01 	lds	r17, 0x0128
     9c0:	a8 01       	movw	r20, r16
     9c2:	97 01       	movw	r18, r14
     9c4:	66 e0       	ldi	r22, 0x06	; 6
     9c6:	22 0f       	add	r18, r18
     9c8:	33 1f       	adc	r19, r19
     9ca:	44 1f       	adc	r20, r20
     9cc:	55 1f       	adc	r21, r21
     9ce:	6a 95       	dec	r22
     9d0:	d1 f7       	brne	.-12     	; 0x9c6 <mci_store_measured_current+0x2c>
     9d2:	2e 19       	sub	r18, r14
     9d4:	3f 09       	sbc	r19, r15
     9d6:	40 0b       	sbc	r20, r16
     9d8:	51 0b       	sbc	r21, r17
     9da:	82 0f       	add	r24, r18
     9dc:	93 1f       	adc	r25, r19
     9de:	a4 1f       	adc	r26, r20
     9e0:	b5 1f       	adc	r27, r21
     9e2:	26 e0       	ldi	r18, 0x06	; 6
     9e4:	b6 95       	lsr	r27
     9e6:	a7 95       	ror	r26
     9e8:	97 95       	ror	r25
     9ea:	87 95       	ror	r24
     9ec:	2a 95       	dec	r18
     9ee:	d1 f7       	brne	.-12     	; 0x9e4 <mci_store_measured_current+0x4a>
     9f0:	80 93 25 01 	sts	0x0125, r24
     9f4:	90 93 26 01 	sts	0x0126, r25
     9f8:	a0 93 27 01 	sts	0x0127, r26
     9fc:	b0 93 28 01 	sts	0x0128, r27
}
     a00:	1f 91       	pop	r17
     a02:	0f 91       	pop	r16
     a04:	ff 90       	pop	r15
     a06:	ef 90       	pop	r14
     a08:	08 95       	ret

00000a0a <mc_get_potentiometer_value>:
* @post Get ADC Channel 6 result (Potentiometer value on 8bits).
*/
U8 mc_get_potentiometer_value(void)
{
  return mc_potentiometer_value;
}
     a0a:	80 91 29 01 	lds	r24, 0x0129
     a0e:	08 95       	ret

00000a10 <mc_set_potentiometer_value>:
* @pre Launch ADC scheduler
* @post 'mc_potentiometer_value' set with the potentiometer value
*/
void mc_set_potentiometer_value(U8 potentiometer)
{
  mc_potentiometer_value = potentiometer;
     a10:	80 93 29 01 	sts	0x0129, r24
}
     a14:	08 95       	ret

00000a16 <mc_init>:
* @post configuration of hardware and sotware
* @pre none
*/
void mc_init()
{
  mc_init_HW();
     a16:	0e 94 65 02 	call	0x4ca	; 0x4ca <mc_init_HW>
  Enable_interrupt();
     a1a:	78 94       	sei
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     a1c:	10 92 22 01 	sts	0x0122, r1
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     a20:	10 92 21 01 	sts	0x0121, r1
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     a24:	10 92 23 01 	sts	0x0123, r1
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     a28:	10 92 24 01 	sts	0x0124, r1

  mci_stop();
  mci_forward();
  mci_set_ref_speed(0);
  mc_set_measured_speed(0);
}
     a2c:	08 95       	ret

00000a2e <mci_retry_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_retry_run(void)
{
  mci_run_stop = TRUE;
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     a34:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     a38:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     a3c:	0e 94 29 02 	call	0x452	; 0x452 <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     a40:	0e 94 1c 02 	call	0x438	; 0x438 <mc_get_hall>
     a44:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     a48:	0e 94 02 03 	call	0x604	; 0x604 <mc_disable_during_inrush>
}
     a4c:	08 95       	ret

00000a4e <mci_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_run(void)
{
  if (!(PCTL & (1<<PRUN))) /* if there is an overcurrent */
     a4e:	80 91 b7 00 	lds	r24, 0x00B7
     a52:	80 fd       	sbrc	r24, 0
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <mci_run+0xc>
  {
    PSC_Init();
     a56:	0e 94 dd 01 	call	0x3ba	; 0x3ba <PSC_Init>
  }
  overcurrent = FALSE;
     a5a:	10 92 18 01 	sts	0x0118, r1
  mci_run_stop = TRUE;
     a5e:	81 e0       	ldi	r24, 0x01	; 1
     a60:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     a64:	0e 94 c2 01 	call	0x384	; 0x384 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     a68:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <mc_get_duty_cycle>
     a6c:	0e 94 29 02 	call	0x452	; 0x452 <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     a70:	0e 94 1c 02 	call	0x438	; 0x438 <mc_get_hall>
     a74:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     a78:	0e 94 02 03 	call	0x604	; 0x604 <mc_disable_during_inrush>
}
     a7c:	08 95       	ret

00000a7e <print_hex16>:
//!
//! @param
//!
//! @return none
void print_hex16(U16 value)
{
     a7e:	ef 92       	push	r14
     a80:	ff 92       	push	r15
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	ec 01       	movw	r28, r24
   U8 d4;
   U8 d3;
   U8 d2;
   U8 d1;

   d4 = (U16)(value >> 12) & 0x0F;
     a8c:	7c 01       	movw	r14, r24
     a8e:	2f 2d       	mov	r18, r15
     a90:	22 95       	swap	r18
     a92:	2f 70       	andi	r18, 0x0F	; 15
   d3 = (U16)(value >> 8) & 0x0F;
     a94:	1f 2d       	mov	r17, r15
     a96:	1f 70       	andi	r17, 0x0F	; 15
   d2 = (U16)(value >> 4) & 0x0F;
     a98:	34 e0       	ldi	r19, 0x04	; 4
     a9a:	96 95       	lsr	r25
     a9c:	87 95       	ror	r24
     a9e:	3a 95       	dec	r19
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <print_hex16+0x1c>
     aa2:	08 2f       	mov	r16, r24
     aa4:	0f 70       	andi	r16, 0x0F	; 15
   d1 = (U16)(value) & 0x0F;

   if (d4 != 0)
     aa6:	22 23       	and	r18, r18
     aa8:	39 f0       	breq	.+14     	; 0xab8 <print_hex16+0x3a>
   {
      c = bin_to_ascii(d4);
     aaa:	82 2f       	mov	r24, r18
     aac:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
      uart_putchar(c);
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <print_hex16+0x3e>
      c = bin_to_ascii(d2);
      uart_putchar(c);
   }
   else
   {
      if (d3 != 0)
     ab8:	11 23       	and	r17, r17
     aba:	39 f0       	breq	.+14     	; 0xaca <print_hex16+0x4c>
      {
         c = bin_to_ascii(d3);
     abc:	81 2f       	mov	r24, r17
     abe:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
         uart_putchar(c);
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
     ac8:	02 c0       	rjmp	.+4      	; 0xace <print_hex16+0x50>
         c = bin_to_ascii(d2);
         uart_putchar(c);
      }
      else
      {
         if (d2 != 0)
     aca:	00 23       	and	r16, r16
     acc:	31 f0       	breq	.+12     	; 0xada <print_hex16+0x5c>
         {
            c = bin_to_ascii(d2);
     ace:	80 2f       	mov	r24, r16
     ad0:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
            uart_putchar(c);
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
         }
      }
   }

   c = bin_to_ascii(d1);
     ada:	9e 01       	movw	r18, r28
     adc:	2f 70       	andi	r18, 0x0F	; 15
     ade:	82 2f       	mov	r24, r18
     ae0:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
   uart_putchar(c);
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
}
     aea:	df 91       	pop	r29
     aec:	cf 91       	pop	r28
     aee:	1f 91       	pop	r17
     af0:	0f 91       	pop	r16
     af2:	ff 90       	pop	r15
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret

00000af8 <print_msg>:
#ifdef __GNUC__
void print_msg(U8 const *str)
#else
void print_msg(U8 code *str)
#endif
{
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
   {
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
     afc:	fc 01       	movw	r30, r24
     afe:	ec 01       	movw	r28, r24
     b00:	84 91       	lpm	r24, Z+
     b02:	05 c0       	rjmp	.+10     	; 0xb0e <print_msg+0x16>
   while(c!=0)
   {
      uart_putchar(c);
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
      c=pgm_read_byte_near((unsigned int)str++);
     b0a:	fe 01       	movw	r30, r28
     b0c:	84 91       	lpm	r24, Z+
     b0e:	21 96       	adiw	r28, 0x01	; 1
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
   while(c!=0)
     b10:	88 23       	and	r24, r24
     b12:	c1 f7       	brne	.-16     	; 0xb04 <print_msg+0xc>
      uart_putchar(c);
      c=pgm_read_byte_near((unsigned int)str++);
   }
#endif

}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret

00000b1a <parse_cmd>:
{
   U8 i=0;
   U8 j;

   //Get command type
   for(i=0;cmd_str[i]!=' ' && i<=i_str;i++);
     b1a:	90 91 2b 01 	lds	r25, 0x012B
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	01 c0       	rjmp	.+2      	; 0xb24 <parse_cmd+0xa>
     b22:	4f 5f       	subi	r20, 0xFF	; 255
     b24:	e4 2f       	mov	r30, r20
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	e0 5b       	subi	r30, 0xB0	; 176
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	80 32       	cpi	r24, 0x20	; 32
     b30:	11 f0       	breq	.+4      	; 0xb36 <parse_cmd+0x1c>
     b32:	94 17       	cp	r25, r20
     b34:	b0 f7       	brcc	.-20     	; 0xb22 <parse_cmd+0x8>
   cmd=TRUE;
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 2c 01 	sts	0x012C, r24

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
     b3c:	94 2f       	mov	r25, r20
     b3e:	91 50       	subi	r25, 0x01	; 1
     b40:	a0 e5       	ldi	r26, 0x50	; 80
     b42:	b1 e0       	ldi	r27, 0x01	; 1
     b44:	20 e0       	ldi	r18, 0x00	; 0
     b46:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     b48:	f9 01       	movw	r30, r18
     b4a:	e4 58       	subi	r30, 0x84	; 132
     b4c:	ff 4f       	sbci	r31, 0xFF	; 255
     b4e:	e4 91       	lpm	r30, Z+
     b50:	8c 91       	ld	r24, X
     b52:	8e 17       	cp	r24, r30
     b54:	39 f4       	brne	.+14     	; 0xb64 <parse_cmd+0x4a>
     b56:	2f 5f       	subi	r18, 0xFF	; 255
     b58:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     b5a:	92 17       	cp	r25, r18
     b5c:	08 f4       	brcc	.+2      	; 0xb60 <parse_cmd+0x46>
     b5e:	e6 c0       	rjmp	.+460    	; 0xd2c <parse_cmd+0x212>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     b60:	11 96       	adiw	r26, 0x01	; 1
     b62:	f2 cf       	rjmp	.-28     	; 0xb48 <parse_cmd+0x2e>
     b64:	a0 e5       	ldi	r26, 0x50	; 80
     b66:	b1 e0       	ldi	r27, 0x01	; 1
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     b6c:	f9 01       	movw	r30, r18
     b6e:	e1 58       	subi	r30, 0x81	; 129
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	e4 91       	lpm	r30, Z+
     b74:	8c 91       	ld	r24, X
     b76:	8e 17       	cp	r24, r30
     b78:	39 f4       	brne	.+14     	; 0xb88 <parse_cmd+0x6e>
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     b7e:	92 17       	cp	r25, r18
     b80:	08 f4       	brcc	.+2      	; 0xb84 <parse_cmd+0x6a>
     b82:	d6 c0       	rjmp	.+428    	; 0xd30 <parse_cmd+0x216>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	f2 cf       	rjmp	.-28     	; 0xb6c <parse_cmd+0x52>
     b88:	a0 e5       	ldi	r26, 0x50	; 80
     b8a:	b1 e0       	ldi	r27, 0x01	; 1
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     b90:	f9 01       	movw	r30, r18
     b92:	ee 57       	subi	r30, 0x7E	; 126
     b94:	ff 4f       	sbci	r31, 0xFF	; 255
     b96:	e4 91       	lpm	r30, Z+
     b98:	8c 91       	ld	r24, X
     b9a:	8e 17       	cp	r24, r30
     b9c:	39 f4       	brne	.+14     	; 0xbac <parse_cmd+0x92>
     b9e:	2f 5f       	subi	r18, 0xFF	; 255
     ba0:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     ba2:	92 17       	cp	r25, r18
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <parse_cmd+0x8e>
     ba6:	c6 c0       	rjmp	.+396    	; 0xd34 <parse_cmd+0x21a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     ba8:	11 96       	adiw	r26, 0x01	; 1
     baa:	f2 cf       	rjmp	.-28     	; 0xb90 <parse_cmd+0x76>
     bac:	a0 e5       	ldi	r26, 0x50	; 80
     bae:	b1 e0       	ldi	r27, 0x01	; 1
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     bb4:	f9 01       	movw	r30, r18
     bb6:	e9 57       	subi	r30, 0x79	; 121
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	e4 91       	lpm	r30, Z+
     bbc:	8c 91       	ld	r24, X
     bbe:	8e 17       	cp	r24, r30
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <parse_cmd+0xb6>
     bc2:	2f 5f       	subi	r18, 0xFF	; 255
     bc4:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     bc6:	92 17       	cp	r25, r18
     bc8:	08 f4       	brcc	.+2      	; 0xbcc <parse_cmd+0xb2>
     bca:	b6 c0       	rjmp	.+364    	; 0xd38 <parse_cmd+0x21e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     bcc:	11 96       	adiw	r26, 0x01	; 1
     bce:	f2 cf       	rjmp	.-28     	; 0xbb4 <parse_cmd+0x9a>
     bd0:	a0 e5       	ldi	r26, 0x50	; 80
     bd2:	b1 e0       	ldi	r27, 0x01	; 1
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     bd8:	f9 01       	movw	r30, r18
     bda:	e6 57       	subi	r30, 0x76	; 118
     bdc:	ff 4f       	sbci	r31, 0xFF	; 255
     bde:	e4 91       	lpm	r30, Z+
     be0:	8c 91       	ld	r24, X
     be2:	8e 17       	cp	r24, r30
     be4:	39 f4       	brne	.+14     	; 0xbf4 <parse_cmd+0xda>
     be6:	2f 5f       	subi	r18, 0xFF	; 255
     be8:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     bea:	92 17       	cp	r25, r18
     bec:	08 f4       	brcc	.+2      	; 0xbf0 <parse_cmd+0xd6>
     bee:	a6 c0       	rjmp	.+332    	; 0xd3c <parse_cmd+0x222>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     bf0:	11 96       	adiw	r26, 0x01	; 1
     bf2:	f2 cf       	rjmp	.-28     	; 0xbd8 <parse_cmd+0xbe>
     bf4:	a0 e5       	ldi	r26, 0x50	; 80
     bf6:	b1 e0       	ldi	r27, 0x01	; 1
     bf8:	20 e0       	ldi	r18, 0x00	; 0
     bfa:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     bfc:	f9 01       	movw	r30, r18
     bfe:	e3 57       	subi	r30, 0x73	; 115
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	e4 91       	lpm	r30, Z+
     c04:	8c 91       	ld	r24, X
     c06:	8e 17       	cp	r24, r30
     c08:	39 f4       	brne	.+14     	; 0xc18 <parse_cmd+0xfe>
     c0a:	2f 5f       	subi	r18, 0xFF	; 255
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c0e:	92 17       	cp	r25, r18
     c10:	08 f4       	brcc	.+2      	; 0xc14 <parse_cmd+0xfa>
     c12:	96 c0       	rjmp	.+300    	; 0xd40 <parse_cmd+0x226>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c14:	11 96       	adiw	r26, 0x01	; 1
     c16:	f2 cf       	rjmp	.-28     	; 0xbfc <parse_cmd+0xe2>
     c18:	a0 e5       	ldi	r26, 0x50	; 80
     c1a:	b1 e0       	ldi	r27, 0x01	; 1
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c20:	f9 01       	movw	r30, r18
     c22:	e0 57       	subi	r30, 0x70	; 112
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	e4 91       	lpm	r30, Z+
     c28:	8c 91       	ld	r24, X
     c2a:	8e 17       	cp	r24, r30
     c2c:	39 f4       	brne	.+14     	; 0xc3c <parse_cmd+0x122>
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c32:	92 17       	cp	r25, r18
     c34:	08 f4       	brcc	.+2      	; 0xc38 <parse_cmd+0x11e>
     c36:	86 c0       	rjmp	.+268    	; 0xd44 <parse_cmd+0x22a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	f2 cf       	rjmp	.-28     	; 0xc20 <parse_cmd+0x106>
     c3c:	a0 e5       	ldi	r26, 0x50	; 80
     c3e:	b1 e0       	ldi	r27, 0x01	; 1
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c44:	f9 01       	movw	r30, r18
     c46:	ed 56       	subi	r30, 0x6D	; 109
     c48:	ff 4f       	sbci	r31, 0xFF	; 255
     c4a:	e4 91       	lpm	r30, Z+
     c4c:	8c 91       	ld	r24, X
     c4e:	8e 17       	cp	r24, r30
     c50:	39 f4       	brne	.+14     	; 0xc60 <parse_cmd+0x146>
     c52:	2f 5f       	subi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c56:	92 17       	cp	r25, r18
     c58:	08 f4       	brcc	.+2      	; 0xc5c <parse_cmd+0x142>
     c5a:	76 c0       	rjmp	.+236    	; 0xd48 <parse_cmd+0x22e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c5c:	11 96       	adiw	r26, 0x01	; 1
     c5e:	f2 cf       	rjmp	.-28     	; 0xc44 <parse_cmd+0x12a>
     c60:	a0 e5       	ldi	r26, 0x50	; 80
     c62:	b1 e0       	ldi	r27, 0x01	; 1
     c64:	20 e0       	ldi	r18, 0x00	; 0
     c66:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c68:	f9 01       	movw	r30, r18
     c6a:	ea 56       	subi	r30, 0x6A	; 106
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	e4 91       	lpm	r30, Z+
     c70:	8c 91       	ld	r24, X
     c72:	8e 17       	cp	r24, r30
     c74:	39 f4       	brne	.+14     	; 0xc84 <parse_cmd+0x16a>
     c76:	2f 5f       	subi	r18, 0xFF	; 255
     c78:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c7a:	92 17       	cp	r25, r18
     c7c:	08 f4       	brcc	.+2      	; 0xc80 <parse_cmd+0x166>
     c7e:	66 c0       	rjmp	.+204    	; 0xd4c <parse_cmd+0x232>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c80:	11 96       	adiw	r26, 0x01	; 1
     c82:	f2 cf       	rjmp	.-28     	; 0xc68 <parse_cmd+0x14e>
   {  cmd_type=CMD_GET_STATUS0; }
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
   else
   {
      if(i_str)
     c84:	80 91 2b 01 	lds	r24, 0x012B
     c88:	88 23       	and	r24, r24
     c8a:	21 f0       	breq	.+8      	; 0xc94 <parse_cmd+0x17a>
      {
        print_msg(msg_er_cmd_not_found);
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
      }
      print_msg(msg_prompt);
     c94:	89 e9       	ldi	r24, 0x99	; 153
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
      cmd=FALSE;
     c9c:	10 92 2c 01 	sts	0x012C, r1
     ca0:	08 95       	ret
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
   }
   else   {  return; }
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	0a c0       	rjmp	.+20     	; 0xcba <parse_cmd+0x1a0>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str1[j])=cmd_str[i];
     ca6:	e9 2f       	mov	r30, r25
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ee 0f       	add	r30, r30
     cac:	ff 1f       	adc	r31, r31
     cae:	e2 5d       	subi	r30, 0xD2	; 210
     cb0:	fe 4f       	sbci	r31, 0xFE	; 254
     cb2:	30 83       	st	Z, r19
         MSB(par_str1[j])=0;
     cb4:	11 82       	std	Z+1, r1	; 0x01
         j++;
     cb6:	9f 5f       	subi	r25, 0xFF	; 255

  //Get first arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     cb8:	2f 5f       	subi	r18, 0xFF	; 255
     cba:	e2 2f       	mov	r30, r18
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	e0 5b       	subi	r30, 0xB0	; 176
     cc0:	fe 4f       	sbci	r31, 0xFE	; 254
     cc2:	30 81       	ld	r19, Z
     cc4:	30 32       	cpi	r19, 0x20	; 32
     cc6:	21 f0       	breq	.+8      	; 0xcd0 <parse_cmd+0x1b6>
     cc8:	80 91 2b 01 	lds	r24, 0x012B
     ccc:	28 17       	cp	r18, r24
     cce:	58 f3       	brcs	.-42     	; 0xca6 <parse_cmd+0x18c>
      {
         LSB(par_str1[j])=cmd_str[i];
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
     cd0:	e9 2f       	mov	r30, r25
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	ee 0f       	add	r30, r30
     cd6:	ff 1f       	adc	r31, r31
     cd8:	e2 5d       	subi	r30, 0xD2	; 210
     cda:	fe 4f       	sbci	r31, 0xFE	; 254
     cdc:	10 82       	st	Z, r1
     cde:	11 82       	std	Z+1, r1	; 0x01
   }
   else   {  return; }

   //Get second arg (if any)
   if(++i<i_str)
     ce0:	92 2f       	mov	r25, r18
     ce2:	9f 5f       	subi	r25, 0xFF	; 255
     ce4:	80 91 2b 01 	lds	r24, 0x012B
     ce8:	98 17       	cp	r25, r24
     cea:	d0 f5       	brcc	.+116    	; 0xd60 <parse_cmd+0x246>
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
   }
   else   { return; }
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	0a c0       	rjmp	.+20     	; 0xd04 <parse_cmd+0x1ea>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str2[j])=cmd_str[i];
     cf0:	e2 2f       	mov	r30, r18
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	ee 0f       	add	r30, r30
     cf6:	ff 1f       	adc	r31, r31
     cf8:	e2 5c       	subi	r30, 0xC2	; 194
     cfa:	fe 4f       	sbci	r31, 0xFE	; 254
     cfc:	30 83       	st	Z, r19
         MSB(par_str2[j])=0;
     cfe:	11 82       	std	Z+1, r1	; 0x01
         j++;
     d00:	2f 5f       	subi	r18, 0xFF	; 255

   //Get second arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     d02:	9f 5f       	subi	r25, 0xFF	; 255
     d04:	e9 2f       	mov	r30, r25
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	e0 5b       	subi	r30, 0xB0	; 176
     d0a:	fe 4f       	sbci	r31, 0xFE	; 254
     d0c:	30 81       	ld	r19, Z
     d0e:	30 32       	cpi	r19, 0x20	; 32
     d10:	21 f0       	breq	.+8      	; 0xd1a <parse_cmd+0x200>
     d12:	80 91 2b 01 	lds	r24, 0x012B
     d16:	98 17       	cp	r25, r24
     d18:	58 f3       	brcs	.-42     	; 0xcf0 <parse_cmd+0x1d6>
      {
         LSB(par_str2[j])=cmd_str[i];
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
     d1a:	e2 2f       	mov	r30, r18
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	ee 0f       	add	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	e2 5c       	subi	r30, 0xC2	; 194
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	10 82       	st	Z, r1
     d28:	11 82       	std	Z+1, r1	; 0x01
     d2a:	08 95       	ret
   cmd=TRUE;

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
   {  cmd_type=CMD_RUN; }
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	0f c0       	rjmp	.+30     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_stop,i-1))
   {  cmd_type=CMD_STOP; }
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	0d c0       	rjmp	.+26     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_help,i-1))
   {  cmd_type=CMD_HELP; }
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	0b c0       	rjmp	.+22     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_forward,i-1))
   {  cmd_type=CMD_FORWARD; }
     d38:	84 e0       	ldi	r24, 0x04	; 4
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_backward,i-1))
   {  cmd_type=CMD_BACKWARD; }
     d3c:	85 e0       	ldi	r24, 0x05	; 5
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_set_speed,i-1))
   {  cmd_type=CMD_SET_SPEED; }
     d40:	86 e0       	ldi	r24, 0x06	; 6
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_id,i-1))
   {  cmd_type=CMD_GET_ID; }
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status0,i-1))
   {  cmd_type=CMD_GET_STATUS0; }
     d48:	88 e0       	ldi	r24, 0x08	; 8
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
     d4c:	89 e0       	ldi	r24, 0x09	; 9
     d4e:	80 93 2d 01 	sts	0x012D, r24
      cmd=FALSE;
      return;
   }

  //Get first arg (if any)
   if(++i<i_str)
     d52:	24 2f       	mov	r18, r20
     d54:	2f 5f       	subi	r18, 0xFF	; 255
     d56:	80 91 2b 01 	lds	r24, 0x012B
     d5a:	28 17       	cp	r18, r24
     d5c:	08 f4       	brcc	.+2      	; 0xd60 <parse_cmd+0x246>
     d5e:	a1 cf       	rjmp	.-190    	; 0xca2 <parse_cmd+0x188>
     d60:	08 95       	ret

00000d62 <convert_param1>:
//!
//! @param none
//!
//! @return none
void convert_param1(void)
{
     d62:	ff 92       	push	r15
     d64:	0f 93       	push	r16
     d66:	1f 93       	push	r17
   U8 i = 0;
   param1 = 0;
     d68:	10 92 4f 01 	sts	0x014F, r1
     d6c:	10 92 4e 01 	sts	0x014E, r1
     d70:	ff 24       	eor	r15, r15
     d72:	16 c0       	rjmp	.+44     	; 0xda0 <convert_param1+0x3e>
   while ( par_str1[i] != 0 )
   {
      param1 = param1 << 4;
     d74:	00 91 4e 01 	lds	r16, 0x014E
     d78:	10 91 4f 01 	lds	r17, 0x014F
     d7c:	94 e0       	ldi	r25, 0x04	; 4
     d7e:	00 0f       	add	r16, r16
     d80:	11 1f       	adc	r17, r17
     d82:	9a 95       	dec	r25
     d84:	e1 f7       	brne	.-8      	; 0xd7e <convert_param1+0x1c>
     d86:	10 93 4f 01 	sts	0x014F, r17
     d8a:	00 93 4e 01 	sts	0x014E, r16
      param1 = param1 + ascii_to_bin(par_str1[i]);
     d8e:	0e 94 aa 00 	call	0x154	; 0x154 <ascii_to_bin>
     d92:	08 0f       	add	r16, r24
     d94:	11 1d       	adc	r17, r1
     d96:	10 93 4f 01 	sts	0x014F, r17
     d9a:	00 93 4e 01 	sts	0x014E, r16
      i++;
     d9e:	f3 94       	inc	r15
//! @return none
void convert_param1(void)
{
   U8 i = 0;
   param1 = 0;
   while ( par_str1[i] != 0 )
     da0:	ef 2d       	mov	r30, r15
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	e2 5d       	subi	r30, 0xD2	; 210
     daa:	fe 4f       	sbci	r31, 0xFE	; 254
     dac:	80 81       	ld	r24, Z
     dae:	91 81       	ldd	r25, Z+1	; 0x01
     db0:	00 97       	sbiw	r24, 0x00	; 0
     db2:	01 f7       	brne	.-64     	; 0xd74 <convert_param1+0x12>
   {
      param1 = param1 << 4;
      param1 = param1 + ascii_to_bin(par_str1[i]);
      i++;
   }
}
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	ff 90       	pop	r15
     dba:	08 95       	ret

00000dbc <build_cmd>:
//! @return none
void build_cmd(void)
{
U8 c;

   if (uart_test_hit())    //Something new of  the UART ?
     dbc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <uart_test_hit>
     dc0:	88 23       	and	r24, r24
     dc2:	09 f4       	brne	.+2      	; 0xdc6 <build_cmd+0xa>
     dc4:	45 c0       	rjmp	.+138    	; 0xe50 <build_cmd+0x94>
   {
      c=uart_getchar();
     dc6:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <uart_getchar>
     dca:	98 2f       	mov	r25, r24
      switch (c)
     dcc:	88 30       	cpi	r24, 0x08	; 8
     dce:	f1 f0       	breq	.+60     	; 0xe0c <build_cmd+0x50>
     dd0:	8d 30       	cpi	r24, 0x0D	; 13
     dd2:	19 f0       	breq	.+6      	; 0xdda <build_cmd+0x1e>
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	91 f5       	brne	.+100    	; 0xe3c <build_cmd+0x80>
     dd8:	0b c0       	rjmp	.+22     	; 0xdf0 <build_cmd+0x34>
      {
         case CR:
            cmd_str[i_str]=0;  //Add NULL char
     dda:	e0 91 2b 01 	lds	r30, 0x012B
     dde:	f0 e0       	ldi	r31, 0x00	; 0
     de0:	e0 5b       	subi	r30, 0xB0	; 176
     de2:	fe 4f       	sbci	r31, 0xFE	; 254
     de4:	10 82       	st	Z, r1
            parse_cmd();    //Decode the command
     de6:	0e 94 8d 05 	call	0xb1a	; 0xb1a <parse_cmd>
            i_str=0;
     dea:	10 92 2b 01 	sts	0x012B, r1
     dee:	08 95       	ret
            break;
         case ABORT_CHAR:    //^c abort cmd
            i_str=0;
     df0:	10 92 2b 01 	sts	0x012B, r1
            printf("\r#");
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <build_cmd+0x3a>
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	91 e0       	ldi	r25, 0x01	; 1
     dfa:	ed b7       	in	r30, 0x3d	; 61
     dfc:	fe b7       	in	r31, 0x3e	; 62
     dfe:	92 83       	std	Z+2, r25	; 0x02
     e00:	81 83       	std	Z+1, r24	; 0x01
     e02:	0e 94 2e 08 	call	0x105c	; 0x105c <printf>
     e06:	0f 90       	pop	r0
     e08:	0f 90       	pop	r0
     e0a:	08 95       	ret
            break;
         case BKSPACE_CHAR:   //backspace
            if(i_str>0)
     e0c:	80 91 2b 01 	lds	r24, 0x012B
     e10:	88 23       	and	r24, r24
     e12:	61 f0       	breq	.+24     	; 0xe2c <build_cmd+0x70>
            {
               uart_putchar(c);
     e14:	88 e0       	ldi	r24, 0x08	; 8
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
               uart_putchar(' ');
     e1c:	80 e2       	ldi	r24, 0x20	; 32
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
               uart_putchar(c);
     e24:	88 e0       	ldi	r24, 0x08	; 8
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            }
            if(i_str>=1)
     e2c:	80 91 2b 01 	lds	r24, 0x012B
     e30:	88 23       	and	r24, r24
     e32:	71 f0       	breq	.+28     	; 0xe50 <build_cmd+0x94>
            {
               i_str--;
     e34:	81 50       	subi	r24, 0x01	; 1
     e36:	80 93 2b 01 	sts	0x012B, r24
     e3a:	08 95       	ret
            }
            break;

         default:
            cmd_str[i_str++]=c;  //append to cmd line
     e3c:	80 91 2b 01 	lds	r24, 0x012B
     e40:	e8 2f       	mov	r30, r24
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	e0 5b       	subi	r30, 0xB0	; 176
     e46:	fe 4f       	sbci	r31, 0xFE	; 254
     e48:	90 83       	st	Z, r25
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	80 93 2b 01 	sts	0x012B, r24
     e50:	08 95       	ret

00000e52 <ushell_task>:
//! @return none
void ushell_task(void)
{
   U8 status = 0;

   if(cmd==FALSE)
     e52:	80 91 2c 01 	lds	r24, 0x012C
     e56:	88 23       	and	r24, r24
     e58:	19 f4       	brne	.+6      	; 0xe60 <ushell_task+0xe>
   {
      build_cmd();
     e5a:	0e 94 de 06 	call	0xdbc	; 0xdbc <build_cmd>
     e5e:	08 95       	ret
   }
   else
   {
      switch (cmd_type)
     e60:	80 91 2d 01 	lds	r24, 0x012D
     e64:	85 30       	cpi	r24, 0x05	; 5
     e66:	31 f1       	breq	.+76     	; 0xeb4 <ushell_task+0x62>
     e68:	86 30       	cpi	r24, 0x06	; 6
     e6a:	70 f4       	brcc	.+28     	; 0xe88 <ushell_task+0x36>
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	c9 f0       	breq	.+50     	; 0xea2 <ushell_task+0x50>
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	20 f4       	brcc	.+8      	; 0xe7c <ushell_task+0x2a>
     e74:	81 30       	cpi	r24, 0x01	; 1
     e76:	09 f0       	breq	.+2      	; 0xe7a <ushell_task+0x28>
     e78:	6e c0       	rjmp	.+220    	; 0xf56 <ushell_task+0x104>
     e7a:	10 c0       	rjmp	.+32     	; 0xe9c <ushell_task+0x4a>
     e7c:	83 30       	cpi	r24, 0x03	; 3
     e7e:	a1 f0       	breq	.+40     	; 0xea8 <ushell_task+0x56>
     e80:	84 30       	cpi	r24, 0x04	; 4
     e82:	09 f0       	breq	.+2      	; 0xe86 <ushell_task+0x34>
     e84:	68 c0       	rjmp	.+208    	; 0xf56 <ushell_task+0x104>
     e86:	13 c0       	rjmp	.+38     	; 0xeae <ushell_task+0x5c>
     e88:	87 30       	cpi	r24, 0x07	; 7
     e8a:	01 f1       	breq	.+64     	; 0xecc <ushell_task+0x7a>
     e8c:	87 30       	cpi	r24, 0x07	; 7
     e8e:	a8 f0       	brcs	.+42     	; 0xeba <ushell_task+0x68>
     e90:	88 30       	cpi	r24, 0x08	; 8
     e92:	79 f1       	breq	.+94     	; 0xef2 <ushell_task+0xa0>
     e94:	89 30       	cpi	r24, 0x09	; 9
     e96:	09 f0       	breq	.+2      	; 0xe9a <ushell_task+0x48>
     e98:	5e c0       	rjmp	.+188    	; 0xf56 <ushell_task+0x104>
     e9a:	50 c0       	rjmp	.+160    	; 0xf3c <ushell_task+0xea>
      {
         case CMD_HELP:
            print_msg(msg_help);
     e9c:	8b eb       	ldi	r24, 0xBB	; 187
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	5c c0       	rjmp	.+184    	; 0xf5a <ushell_task+0x108>
            break;
         case CMD_RUN:
            mci_run();
     ea2:	0e 94 27 05 	call	0xa4e	; 0xa4e <mci_run>
     ea6:	5b c0       	rjmp	.+182    	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_STOP:
            mci_stop();
     ea8:	0e 94 a3 04 	call	0x946	; 0x946 <mci_stop>
     eac:	58 c0       	rjmp	.+176    	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_FORWARD:
            mci_forward();
     eae:	0e 94 ac 04 	call	0x958	; 0x958 <mci_forward>
     eb2:	55 c0       	rjmp	.+170    	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_BACKWARD:
            mci_backward();
     eb4:	0e 94 af 04 	call	0x95e	; 0x95e <mci_backward>
     eb8:	52 c0       	rjmp	.+164    	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_SET_SPEED:
            convert_param1();
     eba:	0e 94 b1 06 	call	0xd62	; 0xd62 <convert_param1>
            mc_disable_during_inrush();
     ebe:	0e 94 02 03 	call	0x604	; 0x604 <mc_disable_during_inrush>
            mci_set_ref_speed((U8)param1);
     ec2:	80 91 4e 01 	lds	r24, 0x014E
     ec6:	0e 94 a6 04 	call	0x94c	; 0x94c <mci_set_ref_speed>
     eca:	49 c0       	rjmp	.+146    	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_GET_ID:
            print_hex16(BOARD_ID);
     ecc:	83 e0       	ldi	r24, 0x03	; 3
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            uart_putchar(' ');
     ed4:	80 e2       	ldi	r24, 0x20	; 32
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            print_hex16(SOFT_ID);
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            uart_putchar(' ');
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            print_hex16(REV_ID);
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	2f c0       	rjmp	.+94     	; 0xf50 <ushell_task+0xfe>
            break;
         case CMD_GET_STATUS0:
            status = 0;
            if (mci_direction == CCW) {status |= (1<<3);}
     ef2:	80 91 21 01 	lds	r24, 0x0121
     ef6:	81 30       	cpi	r24, 0x01	; 1
     ef8:	11 f4       	brne	.+4      	; 0xefe <ushell_task+0xac>
     efa:	98 e0       	ldi	r25, 0x08	; 8
     efc:	01 c0       	rjmp	.+2      	; 0xf00 <ushell_task+0xae>
     efe:	90 e0       	ldi	r25, 0x00	; 0
            if (mci_run_stop == TRUE) {status |= (1<<2);}
     f00:	80 91 22 01 	lds	r24, 0x0122
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	09 f4       	brne	.+2      	; 0xf0a <ushell_task+0xb8>
     f08:	94 60       	ori	r25, 0x04	; 4
            print_hex16(status);
     f0a:	89 2f       	mov	r24, r25
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            uart_putchar(' ');
     f12:	80 e2       	ldi	r24, 0x20	; 32
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            print_hex16(mci_get_measured_speed());
     f1a:	0e 94 b9 04 	call	0x972	; 0x972 <mci_get_measured_speed>
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            uart_putchar(' ');
     f24:	80 e2       	ldi	r24, 0x20	; 32
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            print_hex16(mci_get_measured_current());
     f2c:	0e 94 bc 04 	call	0x978	; 0x978 <mci_get_measured_current>
     f30:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            ushell_active = TRUE;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 2a 01 	sts	0x012A, r24
     f3a:	11 c0       	rjmp	.+34     	; 0xf5e <ushell_task+0x10c>
            break;
         case CMD_GET_STATUS1:
            print_hex16(0xDEA);
     f3c:	8a ee       	ldi	r24, 0xEA	; 234
     f3e:	9d e0       	ldi	r25, 0x0D	; 13
     f40:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
            uart_putchar(' ');
     f44:	80 e2       	ldi	r24, 0x20	; 32
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <uart_putchar>
            print_hex16(0x123);
     f4c:	83 e2       	ldi	r24, 0x23	; 35
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 3f 05 	call	0xa7e	; 0xa7e <print_hex16>
     f54:	04 c0       	rjmp	.+8      	; 0xf5e <ushell_task+0x10c>
            break;
         default:    //Unknown command
            print_msg(msg_er_cmd_not_found);
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	91 e0       	ldi	r25, 0x01	; 1
     f5a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
      }
      cmd_type=CMD_NONE;
     f5e:	10 92 2d 01 	sts	0x012D, r1
      cmd=FALSE;
     f62:	10 92 2c 01 	sts	0x012C, r1
      print_msg(msg_prompt);
     f66:	89 e9       	ldi	r24, 0x99	; 153
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
     f6e:	08 95       	ret

00000f70 <ushell_task_init>:
//! @return none
//!
//!/
void ushell_task_init(void)
{
   uart_init();
     f70:	0e 94 cb 07 	call	0xf96	; 0xf96 <uart_init>
   print_msg(msg_welcome);
     f74:	8c e9       	ldi	r24, 0x9C	; 156
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
   print_msg(msg_prompt);
     f7c:	89 e9       	ldi	r24, 0x99	; 153
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <print_msg>
   cmd=FALSE;
     f84:	10 92 2c 01 	sts	0x012C, r1
   cmd_type=CMD_NONE;
     f88:	10 92 2d 01 	sts	0x012D, r1
}
     f8c:	08 95       	ret

00000f8e <uart_test_hit>:
/*_____ M A C R O S ________________________________________________________*/


bit uart_test_hit(void)
{
  return (Lin_rx_response_ready());
     f8e:	80 91 c9 00 	lds	r24, 0x00C9
}
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	08 95       	ret

00000f96 <uart_init>:


bit uart_init(void)
{
   Lin_set_btr_brr(BITSAMPLING,BAUDRATE);
     f96:	e8 ec       	ldi	r30, 0xC8	; 200
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	90 81       	ld	r25, Z
     f9c:	80 81       	ld	r24, Z
     f9e:	87 7f       	andi	r24, 0xF7	; 247
     fa0:	80 83       	st	Z, r24
     fa2:	88 e8       	ldi	r24, 0x88	; 136
     fa4:	80 93 cc 00 	sts	0x00CC, r24
     fa8:	10 92 ce 00 	sts	0x00CE, r1
     fac:	83 e3       	ldi	r24, 0x33	; 51
     fae:	80 93 cd 00 	sts	0x00CD, r24
     fb2:	90 83       	st	Z, r25
   Byte_transfer_enable();
     fb4:	8f e0       	ldi	r24, 0x0F	; 15
     fb6:	80 83       	st	Z, r24
   Lin_set_data(0xFF);
     fb8:	8f ef       	ldi	r24, 0xFF	; 255
     fba:	80 93 d2 00 	sts	0x00D2, r24
   return TRUE;
}
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	08 95       	ret

00000fc2 <uart_putchar>:


r_uart_ptchar uart_putchar(p_uart_ptchar ch)
{
     fc2:	28 2f       	mov	r18, r24
   while (!Lin_tx_response_ready());
     fc4:	80 91 c9 00 	lds	r24, 0x00C9
     fc8:	81 ff       	sbrs	r24, 1
     fca:	fc cf       	rjmp	.-8      	; 0xfc4 <uart_putchar+0x2>
   Lin_set_data(ch);
     fcc:	20 93 d2 00 	sts	0x00D2, r18
   return (ch);
}
     fd0:	82 2f       	mov	r24, r18
     fd2:	08 95       	ret

00000fd4 <uart_getchar>:



r_uart_gtchar uart_getchar(void)
{
    while(!Lin_rx_response_ready());
     fd4:	80 91 c9 00 	lds	r24, 0x00C9
     fd8:	80 ff       	sbrs	r24, 0
     fda:	fc cf       	rjmp	.-8      	; 0xfd4 <uart_getchar>
    return Lin_get_data();
     fdc:	80 91 d2 00 	lds	r24, 0x00D2
}
     fe0:	08 95       	ret

00000fe2 <__divmodsi4>:
     fe2:	97 fb       	bst	r25, 7
     fe4:	09 2e       	mov	r0, r25
     fe6:	05 26       	eor	r0, r21
     fe8:	0e d0       	rcall	.+28     	; 0x1006 <__divmodsi4_neg1>
     fea:	57 fd       	sbrc	r21, 7
     fec:	04 d0       	rcall	.+8      	; 0xff6 <__divmodsi4_neg2>
     fee:	14 d0       	rcall	.+40     	; 0x1018 <__udivmodsi4>
     ff0:	0a d0       	rcall	.+20     	; 0x1006 <__divmodsi4_neg1>
     ff2:	00 1c       	adc	r0, r0
     ff4:	38 f4       	brcc	.+14     	; 0x1004 <__divmodsi4_exit>

00000ff6 <__divmodsi4_neg2>:
     ff6:	50 95       	com	r21
     ff8:	40 95       	com	r20
     ffa:	30 95       	com	r19
     ffc:	21 95       	neg	r18
     ffe:	3f 4f       	sbci	r19, 0xFF	; 255
    1000:	4f 4f       	sbci	r20, 0xFF	; 255
    1002:	5f 4f       	sbci	r21, 0xFF	; 255

00001004 <__divmodsi4_exit>:
    1004:	08 95       	ret

00001006 <__divmodsi4_neg1>:
    1006:	f6 f7       	brtc	.-4      	; 0x1004 <__divmodsi4_exit>
    1008:	90 95       	com	r25
    100a:	80 95       	com	r24
    100c:	70 95       	com	r23
    100e:	61 95       	neg	r22
    1010:	7f 4f       	sbci	r23, 0xFF	; 255
    1012:	8f 4f       	sbci	r24, 0xFF	; 255
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	08 95       	ret

00001018 <__udivmodsi4>:
    1018:	a1 e2       	ldi	r26, 0x21	; 33
    101a:	1a 2e       	mov	r1, r26
    101c:	aa 1b       	sub	r26, r26
    101e:	bb 1b       	sub	r27, r27
    1020:	fd 01       	movw	r30, r26
    1022:	0d c0       	rjmp	.+26     	; 0x103e <__udivmodsi4_ep>

00001024 <__udivmodsi4_loop>:
    1024:	aa 1f       	adc	r26, r26
    1026:	bb 1f       	adc	r27, r27
    1028:	ee 1f       	adc	r30, r30
    102a:	ff 1f       	adc	r31, r31
    102c:	a2 17       	cp	r26, r18
    102e:	b3 07       	cpc	r27, r19
    1030:	e4 07       	cpc	r30, r20
    1032:	f5 07       	cpc	r31, r21
    1034:	20 f0       	brcs	.+8      	; 0x103e <__udivmodsi4_ep>
    1036:	a2 1b       	sub	r26, r18
    1038:	b3 0b       	sbc	r27, r19
    103a:	e4 0b       	sbc	r30, r20
    103c:	f5 0b       	sbc	r31, r21

0000103e <__udivmodsi4_ep>:
    103e:	66 1f       	adc	r22, r22
    1040:	77 1f       	adc	r23, r23
    1042:	88 1f       	adc	r24, r24
    1044:	99 1f       	adc	r25, r25
    1046:	1a 94       	dec	r1
    1048:	69 f7       	brne	.-38     	; 0x1024 <__udivmodsi4_loop>
    104a:	60 95       	com	r22
    104c:	70 95       	com	r23
    104e:	80 95       	com	r24
    1050:	90 95       	com	r25
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	bd 01       	movw	r22, r26
    1058:	cf 01       	movw	r24, r30
    105a:	08 95       	ret

0000105c <printf>:
    105c:	a0 e0       	ldi	r26, 0x00	; 0
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e3       	ldi	r30, 0x34	; 52
    1062:	f8 e0       	ldi	r31, 0x08	; 8
    1064:	0c 94 d0 0a 	jmp	0x15a0	; 0x15a0 <__prologue_saves__+0x20>
    1068:	fe 01       	movw	r30, r28
    106a:	35 96       	adiw	r30, 0x05	; 5
    106c:	61 91       	ld	r22, Z+
    106e:	71 91       	ld	r23, Z+
    1070:	80 91 6c 01 	lds	r24, 0x016C
    1074:	90 91 6d 01 	lds	r25, 0x016D
    1078:	af 01       	movw	r20, r30
    107a:	0e 94 43 08 	call	0x1086	; 0x1086 <vfprintf>
    107e:	20 96       	adiw	r28, 0x00	; 0
    1080:	e2 e0       	ldi	r30, 0x02	; 2
    1082:	0c 94 ec 0a 	jmp	0x15d8	; 0x15d8 <__epilogue_restores__+0x20>

00001086 <vfprintf>:
    1086:	ab e0       	ldi	r26, 0x0B	; 11
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e9 e4       	ldi	r30, 0x49	; 73
    108c:	f8 e0       	ldi	r31, 0x08	; 8
    108e:	0c 94 c0 0a 	jmp	0x1580	; 0x1580 <__prologue_saves__>
    1092:	3c 01       	movw	r6, r24
    1094:	2b 01       	movw	r4, r22
    1096:	5a 01       	movw	r10, r20
    1098:	fc 01       	movw	r30, r24
    109a:	17 82       	std	Z+7, r1	; 0x07
    109c:	16 82       	std	Z+6, r1	; 0x06
    109e:	83 81       	ldd	r24, Z+3	; 0x03
    10a0:	81 fd       	sbrc	r24, 1
    10a2:	03 c0       	rjmp	.+6      	; 0x10aa <vfprintf+0x24>
    10a4:	6f ef       	ldi	r22, 0xFF	; 255
    10a6:	7f ef       	ldi	r23, 0xFF	; 255
    10a8:	c6 c1       	rjmp	.+908    	; 0x1436 <vfprintf+0x3b0>
    10aa:	9a e0       	ldi	r25, 0x0A	; 10
    10ac:	89 2e       	mov	r8, r25
    10ae:	1e 01       	movw	r2, r28
    10b0:	08 94       	sec
    10b2:	21 1c       	adc	r2, r1
    10b4:	31 1c       	adc	r3, r1
    10b6:	f3 01       	movw	r30, r6
    10b8:	23 81       	ldd	r18, Z+3	; 0x03
    10ba:	f2 01       	movw	r30, r4
    10bc:	23 fd       	sbrc	r18, 3
    10be:	85 91       	lpm	r24, Z+
    10c0:	23 ff       	sbrs	r18, 3
    10c2:	81 91       	ld	r24, Z+
    10c4:	2f 01       	movw	r4, r30
    10c6:	88 23       	and	r24, r24
    10c8:	09 f4       	brne	.+2      	; 0x10cc <vfprintf+0x46>
    10ca:	b2 c1       	rjmp	.+868    	; 0x1430 <vfprintf+0x3aa>
    10cc:	85 32       	cpi	r24, 0x25	; 37
    10ce:	39 f4       	brne	.+14     	; 0x10de <vfprintf+0x58>
    10d0:	23 fd       	sbrc	r18, 3
    10d2:	85 91       	lpm	r24, Z+
    10d4:	23 ff       	sbrs	r18, 3
    10d6:	81 91       	ld	r24, Z+
    10d8:	2f 01       	movw	r4, r30
    10da:	85 32       	cpi	r24, 0x25	; 37
    10dc:	29 f4       	brne	.+10     	; 0x10e8 <vfprintf+0x62>
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	b3 01       	movw	r22, r6
    10e2:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    10e6:	e7 cf       	rjmp	.-50     	; 0x10b6 <vfprintf+0x30>
    10e8:	98 2f       	mov	r25, r24
    10ea:	ff 24       	eor	r15, r15
    10ec:	ee 24       	eor	r14, r14
    10ee:	99 24       	eor	r9, r9
    10f0:	ff e1       	ldi	r31, 0x1F	; 31
    10f2:	ff 15       	cp	r31, r15
    10f4:	d0 f0       	brcs	.+52     	; 0x112a <vfprintf+0xa4>
    10f6:	9b 32       	cpi	r25, 0x2B	; 43
    10f8:	69 f0       	breq	.+26     	; 0x1114 <vfprintf+0x8e>
    10fa:	9c 32       	cpi	r25, 0x2C	; 44
    10fc:	28 f4       	brcc	.+10     	; 0x1108 <vfprintf+0x82>
    10fe:	90 32       	cpi	r25, 0x20	; 32
    1100:	59 f0       	breq	.+22     	; 0x1118 <vfprintf+0x92>
    1102:	93 32       	cpi	r25, 0x23	; 35
    1104:	91 f4       	brne	.+36     	; 0x112a <vfprintf+0xa4>
    1106:	0e c0       	rjmp	.+28     	; 0x1124 <vfprintf+0x9e>
    1108:	9d 32       	cpi	r25, 0x2D	; 45
    110a:	49 f0       	breq	.+18     	; 0x111e <vfprintf+0x98>
    110c:	90 33       	cpi	r25, 0x30	; 48
    110e:	69 f4       	brne	.+26     	; 0x112a <vfprintf+0xa4>
    1110:	41 e0       	ldi	r20, 0x01	; 1
    1112:	24 c0       	rjmp	.+72     	; 0x115c <vfprintf+0xd6>
    1114:	52 e0       	ldi	r21, 0x02	; 2
    1116:	f5 2a       	or	r15, r21
    1118:	84 e0       	ldi	r24, 0x04	; 4
    111a:	f8 2a       	or	r15, r24
    111c:	28 c0       	rjmp	.+80     	; 0x116e <vfprintf+0xe8>
    111e:	98 e0       	ldi	r25, 0x08	; 8
    1120:	f9 2a       	or	r15, r25
    1122:	25 c0       	rjmp	.+74     	; 0x116e <vfprintf+0xe8>
    1124:	e0 e1       	ldi	r30, 0x10	; 16
    1126:	fe 2a       	or	r15, r30
    1128:	22 c0       	rjmp	.+68     	; 0x116e <vfprintf+0xe8>
    112a:	f7 fc       	sbrc	r15, 7
    112c:	29 c0       	rjmp	.+82     	; 0x1180 <vfprintf+0xfa>
    112e:	89 2f       	mov	r24, r25
    1130:	80 53       	subi	r24, 0x30	; 48
    1132:	8a 30       	cpi	r24, 0x0A	; 10
    1134:	70 f4       	brcc	.+28     	; 0x1152 <vfprintf+0xcc>
    1136:	f6 fe       	sbrs	r15, 6
    1138:	05 c0       	rjmp	.+10     	; 0x1144 <vfprintf+0xbe>
    113a:	98 9c       	mul	r9, r8
    113c:	90 2c       	mov	r9, r0
    113e:	11 24       	eor	r1, r1
    1140:	98 0e       	add	r9, r24
    1142:	15 c0       	rjmp	.+42     	; 0x116e <vfprintf+0xe8>
    1144:	e8 9c       	mul	r14, r8
    1146:	e0 2c       	mov	r14, r0
    1148:	11 24       	eor	r1, r1
    114a:	e8 0e       	add	r14, r24
    114c:	f0 e2       	ldi	r31, 0x20	; 32
    114e:	ff 2a       	or	r15, r31
    1150:	0e c0       	rjmp	.+28     	; 0x116e <vfprintf+0xe8>
    1152:	9e 32       	cpi	r25, 0x2E	; 46
    1154:	29 f4       	brne	.+10     	; 0x1160 <vfprintf+0xda>
    1156:	f6 fc       	sbrc	r15, 6
    1158:	6b c1       	rjmp	.+726    	; 0x1430 <vfprintf+0x3aa>
    115a:	40 e4       	ldi	r20, 0x40	; 64
    115c:	f4 2a       	or	r15, r20
    115e:	07 c0       	rjmp	.+14     	; 0x116e <vfprintf+0xe8>
    1160:	9c 36       	cpi	r25, 0x6C	; 108
    1162:	19 f4       	brne	.+6      	; 0x116a <vfprintf+0xe4>
    1164:	50 e8       	ldi	r21, 0x80	; 128
    1166:	f5 2a       	or	r15, r21
    1168:	02 c0       	rjmp	.+4      	; 0x116e <vfprintf+0xe8>
    116a:	98 36       	cpi	r25, 0x68	; 104
    116c:	49 f4       	brne	.+18     	; 0x1180 <vfprintf+0xfa>
    116e:	f2 01       	movw	r30, r4
    1170:	23 fd       	sbrc	r18, 3
    1172:	95 91       	lpm	r25, Z+
    1174:	23 ff       	sbrs	r18, 3
    1176:	91 91       	ld	r25, Z+
    1178:	2f 01       	movw	r4, r30
    117a:	99 23       	and	r25, r25
    117c:	09 f0       	breq	.+2      	; 0x1180 <vfprintf+0xfa>
    117e:	b8 cf       	rjmp	.-144    	; 0x10f0 <vfprintf+0x6a>
    1180:	89 2f       	mov	r24, r25
    1182:	85 54       	subi	r24, 0x45	; 69
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	18 f0       	brcs	.+6      	; 0x118e <vfprintf+0x108>
    1188:	80 52       	subi	r24, 0x20	; 32
    118a:	83 30       	cpi	r24, 0x03	; 3
    118c:	38 f4       	brcc	.+14     	; 0x119c <vfprintf+0x116>
    118e:	44 e0       	ldi	r20, 0x04	; 4
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	a4 0e       	add	r10, r20
    1194:	b5 1e       	adc	r11, r21
    1196:	5f e3       	ldi	r21, 0x3F	; 63
    1198:	59 83       	std	Y+1, r21	; 0x01
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <vfprintf+0x134>
    119c:	93 36       	cpi	r25, 0x63	; 99
    119e:	31 f0       	breq	.+12     	; 0x11ac <vfprintf+0x126>
    11a0:	93 37       	cpi	r25, 0x73	; 115
    11a2:	79 f0       	breq	.+30     	; 0x11c2 <vfprintf+0x13c>
    11a4:	93 35       	cpi	r25, 0x53	; 83
    11a6:	09 f0       	breq	.+2      	; 0x11aa <vfprintf+0x124>
    11a8:	56 c0       	rjmp	.+172    	; 0x1256 <vfprintf+0x1d0>
    11aa:	20 c0       	rjmp	.+64     	; 0x11ec <vfprintf+0x166>
    11ac:	f5 01       	movw	r30, r10
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
    11b2:	42 e0       	ldi	r20, 0x02	; 2
    11b4:	50 e0       	ldi	r21, 0x00	; 0
    11b6:	a4 0e       	add	r10, r20
    11b8:	b5 1e       	adc	r11, r21
    11ba:	61 01       	movw	r12, r2
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	10 e0       	ldi	r17, 0x00	; 0
    11c0:	12 c0       	rjmp	.+36     	; 0x11e6 <vfprintf+0x160>
    11c2:	f5 01       	movw	r30, r10
    11c4:	c0 80       	ld	r12, Z
    11c6:	d1 80       	ldd	r13, Z+1	; 0x01
    11c8:	f6 fc       	sbrc	r15, 6
    11ca:	03 c0       	rjmp	.+6      	; 0x11d2 <vfprintf+0x14c>
    11cc:	6f ef       	ldi	r22, 0xFF	; 255
    11ce:	7f ef       	ldi	r23, 0xFF	; 255
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <vfprintf+0x150>
    11d2:	69 2d       	mov	r22, r9
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	42 e0       	ldi	r20, 0x02	; 2
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	a4 0e       	add	r10, r20
    11dc:	b5 1e       	adc	r11, r21
    11de:	c6 01       	movw	r24, r12
    11e0:	0e 94 2b 0a 	call	0x1456	; 0x1456 <strnlen>
    11e4:	8c 01       	movw	r16, r24
    11e6:	5f e7       	ldi	r21, 0x7F	; 127
    11e8:	f5 22       	and	r15, r21
    11ea:	14 c0       	rjmp	.+40     	; 0x1214 <vfprintf+0x18e>
    11ec:	f5 01       	movw	r30, r10
    11ee:	c0 80       	ld	r12, Z
    11f0:	d1 80       	ldd	r13, Z+1	; 0x01
    11f2:	f6 fc       	sbrc	r15, 6
    11f4:	03 c0       	rjmp	.+6      	; 0x11fc <vfprintf+0x176>
    11f6:	6f ef       	ldi	r22, 0xFF	; 255
    11f8:	7f ef       	ldi	r23, 0xFF	; 255
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <vfprintf+0x17a>
    11fc:	69 2d       	mov	r22, r9
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	42 e0       	ldi	r20, 0x02	; 2
    1202:	50 e0       	ldi	r21, 0x00	; 0
    1204:	a4 0e       	add	r10, r20
    1206:	b5 1e       	adc	r11, r21
    1208:	c6 01       	movw	r24, r12
    120a:	0e 94 20 0a 	call	0x1440	; 0x1440 <strnlen_P>
    120e:	8c 01       	movw	r16, r24
    1210:	50 e8       	ldi	r21, 0x80	; 128
    1212:	f5 2a       	or	r15, r21
    1214:	f3 fe       	sbrs	r15, 3
    1216:	07 c0       	rjmp	.+14     	; 0x1226 <vfprintf+0x1a0>
    1218:	1a c0       	rjmp	.+52     	; 0x124e <vfprintf+0x1c8>
    121a:	80 e2       	ldi	r24, 0x20	; 32
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	b3 01       	movw	r22, r6
    1220:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    1224:	ea 94       	dec	r14
    1226:	8e 2d       	mov	r24, r14
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	08 17       	cp	r16, r24
    122c:	19 07       	cpc	r17, r25
    122e:	a8 f3       	brcs	.-22     	; 0x121a <vfprintf+0x194>
    1230:	0e c0       	rjmp	.+28     	; 0x124e <vfprintf+0x1c8>
    1232:	f6 01       	movw	r30, r12
    1234:	f7 fc       	sbrc	r15, 7
    1236:	85 91       	lpm	r24, Z+
    1238:	f7 fe       	sbrs	r15, 7
    123a:	81 91       	ld	r24, Z+
    123c:	6f 01       	movw	r12, r30
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	b3 01       	movw	r22, r6
    1242:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    1246:	e1 10       	cpse	r14, r1
    1248:	ea 94       	dec	r14
    124a:	01 50       	subi	r16, 0x01	; 1
    124c:	10 40       	sbci	r17, 0x00	; 0
    124e:	01 15       	cp	r16, r1
    1250:	11 05       	cpc	r17, r1
    1252:	79 f7       	brne	.-34     	; 0x1232 <vfprintf+0x1ac>
    1254:	ea c0       	rjmp	.+468    	; 0x142a <vfprintf+0x3a4>
    1256:	94 36       	cpi	r25, 0x64	; 100
    1258:	11 f0       	breq	.+4      	; 0x125e <vfprintf+0x1d8>
    125a:	99 36       	cpi	r25, 0x69	; 105
    125c:	69 f5       	brne	.+90     	; 0x12b8 <vfprintf+0x232>
    125e:	f7 fe       	sbrs	r15, 7
    1260:	08 c0       	rjmp	.+16     	; 0x1272 <vfprintf+0x1ec>
    1262:	f5 01       	movw	r30, r10
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	42 81       	ldd	r20, Z+2	; 0x02
    126a:	53 81       	ldd	r21, Z+3	; 0x03
    126c:	84 e0       	ldi	r24, 0x04	; 4
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	0a c0       	rjmp	.+20     	; 0x1286 <vfprintf+0x200>
    1272:	f5 01       	movw	r30, r10
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
    1278:	9c 01       	movw	r18, r24
    127a:	44 27       	eor	r20, r20
    127c:	37 fd       	sbrc	r19, 7
    127e:	40 95       	com	r20
    1280:	54 2f       	mov	r21, r20
    1282:	82 e0       	ldi	r24, 0x02	; 2
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	a8 0e       	add	r10, r24
    1288:	b9 1e       	adc	r11, r25
    128a:	9f e6       	ldi	r25, 0x6F	; 111
    128c:	f9 22       	and	r15, r25
    128e:	57 ff       	sbrs	r21, 7
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <vfprintf+0x21e>
    1292:	50 95       	com	r21
    1294:	40 95       	com	r20
    1296:	30 95       	com	r19
    1298:	21 95       	neg	r18
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	4f 4f       	sbci	r20, 0xFF	; 255
    129e:	5f 4f       	sbci	r21, 0xFF	; 255
    12a0:	e0 e8       	ldi	r30, 0x80	; 128
    12a2:	fe 2a       	or	r15, r30
    12a4:	ca 01       	movw	r24, r20
    12a6:	b9 01       	movw	r22, r18
    12a8:	a1 01       	movw	r20, r2
    12aa:	2a e0       	ldi	r18, 0x0A	; 10
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__ultoa_invert>
    12b2:	d8 2e       	mov	r13, r24
    12b4:	d2 18       	sub	r13, r2
    12b6:	40 c0       	rjmp	.+128    	; 0x1338 <vfprintf+0x2b2>
    12b8:	95 37       	cpi	r25, 0x75	; 117
    12ba:	29 f4       	brne	.+10     	; 0x12c6 <vfprintf+0x240>
    12bc:	1f 2d       	mov	r17, r15
    12be:	1f 7e       	andi	r17, 0xEF	; 239
    12c0:	2a e0       	ldi	r18, 0x0A	; 10
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	1d c0       	rjmp	.+58     	; 0x1300 <vfprintf+0x27a>
    12c6:	1f 2d       	mov	r17, r15
    12c8:	19 7f       	andi	r17, 0xF9	; 249
    12ca:	9f 36       	cpi	r25, 0x6F	; 111
    12cc:	61 f0       	breq	.+24     	; 0x12e6 <vfprintf+0x260>
    12ce:	90 37       	cpi	r25, 0x70	; 112
    12d0:	20 f4       	brcc	.+8      	; 0x12da <vfprintf+0x254>
    12d2:	98 35       	cpi	r25, 0x58	; 88
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <vfprintf+0x252>
    12d6:	ac c0       	rjmp	.+344    	; 0x1430 <vfprintf+0x3aa>
    12d8:	0f c0       	rjmp	.+30     	; 0x12f8 <vfprintf+0x272>
    12da:	90 37       	cpi	r25, 0x70	; 112
    12dc:	39 f0       	breq	.+14     	; 0x12ec <vfprintf+0x266>
    12de:	98 37       	cpi	r25, 0x78	; 120
    12e0:	09 f0       	breq	.+2      	; 0x12e4 <vfprintf+0x25e>
    12e2:	a6 c0       	rjmp	.+332    	; 0x1430 <vfprintf+0x3aa>
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <vfprintf+0x268>
    12e6:	28 e0       	ldi	r18, 0x08	; 8
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	0a c0       	rjmp	.+20     	; 0x1300 <vfprintf+0x27a>
    12ec:	10 61       	ori	r17, 0x10	; 16
    12ee:	14 fd       	sbrc	r17, 4
    12f0:	14 60       	ori	r17, 0x04	; 4
    12f2:	20 e1       	ldi	r18, 0x10	; 16
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	04 c0       	rjmp	.+8      	; 0x1300 <vfprintf+0x27a>
    12f8:	14 fd       	sbrc	r17, 4
    12fa:	16 60       	ori	r17, 0x06	; 6
    12fc:	20 e1       	ldi	r18, 0x10	; 16
    12fe:	32 e0       	ldi	r19, 0x02	; 2
    1300:	17 ff       	sbrs	r17, 7
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <vfprintf+0x28e>
    1304:	f5 01       	movw	r30, r10
    1306:	60 81       	ld	r22, Z
    1308:	71 81       	ldd	r23, Z+1	; 0x01
    130a:	82 81       	ldd	r24, Z+2	; 0x02
    130c:	93 81       	ldd	r25, Z+3	; 0x03
    130e:	44 e0       	ldi	r20, 0x04	; 4
    1310:	50 e0       	ldi	r21, 0x00	; 0
    1312:	08 c0       	rjmp	.+16     	; 0x1324 <vfprintf+0x29e>
    1314:	f5 01       	movw	r30, r10
    1316:	80 81       	ld	r24, Z
    1318:	91 81       	ldd	r25, Z+1	; 0x01
    131a:	bc 01       	movw	r22, r24
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	42 e0       	ldi	r20, 0x02	; 2
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	a4 0e       	add	r10, r20
    1326:	b5 1e       	adc	r11, r21
    1328:	a1 01       	movw	r20, r2
    132a:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <__ultoa_invert>
    132e:	d8 2e       	mov	r13, r24
    1330:	d2 18       	sub	r13, r2
    1332:	8f e7       	ldi	r24, 0x7F	; 127
    1334:	f8 2e       	mov	r15, r24
    1336:	f1 22       	and	r15, r17
    1338:	f6 fe       	sbrs	r15, 6
    133a:	0b c0       	rjmp	.+22     	; 0x1352 <vfprintf+0x2cc>
    133c:	5e ef       	ldi	r21, 0xFE	; 254
    133e:	f5 22       	and	r15, r21
    1340:	d9 14       	cp	r13, r9
    1342:	38 f4       	brcc	.+14     	; 0x1352 <vfprintf+0x2cc>
    1344:	f4 fe       	sbrs	r15, 4
    1346:	07 c0       	rjmp	.+14     	; 0x1356 <vfprintf+0x2d0>
    1348:	f2 fc       	sbrc	r15, 2
    134a:	05 c0       	rjmp	.+10     	; 0x1356 <vfprintf+0x2d0>
    134c:	8f ee       	ldi	r24, 0xEF	; 239
    134e:	f8 22       	and	r15, r24
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <vfprintf+0x2d0>
    1352:	1d 2d       	mov	r17, r13
    1354:	01 c0       	rjmp	.+2      	; 0x1358 <vfprintf+0x2d2>
    1356:	19 2d       	mov	r17, r9
    1358:	f4 fe       	sbrs	r15, 4
    135a:	0d c0       	rjmp	.+26     	; 0x1376 <vfprintf+0x2f0>
    135c:	fe 01       	movw	r30, r28
    135e:	ed 0d       	add	r30, r13
    1360:	f1 1d       	adc	r31, r1
    1362:	80 81       	ld	r24, Z
    1364:	80 33       	cpi	r24, 0x30	; 48
    1366:	19 f4       	brne	.+6      	; 0x136e <vfprintf+0x2e8>
    1368:	99 ee       	ldi	r25, 0xE9	; 233
    136a:	f9 22       	and	r15, r25
    136c:	08 c0       	rjmp	.+16     	; 0x137e <vfprintf+0x2f8>
    136e:	1f 5f       	subi	r17, 0xFF	; 255
    1370:	f2 fe       	sbrs	r15, 2
    1372:	05 c0       	rjmp	.+10     	; 0x137e <vfprintf+0x2f8>
    1374:	03 c0       	rjmp	.+6      	; 0x137c <vfprintf+0x2f6>
    1376:	8f 2d       	mov	r24, r15
    1378:	86 78       	andi	r24, 0x86	; 134
    137a:	09 f0       	breq	.+2      	; 0x137e <vfprintf+0x2f8>
    137c:	1f 5f       	subi	r17, 0xFF	; 255
    137e:	0f 2d       	mov	r16, r15
    1380:	f3 fc       	sbrc	r15, 3
    1382:	14 c0       	rjmp	.+40     	; 0x13ac <vfprintf+0x326>
    1384:	f0 fe       	sbrs	r15, 0
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <vfprintf+0x320>
    1388:	1e 15       	cp	r17, r14
    138a:	10 f0       	brcs	.+4      	; 0x1390 <vfprintf+0x30a>
    138c:	9d 2c       	mov	r9, r13
    138e:	0b c0       	rjmp	.+22     	; 0x13a6 <vfprintf+0x320>
    1390:	9d 2c       	mov	r9, r13
    1392:	9e 0c       	add	r9, r14
    1394:	91 1a       	sub	r9, r17
    1396:	1e 2d       	mov	r17, r14
    1398:	06 c0       	rjmp	.+12     	; 0x13a6 <vfprintf+0x320>
    139a:	80 e2       	ldi	r24, 0x20	; 32
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	b3 01       	movw	r22, r6
    13a0:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    13a4:	1f 5f       	subi	r17, 0xFF	; 255
    13a6:	1e 15       	cp	r17, r14
    13a8:	c0 f3       	brcs	.-16     	; 0x139a <vfprintf+0x314>
    13aa:	04 c0       	rjmp	.+8      	; 0x13b4 <vfprintf+0x32e>
    13ac:	1e 15       	cp	r17, r14
    13ae:	10 f4       	brcc	.+4      	; 0x13b4 <vfprintf+0x32e>
    13b0:	e1 1a       	sub	r14, r17
    13b2:	01 c0       	rjmp	.+2      	; 0x13b6 <vfprintf+0x330>
    13b4:	ee 24       	eor	r14, r14
    13b6:	04 ff       	sbrs	r16, 4
    13b8:	0f c0       	rjmp	.+30     	; 0x13d8 <vfprintf+0x352>
    13ba:	80 e3       	ldi	r24, 0x30	; 48
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	b3 01       	movw	r22, r6
    13c0:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    13c4:	02 ff       	sbrs	r16, 2
    13c6:	1d c0       	rjmp	.+58     	; 0x1402 <vfprintf+0x37c>
    13c8:	01 fd       	sbrc	r16, 1
    13ca:	03 c0       	rjmp	.+6      	; 0x13d2 <vfprintf+0x34c>
    13cc:	88 e7       	ldi	r24, 0x78	; 120
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e c0       	rjmp	.+28     	; 0x13ee <vfprintf+0x368>
    13d2:	88 e5       	ldi	r24, 0x58	; 88
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0b c0       	rjmp	.+22     	; 0x13ee <vfprintf+0x368>
    13d8:	80 2f       	mov	r24, r16
    13da:	86 78       	andi	r24, 0x86	; 134
    13dc:	91 f0       	breq	.+36     	; 0x1402 <vfprintf+0x37c>
    13de:	01 ff       	sbrs	r16, 1
    13e0:	02 c0       	rjmp	.+4      	; 0x13e6 <vfprintf+0x360>
    13e2:	8b e2       	ldi	r24, 0x2B	; 43
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <vfprintf+0x362>
    13e6:	80 e2       	ldi	r24, 0x20	; 32
    13e8:	f7 fc       	sbrc	r15, 7
    13ea:	8d e2       	ldi	r24, 0x2D	; 45
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	b3 01       	movw	r22, r6
    13f0:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <vfprintf+0x37c>
    13f6:	80 e3       	ldi	r24, 0x30	; 48
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	b3 01       	movw	r22, r6
    13fc:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    1400:	9a 94       	dec	r9
    1402:	d9 14       	cp	r13, r9
    1404:	c0 f3       	brcs	.-16     	; 0x13f6 <vfprintf+0x370>
    1406:	da 94       	dec	r13
    1408:	f1 01       	movw	r30, r2
    140a:	ed 0d       	add	r30, r13
    140c:	f1 1d       	adc	r31, r1
    140e:	80 81       	ld	r24, Z
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	b3 01       	movw	r22, r6
    1414:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    1418:	dd 20       	and	r13, r13
    141a:	a9 f7       	brne	.-22     	; 0x1406 <vfprintf+0x380>
    141c:	06 c0       	rjmp	.+12     	; 0x142a <vfprintf+0x3a4>
    141e:	80 e2       	ldi	r24, 0x20	; 32
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	b3 01       	movw	r22, r6
    1424:	0e 94 36 0a 	call	0x146c	; 0x146c <fputc>
    1428:	ea 94       	dec	r14
    142a:	ee 20       	and	r14, r14
    142c:	c1 f7       	brne	.-16     	; 0x141e <vfprintf+0x398>
    142e:	43 ce       	rjmp	.-890    	; 0x10b6 <vfprintf+0x30>
    1430:	f3 01       	movw	r30, r6
    1432:	66 81       	ldd	r22, Z+6	; 0x06
    1434:	77 81       	ldd	r23, Z+7	; 0x07
    1436:	cb 01       	movw	r24, r22
    1438:	2b 96       	adiw	r28, 0x0b	; 11
    143a:	e2 e1       	ldi	r30, 0x12	; 18
    143c:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__epilogue_restores__>

00001440 <strnlen_P>:
    1440:	fc 01       	movw	r30, r24
    1442:	05 90       	lpm	r0, Z+
    1444:	61 50       	subi	r22, 0x01	; 1
    1446:	70 40       	sbci	r23, 0x00	; 0
    1448:	01 10       	cpse	r0, r1
    144a:	d8 f7       	brcc	.-10     	; 0x1442 <strnlen_P+0x2>
    144c:	80 95       	com	r24
    144e:	90 95       	com	r25
    1450:	8e 0f       	add	r24, r30
    1452:	9f 1f       	adc	r25, r31
    1454:	08 95       	ret

00001456 <strnlen>:
    1456:	fc 01       	movw	r30, r24
    1458:	61 50       	subi	r22, 0x01	; 1
    145a:	70 40       	sbci	r23, 0x00	; 0
    145c:	01 90       	ld	r0, Z+
    145e:	01 10       	cpse	r0, r1
    1460:	d8 f7       	brcc	.-10     	; 0x1458 <strnlen+0x2>
    1462:	80 95       	com	r24
    1464:	90 95       	com	r25
    1466:	8e 0f       	add	r24, r30
    1468:	9f 1f       	adc	r25, r31
    146a:	08 95       	ret

0000146c <fputc>:
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	8c 01       	movw	r16, r24
    1476:	eb 01       	movw	r28, r22
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	81 ff       	sbrs	r24, 1
    147c:	1b c0       	rjmp	.+54     	; 0x14b4 <fputc+0x48>
    147e:	82 ff       	sbrs	r24, 2
    1480:	0d c0       	rjmp	.+26     	; 0x149c <fputc+0x30>
    1482:	2e 81       	ldd	r18, Y+6	; 0x06
    1484:	3f 81       	ldd	r19, Y+7	; 0x07
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	9d 81       	ldd	r25, Y+5	; 0x05
    148a:	28 17       	cp	r18, r24
    148c:	39 07       	cpc	r19, r25
    148e:	64 f4       	brge	.+24     	; 0x14a8 <fputc+0x3c>
    1490:	e8 81       	ld	r30, Y
    1492:	f9 81       	ldd	r31, Y+1	; 0x01
    1494:	01 93       	st	Z+, r16
    1496:	f9 83       	std	Y+1, r31	; 0x01
    1498:	e8 83       	st	Y, r30
    149a:	06 c0       	rjmp	.+12     	; 0x14a8 <fputc+0x3c>
    149c:	e8 85       	ldd	r30, Y+8	; 0x08
    149e:	f9 85       	ldd	r31, Y+9	; 0x09
    14a0:	80 2f       	mov	r24, r16
    14a2:	09 95       	icall
    14a4:	89 2b       	or	r24, r25
    14a6:	31 f4       	brne	.+12     	; 0x14b4 <fputc+0x48>
    14a8:	8e 81       	ldd	r24, Y+6	; 0x06
    14aa:	9f 81       	ldd	r25, Y+7	; 0x07
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	9f 83       	std	Y+7, r25	; 0x07
    14b0:	8e 83       	std	Y+6, r24	; 0x06
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <fputc+0x4c>
    14b4:	0f ef       	ldi	r16, 0xFF	; 255
    14b6:	1f ef       	ldi	r17, 0xFF	; 255
    14b8:	c8 01       	movw	r24, r16
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	08 95       	ret

000014c4 <__ultoa_invert>:
    14c4:	fa 01       	movw	r30, r20
    14c6:	aa 27       	eor	r26, r26
    14c8:	28 30       	cpi	r18, 0x08	; 8
    14ca:	51 f1       	breq	.+84     	; 0x1520 <__ultoa_invert+0x5c>
    14cc:	20 31       	cpi	r18, 0x10	; 16
    14ce:	81 f1       	breq	.+96     	; 0x1530 <__ultoa_invert+0x6c>
    14d0:	e8 94       	clt
    14d2:	6f 93       	push	r22
    14d4:	6e 7f       	andi	r22, 0xFE	; 254
    14d6:	6e 5f       	subi	r22, 0xFE	; 254
    14d8:	7f 4f       	sbci	r23, 0xFF	; 255
    14da:	8f 4f       	sbci	r24, 0xFF	; 255
    14dc:	9f 4f       	sbci	r25, 0xFF	; 255
    14de:	af 4f       	sbci	r26, 0xFF	; 255
    14e0:	b1 e0       	ldi	r27, 0x01	; 1
    14e2:	3e d0       	rcall	.+124    	; 0x1560 <__ultoa_invert+0x9c>
    14e4:	b4 e0       	ldi	r27, 0x04	; 4
    14e6:	3c d0       	rcall	.+120    	; 0x1560 <__ultoa_invert+0x9c>
    14e8:	67 0f       	add	r22, r23
    14ea:	78 1f       	adc	r23, r24
    14ec:	89 1f       	adc	r24, r25
    14ee:	9a 1f       	adc	r25, r26
    14f0:	a1 1d       	adc	r26, r1
    14f2:	68 0f       	add	r22, r24
    14f4:	79 1f       	adc	r23, r25
    14f6:	8a 1f       	adc	r24, r26
    14f8:	91 1d       	adc	r25, r1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	6a 0f       	add	r22, r26
    14fe:	71 1d       	adc	r23, r1
    1500:	81 1d       	adc	r24, r1
    1502:	91 1d       	adc	r25, r1
    1504:	a1 1d       	adc	r26, r1
    1506:	20 d0       	rcall	.+64     	; 0x1548 <__ultoa_invert+0x84>
    1508:	09 f4       	brne	.+2      	; 0x150c <__ultoa_invert+0x48>
    150a:	68 94       	set
    150c:	3f 91       	pop	r19
    150e:	2a e0       	ldi	r18, 0x0A	; 10
    1510:	26 9f       	mul	r18, r22
    1512:	11 24       	eor	r1, r1
    1514:	30 19       	sub	r19, r0
    1516:	30 5d       	subi	r19, 0xD0	; 208
    1518:	31 93       	st	Z+, r19
    151a:	de f6       	brtc	.-74     	; 0x14d2 <__ultoa_invert+0xe>
    151c:	cf 01       	movw	r24, r30
    151e:	08 95       	ret
    1520:	46 2f       	mov	r20, r22
    1522:	47 70       	andi	r20, 0x07	; 7
    1524:	40 5d       	subi	r20, 0xD0	; 208
    1526:	41 93       	st	Z+, r20
    1528:	b3 e0       	ldi	r27, 0x03	; 3
    152a:	0f d0       	rcall	.+30     	; 0x154a <__ultoa_invert+0x86>
    152c:	c9 f7       	brne	.-14     	; 0x1520 <__ultoa_invert+0x5c>
    152e:	f6 cf       	rjmp	.-20     	; 0x151c <__ultoa_invert+0x58>
    1530:	46 2f       	mov	r20, r22
    1532:	4f 70       	andi	r20, 0x0F	; 15
    1534:	40 5d       	subi	r20, 0xD0	; 208
    1536:	4a 33       	cpi	r20, 0x3A	; 58
    1538:	18 f0       	brcs	.+6      	; 0x1540 <__ultoa_invert+0x7c>
    153a:	49 5d       	subi	r20, 0xD9	; 217
    153c:	31 fd       	sbrc	r19, 1
    153e:	40 52       	subi	r20, 0x20	; 32
    1540:	41 93       	st	Z+, r20
    1542:	02 d0       	rcall	.+4      	; 0x1548 <__ultoa_invert+0x84>
    1544:	a9 f7       	brne	.-22     	; 0x1530 <__ultoa_invert+0x6c>
    1546:	ea cf       	rjmp	.-44     	; 0x151c <__ultoa_invert+0x58>
    1548:	b4 e0       	ldi	r27, 0x04	; 4
    154a:	a6 95       	lsr	r26
    154c:	97 95       	ror	r25
    154e:	87 95       	ror	r24
    1550:	77 95       	ror	r23
    1552:	67 95       	ror	r22
    1554:	ba 95       	dec	r27
    1556:	c9 f7       	brne	.-14     	; 0x154a <__ultoa_invert+0x86>
    1558:	00 97       	sbiw	r24, 0x00	; 0
    155a:	61 05       	cpc	r22, r1
    155c:	71 05       	cpc	r23, r1
    155e:	08 95       	ret
    1560:	9b 01       	movw	r18, r22
    1562:	ac 01       	movw	r20, r24
    1564:	0a 2e       	mov	r0, r26
    1566:	06 94       	lsr	r0
    1568:	57 95       	ror	r21
    156a:	47 95       	ror	r20
    156c:	37 95       	ror	r19
    156e:	27 95       	ror	r18
    1570:	ba 95       	dec	r27
    1572:	c9 f7       	brne	.-14     	; 0x1566 <__ultoa_invert+0xa2>
    1574:	62 0f       	add	r22, r18
    1576:	73 1f       	adc	r23, r19
    1578:	84 1f       	adc	r24, r20
    157a:	95 1f       	adc	r25, r21
    157c:	a0 1d       	adc	r26, r0
    157e:	08 95       	ret

00001580 <__prologue_saves__>:
    1580:	2f 92       	push	r2
    1582:	3f 92       	push	r3
    1584:	4f 92       	push	r4
    1586:	5f 92       	push	r5
    1588:	6f 92       	push	r6
    158a:	7f 92       	push	r7
    158c:	8f 92       	push	r8
    158e:	9f 92       	push	r9
    1590:	af 92       	push	r10
    1592:	bf 92       	push	r11
    1594:	cf 92       	push	r12
    1596:	df 92       	push	r13
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	ca 1b       	sub	r28, r26
    15aa:	db 0b       	sbc	r29, r27
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	09 94       	ijmp

000015b8 <__epilogue_restores__>:
    15b8:	2a 88       	ldd	r2, Y+18	; 0x12
    15ba:	39 88       	ldd	r3, Y+17	; 0x11
    15bc:	48 88       	ldd	r4, Y+16	; 0x10
    15be:	5f 84       	ldd	r5, Y+15	; 0x0f
    15c0:	6e 84       	ldd	r6, Y+14	; 0x0e
    15c2:	7d 84       	ldd	r7, Y+13	; 0x0d
    15c4:	8c 84       	ldd	r8, Y+12	; 0x0c
    15c6:	9b 84       	ldd	r9, Y+11	; 0x0b
    15c8:	aa 84       	ldd	r10, Y+10	; 0x0a
    15ca:	b9 84       	ldd	r11, Y+9	; 0x09
    15cc:	c8 84       	ldd	r12, Y+8	; 0x08
    15ce:	df 80       	ldd	r13, Y+7	; 0x07
    15d0:	ee 80       	ldd	r14, Y+6	; 0x06
    15d2:	fd 80       	ldd	r15, Y+5	; 0x05
    15d4:	0c 81       	ldd	r16, Y+4	; 0x04
    15d6:	1b 81       	ldd	r17, Y+3	; 0x03
    15d8:	aa 81       	ldd	r26, Y+2	; 0x02
    15da:	b9 81       	ldd	r27, Y+1	; 0x01
    15dc:	ce 0f       	add	r28, r30
    15de:	d1 1d       	adc	r29, r1
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	ed 01       	movw	r28, r26
    15ec:	08 95       	ret

000015ee <_exit>:
    15ee:	f8 94       	cli

000015f0 <__stop_program>:
    15f0:	ff cf       	rjmp	.-2      	; 0x15f0 <__stop_program>
