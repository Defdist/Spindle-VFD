
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001688  0000171c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006c  00800104  00800104  00001720  2**0
                  ALLOC
  3 .debug_aranges 00000270  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007c8  00000000  00000000  00001990  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000155f  00000000  00000000  00002158  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076c  00000000  00000000  000036b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013eb  00000000  00000000  00003e23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00005210  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000858  00000000  00000000  00005610  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a3f  00000000  00000000  00005e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000238  00000000  00000000  000068a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
//! @brief set type of regulation
void mc_set_speed_loop(){regulation_type = SPEED_LOOP;}


//! @brief set type of regulation
void mc_set_current_loop(){regulation_type = CURRENT_LOOP;}
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
 * The timer 0 is used to generate an IT when an overflow occurs
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
       4:	0c 94 a5 04 	jmp	0x94a	; 0x94a <__vector_1>
         return FALSE;
      }
      str1++;str2++;
   }
   return TRUE;
}
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 2d 04 	jmp	0x85a	; 0x85a <__vector_3>
      10:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      14:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_5>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a7 02 	jmp	0x54e	; 0x54e <__vector_12>
      34:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 b2 03 	jmp	0x764	; 0x764 <__vector_17>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_23>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 45 03 	jmp	0x68a	; 0x68a <__vector_27>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>

0000007c <str_run>:
      7c:	72 75 00                                            ru.

0000007f <str_stop>:
      7f:	73 74 00                                            st.

00000082 <str_help>:
      82:	68 65 6c 70 00                                      help.

00000087 <str_forward>:
      87:	66 77 00                                            fw.

0000008a <str_backward>:
      8a:	62 77 00                                            bw.

0000008d <str_set_speed>:
      8d:	73 73 00                                            ss.

00000090 <str_get_id>:
      90:	67 69 00                                            gi.

00000093 <str_get_status0>:
      93:	67 30 00                                            g0.

00000096 <str_get_status1>:
      96:	67 31 00                                            g1.

00000099 <msg_prompt>:
      99:	0d 3e 00                                            .>.

0000009c <msg_welcome>:
      9c:	0d 41 54 4d 45 4c 20 4d 6f 74 6f 72 20 43 6f 6e     .ATMEL Motor Con
      ac:	74 72 6f 6c 20 49 6e 74 65 72 66 61 63 65 00        trol Interface.

000000bb <msg_help>:
      bb:	0d 72 75 20 3a 20 72 75 6e 0d 73 74 20 3a 20 73     .ru : run.st : s
      cb:	74 6f 70 0d 66 77 20 3a 20 66 6f 72 77 61 72 64     top.fw : forward
      db:	0d 62 77 20 3a 20 62 61 63 6b 77 61 72 64 0d 73     .bw : backward.s
      eb:	73 20 3a 20 73 65 74 20 73 70 65 65 64 0d 67 69     s : set speed.gi
      fb:	20 3a 20 67 65 74 20 69 64 00                        : get id.

00000105 <msg_er_cmd_not_found>:
     105:	55 6e 6b 6e 6f 77 6e 20 43 6f 6d 6d 61 6e 64 00     Unknown Command.
	...

00000116 <__ctors_end>:
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d8 e0       	ldi	r29, 0x08	; 8
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
     122:	11 e0       	ldi	r17, 0x01	; 1
     124:	a0 e0       	ldi	r26, 0x00	; 0
     126:	b1 e0       	ldi	r27, 0x01	; 1
     128:	e8 e8       	ldi	r30, 0x88	; 136
     12a:	f6 e1       	ldi	r31, 0x16	; 22
     12c:	02 c0       	rjmp	.+4      	; 0x132 <.do_copy_data_start>

0000012e <.do_copy_data_loop>:
     12e:	05 90       	lpm	r0, Z+
     130:	0d 92       	st	X+, r0

00000132 <.do_copy_data_start>:
     132:	a4 30       	cpi	r26, 0x04	; 4
     134:	b1 07       	cpc	r27, r17
     136:	d9 f7       	brne	.-10     	; 0x12e <.do_copy_data_loop>

00000138 <__do_clear_bss>:
     138:	11 e0       	ldi	r17, 0x01	; 1
     13a:	a4 e0       	ldi	r26, 0x04	; 4
     13c:	b1 e0       	ldi	r27, 0x01	; 1
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a0 37       	cpi	r26, 0x70	; 112
     144:	b1 07       	cpc	r27, r17
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 ba 00 	call	0x174	; 0x174 <main>
     14c:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <ascii_to_bin>:
//! @return none
//!
//!/
U8 ascii_to_bin (U8 c)
{
  if (c>='a') return(c-('a'-0x0A));
     154:	81 36       	cpi	r24, 0x61	; 97
     156:	10 f0       	brcs	.+4      	; 0x15c <ascii_to_bin+0x8>
     158:	87 55       	subi	r24, 0x57	; 87
     15a:	08 95       	ret
  if (c>='A') return(c-('A'-0x0A));
     15c:	81 34       	cpi	r24, 0x41	; 65
     15e:	10 f0       	brcs	.+4      	; 0x164 <ascii_to_bin+0x10>
     160:	87 53       	subi	r24, 0x37	; 55
     162:	08 95       	ret
  return(c-'0');
     164:	80 53       	subi	r24, 0x30	; 48
}
     166:	08 95       	ret

00000168 <bin_to_ascii>:
//! @return none
//!
//!/
U8 bin_to_ascii (U8 c)
{
  if (c>=0x0A) return (c+('A'-0x0A));
     168:	8a 30       	cpi	r24, 0x0A	; 10
     16a:	10 f0       	brcs	.+4      	; 0x170 <bin_to_ascii+0x8>
     16c:	89 5c       	subi	r24, 0xC9	; 201
     16e:	08 95       	ret
  return (c+'0');
     170:	80 5d       	subi	r24, 0xD0	; 208
}
     172:	08 95       	ret

00000174 <main>:
//!
int main(void)
{

  // init motor
  mc_init();  // launch initialization of the motor application
     174:	0e 94 56 05 	call	0xaac	; 0xaac <mc_init>
  
  // Initialyze the communication system for External Command through Uart
  ushell_task_init();
     178:	0e 94 03 08 	call	0x1006	; 0x1006 <ushell_task_init>

  // Start the motor
  mci_set_ref_speed(0);
     17c:	80 e0       	ldi	r24, 0x00	; 0
     17e:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <mci_set_ref_speed>
  mci_run();
     182:	0e 94 72 05 	call	0xae4	; 0xae4 <mci_run>
  while(1)
  {
    // Launch regulation loop
    // Timer 1 generate an IT (g_tick) all 250us
    // Sampling period = n * 250us
    if (g_tick == TRUE)
     186:	80 91 1a 01 	lds	r24, 0x011A
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	29 f5       	brne	.+74     	; 0x1d8 <main+0x64>
    {
      g_tick = FALSE;
     18e:	10 92 1a 01 	sts	0x011A, r1

      // Get Current and potentiometer value
      mc_ADC_Scheduler();
     192:	0e 94 b6 02 	call	0x56c	; 0x56c <mc_ADC_Scheduler>

      g_regulation_period += 1;
     196:	80 91 04 01 	lds	r24, 0x0104
     19a:	90 91 05 01 	lds	r25, 0x0105
     19e:	01 96       	adiw	r24, 0x01	; 1
     1a0:	90 93 05 01 	sts	0x0105, r25
     1a4:	80 93 04 01 	sts	0x0104, r24
      if ( g_regulation_period >= 40 ) //n * 250us = Te
     1a8:	88 97       	sbiw	r24, 0x28	; 40
     1aa:	70 f0       	brcs	.+28     	; 0x1c8 <main+0x54>
      {
        g_regulation_period = 0;
     1ac:	10 92 05 01 	sts	0x0105, r1
     1b0:	10 92 04 01 	sts	0x0104, r1

        if (ushell_active == FALSE)
     1b4:	80 91 2a 01 	lds	r24, 0x012A
     1b8:	88 23       	and	r24, r24
     1ba:	21 f4       	brne	.+8      	; 0x1c4 <main+0x50>
        {
          // Set User Speed Command with potentiometer
          mci_set_ref_speed(mc_get_potentiometer_value());
     1bc:	0e 94 50 05 	call	0xaa0	; 0xaa0 <mc_get_potentiometer_value>
     1c0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <mci_set_ref_speed>
        }
        mc_regulation_loop(); // launch regulation loop
     1c4:	0e 94 bc 01 	call	0x378	; 0x378 <mc_regulation_loop>
      }
      mc_duty_cycle(mc_get_duty_cycle());
     1c8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mc_get_duty_cycle>
     1cc:	0e 94 2f 02 	call	0x45e	; 0x45e <mc_duty_cycle>
      ushell_task();
     1d0:	0e 94 74 07 	call	0xee8	; 0xee8 <ushell_task>
      mc_inrush_task();       // manage the inrush current
     1d4:	0e 94 06 03 	call	0x60c	; 0x60c <mc_inrush_task>

    }
    if (overcurrent==0)
     1d8:	80 91 18 01 	lds	r24, 0x0118
     1dc:	88 23       	and	r24, r24
     1de:	11 f4       	brne	.+4      	; 0x1e4 <main+0x70>
    {
      Set_PC7();
     1e0:	47 9a       	sbi	0x08, 7	; 8
     1e2:	d1 cf       	rjmp	.-94     	; 0x186 <main+0x12>
    }
    else
    {
      Clear_PC7();
     1e4:	47 98       	cbi	0x08, 7	; 8
     1e6:	cf cf       	rjmp	.-98     	; 0x186 <main+0x12>

000001e8 <mc_get_duty_cycle>:

//! @brief set type of regulation
U8 mc_get_duty_cycle()
{
  return duty_cycle;
}
     1e8:	80 91 06 01 	lds	r24, 0x0106
     1ec:	08 95       	ret

000001ee <mc_control_current>:
* need parameter : Kp_cur, Ki_cur ,Kd_cur and K_cur_scal in config_motor.h
* need to call in Te ms
* @return value of current, duty cycle on 8 bits
*/
U8 mc_control_current(U8 cur_cmd)
{
     1ee:	1f 93       	push	r17
     1f0:	18 2f       	mov	r17, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  cur_error = cur_cmd - (mci_get_measured_current());// value -255 <=> 255
     1f2:	0e 94 07 05 	call	0xa0e	; 0xa0e <mci_get_measured_current>
     1f6:	41 2f       	mov	r20, r17
     1f8:	50 e0       	ldi	r21, 0x00	; 0
     1fa:	48 1b       	sub	r20, r24
     1fc:	59 0b       	sbc	r21, r25
     1fe:	50 93 11 01 	sts	0x0111, r21
     202:	40 93 10 01 	sts	0x0110, r20

  // proportional term calculation
  cur_proportional = Kp_cur*cur_error;
     206:	50 93 17 01 	sts	0x0117, r21
     20a:	40 93 16 01 	sts	0x0116, r20

  // integral term calculation
  cur_integral = cur_integral + cur_error;
     20e:	80 91 12 01 	lds	r24, 0x0112
     212:	90 91 13 01 	lds	r25, 0x0113
     216:	84 0f       	add	r24, r20
     218:	95 1f       	adc	r25, r21
     21a:	90 93 13 01 	sts	0x0113, r25
     21e:	80 93 12 01 	sts	0x0112, r24

  if(cur_integral >  255) cur_integral =  255;
     222:	8f 3f       	cpi	r24, 0xFF	; 255
     224:	91 05       	cpc	r25, r1
     226:	39 f0       	breq	.+14     	; 0x236 <mc_control_current+0x48>
     228:	34 f0       	brlt	.+12     	; 0x236 <mc_control_current+0x48>
     22a:	8f ef       	ldi	r24, 0xFF	; 255
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	90 93 13 01 	sts	0x0113, r25
     232:	80 93 12 01 	sts	0x0112, r24
  if(cur_integral < -255) cur_integral = -255;
     236:	80 91 12 01 	lds	r24, 0x0112
     23a:	90 91 13 01 	lds	r25, 0x0113
     23e:	81 50       	subi	r24, 0x01	; 1
     240:	9f 4f       	sbci	r25, 0xFF	; 255
     242:	34 f4       	brge	.+12     	; 0x250 <mc_control_current+0x62>
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	9f ef       	ldi	r25, 0xFF	; 255
     248:	90 93 13 01 	sts	0x0113, r25
     24c:	80 93 12 01 	sts	0x0112, r24

  cur_integ = Ki_cur*cur_integral;
     250:	20 91 12 01 	lds	r18, 0x0112
     254:	30 91 13 01 	lds	r19, 0x0113
     258:	c9 01       	movw	r24, r18
     25a:	88 0f       	add	r24, r24
     25c:	99 1f       	adc	r25, r25
     25e:	82 0f       	add	r24, r18
     260:	93 1f       	adc	r25, r19
     262:	90 93 15 01 	sts	0x0115, r25
     266:	80 93 14 01 	sts	0x0114, r24
  cur_der = Kd_cur*cur_derivative;

  last_cur_error = cur_error;*/

  // Duty Cycle calculation
  increment = cur_proportional + cur_integ;
     26a:	48 0f       	add	r20, r24
     26c:	59 1f       	adc	r21, r25
     26e:	ca 01       	movw	r24, r20
     270:	aa 27       	eor	r26, r26
     272:	97 fd       	sbrc	r25, 7
     274:	a0 95       	com	r26
     276:	ba 2f       	mov	r27, r26
  //increment += cur_der;
  increment = increment >> K_cur_scal;
     278:	24 e0       	ldi	r18, 0x04	; 4
     27a:	b5 95       	asr	r27
     27c:	a7 95       	ror	r26
     27e:	97 95       	ror	r25
     280:	87 95       	ror	r24
     282:	2a 95       	dec	r18
     284:	d1 f7       	brne	.-12     	; 0x27a <mc_control_current+0x8c>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     286:	8f 3f       	cpi	r24, 0xFF	; 255
     288:	91 05       	cpc	r25, r1
     28a:	a1 05       	cpc	r26, r1
     28c:	b1 05       	cpc	r27, r1
     28e:	14 f0       	brlt	.+4      	; 0x294 <mc_control_current+0xa6>
     290:	8f ef       	ldi	r24, 0xFF	; 255
     292:	06 c0       	rjmp	.+12     	; 0x2a0 <mc_control_current+0xb2>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     294:	18 16       	cp	r1, r24
     296:	19 06       	cpc	r1, r25
     298:	1a 06       	cpc	r1, r26
     29a:	1b 06       	cpc	r1, r27
     29c:	0c f0       	brlt	.+2      	; 0x2a0 <mc_control_current+0xb2>
     29e:	80 e0       	ldi	r24, 0x00	; 0
    else Duty = (U8)(increment);
  }

  // return Duty Cycle
  return Duty;
}
     2a0:	1f 91       	pop	r17
     2a2:	08 95       	ret

000002a4 <mc_control_speed>:
* need parameter : Kp_speed, Ki_speed ,Kd_speed and K_speed_scal in config_motor.h
* need to call in Te ms
* @return value of speed, duty cycle on 8 bits
*/
U8 mc_control_speed(U8 speed_cmd)
{
     2a4:	0f 93       	push	r16
     2a6:	1f 93       	push	r17
     2a8:	08 2f       	mov	r16, r24
  U8 Duty = 0;
  S32 increment = 0;

  // Error calculation
  speed_error = speed_cmd - mci_get_measured_speed();// value -255 <=> 255
     2aa:	0e 94 04 05 	call	0xa08	; 0xa08 <mci_get_measured_speed>
     2ae:	10 e0       	ldi	r17, 0x00	; 0
     2b0:	08 1b       	sub	r16, r24
     2b2:	11 09       	sbc	r17, r1
     2b4:	10 93 09 01 	sts	0x0109, r17
     2b8:	00 93 08 01 	sts	0x0108, r16

  // proportional term calculation
  speed_proportional = Kp_speed*speed_error;
     2bc:	c8 01       	movw	r24, r16
     2be:	88 0f       	add	r24, r24
     2c0:	99 1f       	adc	r25, r25
     2c2:	a8 01       	movw	r20, r16
     2c4:	a5 e0       	ldi	r26, 0x05	; 5
     2c6:	44 0f       	add	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	aa 95       	dec	r26
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <mc_control_speed+0x22>
     2ce:	48 1b       	sub	r20, r24
     2d0:	59 0b       	sbc	r21, r25
     2d2:	50 93 0f 01 	sts	0x010F, r21
     2d6:	40 93 0e 01 	sts	0x010E, r20
  if(speed_integral >  255) speed_integral =  255;
  if(speed_integral < -255) speed_integral = -255;

  speed_integ = Ki_speed*speed_integral;
*/
  speed_integral = Ki_speed*(speed_integral + speed_error);
     2da:	80 91 0a 01 	lds	r24, 0x010A
     2de:	90 91 0b 01 	lds	r25, 0x010B
     2e2:	80 0f       	add	r24, r16
     2e4:	91 1f       	adc	r25, r17
     2e6:	9c 01       	movw	r18, r24
     2e8:	f5 e0       	ldi	r31, 0x05	; 5
     2ea:	22 0f       	add	r18, r18
     2ec:	33 1f       	adc	r19, r19
     2ee:	fa 95       	dec	r31
     2f0:	e1 f7       	brne	.-8      	; 0x2ea <mc_control_speed+0x46>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	28 1b       	sub	r18, r24
     2f8:	39 0b       	sbc	r19, r25
     2fa:	30 93 0b 01 	sts	0x010B, r19
     2fe:	20 93 0a 01 	sts	0x010A, r18

  if(speed_integral >  255) speed_integral =  255;
     302:	2f 3f       	cpi	r18, 0xFF	; 255
     304:	31 05       	cpc	r19, r1
     306:	39 f0       	breq	.+14     	; 0x316 <mc_control_speed+0x72>
     308:	34 f0       	brlt	.+12     	; 0x316 <mc_control_speed+0x72>
     30a:	8f ef       	ldi	r24, 0xFF	; 255
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	90 93 0b 01 	sts	0x010B, r25
     312:	80 93 0a 01 	sts	0x010A, r24
  if(speed_integral < -255) speed_integral = -255;
     316:	80 91 0a 01 	lds	r24, 0x010A
     31a:	90 91 0b 01 	lds	r25, 0x010B
     31e:	81 50       	subi	r24, 0x01	; 1
     320:	9f 4f       	sbci	r25, 0xFF	; 255
     322:	34 f4       	brge	.+12     	; 0x330 <mc_control_speed+0x8c>
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	9f ef       	ldi	r25, 0xFF	; 255
     328:	90 93 0b 01 	sts	0x010B, r25
     32c:	80 93 0a 01 	sts	0x010A, r24
  speed_der = Kd_speed*speed_derivative;

  last_speed_error = speed_error;*/

  // Duty Cycle calculation
  increment = speed_proportional + speed_integ;
     330:	80 91 0c 01 	lds	r24, 0x010C
     334:	90 91 0d 01 	lds	r25, 0x010D
     338:	84 0f       	add	r24, r20
     33a:	95 1f       	adc	r25, r21
     33c:	9c 01       	movw	r18, r24
     33e:	44 27       	eor	r20, r20
     340:	37 fd       	sbrc	r19, 7
     342:	40 95       	com	r20
     344:	54 2f       	mov	r21, r20
  //increment += speed_der;
  increment = increment >> K_speed_scal;
     346:	74 e0       	ldi	r23, 0x04	; 4
     348:	55 95       	asr	r21
     34a:	47 95       	ror	r20
     34c:	37 95       	ror	r19
     34e:	27 95       	ror	r18
     350:	7a 95       	dec	r23
     352:	d1 f7       	brne	.-12     	; 0x348 <mc_control_speed+0xa4>

  // Variable saturation
  if(increment >= (S16)(255)) Duty = 255;
     354:	2f 3f       	cpi	r18, 0xFF	; 255
     356:	31 05       	cpc	r19, r1
     358:	41 05       	cpc	r20, r1
     35a:	51 05       	cpc	r21, r1
     35c:	14 f0       	brlt	.+4      	; 0x362 <mc_control_speed+0xbe>
     35e:	8f ef       	ldi	r24, 0xFF	; 255
     360:	08 c0       	rjmp	.+16     	; 0x372 <mc_control_speed+0xce>
  else
  {
    if(increment <= (S16)(0)) Duty =   0;
     362:	12 16       	cp	r1, r18
     364:	13 06       	cpc	r1, r19
     366:	14 06       	cpc	r1, r20
     368:	15 06       	cpc	r1, r21
     36a:	14 f0       	brlt	.+4      	; 0x370 <mc_control_speed+0xcc>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	01 c0       	rjmp	.+2      	; 0x372 <mc_control_speed+0xce>
    else Duty = (U8)(increment);
     370:	82 2f       	mov	r24, r18
  }

  // return Duty Cycle
  return Duty;
}
     372:	1f 91       	pop	r17
     374:	0f 91       	pop	r16
     376:	08 95       	ret

00000378 <mc_regulation_loop>:

//! @brief launch speed control or no regulation
//! @post new duty cycle on PWM
void mc_regulation_loop()
{
  switch(regulation_type)
     378:	80 91 07 01 	lds	r24, 0x0107
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	41 f0       	breq	.+16     	; 0x390 <mc_regulation_loop+0x18>
     380:	81 30       	cpi	r24, 0x01	; 1
     382:	18 f0       	brcs	.+6      	; 0x38a <mc_regulation_loop+0x12>
     384:	82 30       	cpi	r24, 0x02	; 2
     386:	91 f4       	brne	.+36     	; 0x3ac <mc_regulation_loop+0x34>
     388:	0b c0       	rjmp	.+22     	; 0x3a0 <mc_regulation_loop+0x28>
  {
    case OPEN_LOOP     : duty_cycle = mci_get_ref_speed();break;
     38a:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <mci_get_ref_speed>
     38e:	05 c0       	rjmp	.+10     	; 0x39a <mc_regulation_loop+0x22>
    case SPEED_LOOP    : duty_cycle = mc_control_speed(2*mci_get_ref_speed());break;
     390:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <mci_get_ref_speed>
     394:	88 0f       	add	r24, r24
     396:	0e 94 52 01 	call	0x2a4	; 0x2a4 <mc_control_speed>
     39a:	80 93 06 01 	sts	0x0106, r24
     39e:	08 95       	ret
    case CURRENT_LOOP  : duty_cycle = mc_control_current(mc_get_potentiometer_value());break;
     3a0:	0e 94 50 05 	call	0xaa0	; 0xaa0 <mc_get_potentiometer_value>
     3a4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <mc_control_current>
     3a8:	80 93 06 01 	sts	0x0106, r24
     3ac:	08 95       	ret

000003ae <PSC_Init>:


//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
     3ae:	10 92 a1 00 	sts	0x00A1, r1
     3b2:	10 92 a0 00 	sts	0x00A0, r1
     3b6:	10 92 a3 00 	sts	0x00A3, r1
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	80 93 a2 00 	sts	0x00A2, r24
     3c0:	10 92 a5 00 	sts	0x00A5, r1
     3c4:	10 92 a4 00 	sts	0x00A4, r1
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
     3c8:	10 92 a7 00 	sts	0x00A7, r1
     3cc:	10 92 a6 00 	sts	0x00A6, r1
     3d0:	10 92 a9 00 	sts	0x00A9, r1
     3d4:	80 93 a8 00 	sts	0x00A8, r24
     3d8:	10 92 ab 00 	sts	0x00AB, r1
     3dc:	10 92 aa 00 	sts	0x00AA, r1
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
     3e0:	10 92 ad 00 	sts	0x00AD, r1
     3e4:	10 92 ac 00 	sts	0x00AC, r1
     3e8:	10 92 af 00 	sts	0x00AF, r1
     3ec:	80 93 ae 00 	sts	0x00AE, r24
     3f0:	10 92 b1 00 	sts	0x00B1, r1
     3f4:	10 92 b0 00 	sts	0x00B0, r1
   Psc_set_register_RB(RB_VAL);
     3f8:	10 92 b3 00 	sts	0x00B3, r1
     3fc:	8f ef       	ldi	r24, 0xFF	; 255
     3fe:	80 93 b2 00 	sts	0x00B2, r24

   Psc_config();
     402:	84 e1       	ldi	r24, 0x14	; 20
     404:	80 93 b5 00 	sts	0x00B5, r24

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
     408:	98 e9       	ldi	r25, 0x98	; 152
     40a:	90 93 b8 00 	sts	0x00B8, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
     40e:	88 ef       	ldi	r24, 0xF8	; 248
     410:	80 93 b9 00 	sts	0x00B9, r24
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
     414:	90 93 ba 00 	sts	0x00BA, r25
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
     418:	8f e0       	ldi	r24, 0x0F	; 15
     41a:	80 93 bc 00 	sts	0x00BC, r24
   PIM = (1<<PEVE1);
     41e:	84 e0       	ldi	r24, 0x04	; 4
     420:	80 93 bb 00 	sts	0x00BB, r24

   Psc_run();
     424:	81 e2       	ldi	r24, 0x21	; 33
     426:	80 93 b7 00 	sts	0x00B7, r24
}
     42a:	08 95       	ret

0000042c <mc_get_hall>:
* @pre configuration of port PB and PD
* @post new value of position
*/
Hall_Position mc_get_hall(void)
{
  return HALL_SENSOR_VALUE();
     42c:	49 b1       	in	r20, 0x09	; 9
     42e:	86 b1       	in	r24, 0x06	; 6
     430:	29 b1       	in	r18, 0x09	; 9
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	80 74       	andi	r24, 0x40	; 64
     436:	90 70       	andi	r25, 0x00	; 0
     438:	35 e0       	ldi	r19, 0x05	; 5
     43a:	95 95       	asr	r25
     43c:	87 95       	ror	r24
     43e:	3a 95       	dec	r19
     440:	e1 f7       	brne	.-8      	; 0x43a <mc_get_hall+0xe>
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	20 72       	andi	r18, 0x20	; 32
     446:	30 70       	andi	r19, 0x00	; 0
     448:	93 e0       	ldi	r25, 0x03	; 3
     44a:	35 95       	asr	r19
     44c:	27 95       	ror	r18
     44e:	9a 95       	dec	r25
     450:	e1 f7       	brne	.-8      	; 0x44a <mc_get_hall+0x1e>
     452:	82 2b       	or	r24, r18
     454:	44 1f       	adc	r20, r20
     456:	44 27       	eor	r20, r20
     458:	44 1f       	adc	r20, r20
}
     45a:	84 2b       	or	r24, r20
     45c:	08 95       	ret

0000045e <mc_duty_cycle>:
#if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
   U8 dutydt;   /* duty with dead time */
   if (duty >= DEADTIME) dutydt = duty - DEADTIME;
#endif
   
   Psc_lock();
     45e:	e5 eb       	ldi	r30, 0xB5	; 181
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	94 e3       	ldi	r25, 0x34	; 52
     464:	90 83       	st	Z, r25

  // Duty = 0   => Duty Cycle   0%
  // Duty = 255 => Duty Cycle 100%
 
#if (CURRENT_DECAY == FAST_DECAY)
   Psc_set_module_A(duty,A_RA_VAL,duty);
     466:	10 92 a1 00 	sts	0x00A1, r1
     46a:	80 93 a0 00 	sts	0x00A0, r24
     46e:	10 92 a3 00 	sts	0x00A3, r1
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	90 93 a2 00 	sts	0x00A2, r25
     478:	10 92 a5 00 	sts	0x00A5, r1
     47c:	80 93 a4 00 	sts	0x00A4, r24
   Psc_set_module_B(duty,B_RA_VAL,duty);
     480:	10 92 a7 00 	sts	0x00A7, r1
     484:	80 93 a6 00 	sts	0x00A6, r24
     488:	10 92 a9 00 	sts	0x00A9, r1
     48c:	90 93 a8 00 	sts	0x00A8, r25
     490:	10 92 ab 00 	sts	0x00AB, r1
     494:	80 93 aa 00 	sts	0x00AA, r24
   Psc_set_module_C(duty,C_RA_VAL,duty);
     498:	10 92 ad 00 	sts	0x00AD, r1
     49c:	80 93 ac 00 	sts	0x00AC, r24
     4a0:	10 92 af 00 	sts	0x00AF, r1
     4a4:	90 93 ae 00 	sts	0x00AE, r25
     4a8:	10 92 b1 00 	sts	0x00B1, r1
     4ac:	80 93 b0 00 	sts	0x00B0, r24
   Psc_set_module_B(duty,B_RA_VAL,0);
   Psc_set_module_C(duty,C_RA_VAL,0);
#endif
#endif
   
   Psc_unlock();
     4b0:	84 e1       	ldi	r24, 0x14	; 20
     4b2:	80 83       	st	Z, r24
}
     4b4:	08 95       	ret

000004b6 <mc_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_init_timer1(void)
{
  TCCR1A = 0; //Normal port operation + Mode CTC
     4b6:	10 92 80 00 	sts	0x0080, r1
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + prescaler 64
     4ba:	8b e0       	ldi	r24, 0x0B	; 11
     4bc:	80 93 81 00 	sts	0x0081, r24
  TCCR1C = 0;
     4c0:	10 92 82 00 	sts	0x0082, r1
  OCR1AH = 0;
     4c4:	10 92 89 00 	sts	0x0089, r1
  OCR1AL = 63; // f ocra = 16MHz %64 %63
     4c8:	8f e3       	ldi	r24, 0x3F	; 63
     4ca:	80 93 88 00 	sts	0x0088, r24
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
     4ce:	82 e0       	ldi	r24, 0x02	; 2
     4d0:	80 93 6f 00 	sts	0x006F, r24
}
     4d4:	08 95       	ret

000004d6 <mc_init_HW>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Warning Output Low for MOSFET Drivers
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
     4d6:	85 b1       	in	r24, 0x05	; 5
     4d8:	8c 73       	andi	r24, 0x3C	; 60
     4da:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
     4dc:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
     4de:	58 98       	cbi	0x0b, 0	; 11

  // PORT B :
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
     4e0:	83 ec       	ldi	r24, 0xC3	; 195
     4e2:	84 b9       	out	0x04, r24	; 4
  // PORT C :
  DDRC = (1<<DDC0);
     4e4:	21 e0       	ldi	r18, 0x01	; 1
     4e6:	27 b9       	out	0x07, r18	; 7
  // PORT D :
  DDRD = (1<<DDD0);
     4e8:	2a b9       	out	0x0a, r18	; 10
  
  Init_PC7(); /* PC7 is used to display the overcurrent */
     4ea:	3f 9a       	sbi	0x07, 7	; 7

  // Disable Digital Input for amplifier1
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D);
     4ec:	83 e0       	ldi	r24, 0x03	; 3
     4ee:	80 93 7f 00 	sts	0x007F, r24

  // Select the Vref Source
//  init_vref_source ();

//  init_adc();
  Adc_config();
     4f2:	90 ec       	ldi	r25, 0xC0	; 192
     4f4:	90 93 7c 00 	sts	0x007C, r25
     4f8:	8a e8       	ldi	r24, 0x8A	; 138
     4fa:	80 93 7a 00 	sts	0x007A, r24
     4fe:	90 93 7b 00 	sts	0x007B, r25
  Amp1_config();
     502:	8d e8       	ldi	r24, 0x8D	; 141
     504:	80 93 76 00 	sts	0x0076, r24
  
  // Be careful : initialize DAC and Over_Current before PWM.
  // DAC is used for oevr current level
  Dac_config();
     508:	85 e0       	ldi	r24, 0x05	; 5
     50a:	80 93 90 00 	sts	0x0090, r24
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
     50e:	84 ee       	ldi	r24, 0xE4	; 228
     510:	80 93 92 00 	sts	0x0092, r24
 * @pre None
 * @post Timer0 initialized.
*/
void mc_init_timer0(void)
{
  TCCR0A = 0;
     514:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
     51a:	20 93 6e 00 	sts	0x006E, r18
  Dac_config();
  /* set the overcurrent level */
  Dac_set_8_bits(IMAX);
    
  mc_init_timer0();
  mc_init_timer1();
     51e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <mc_init_timer1>

  Comp_0_config();
     522:	94 ec       	ldi	r25, 0xC4	; 196
     524:	90 93 94 00 	sts	0x0094, r25
  Comp_1_config();
     528:	85 e8       	ldi	r24, 0x85	; 133
     52a:	80 93 95 00 	sts	0x0095, r24
  Comp_2_config();
     52e:	90 93 96 00 	sts	0x0096, r25
  
  // Use PCINT14 to detect change on H2 sensor
  PCMSK1 = (1<<PCINT14);
     532:	80 e4       	ldi	r24, 0x40	; 64
     534:	80 93 6b 00 	sts	0x006B, r24
  PCICR = (1<<PCIE1);
     538:	82 e0       	ldi	r24, 0x02	; 2
     53a:	80 93 68 00 	sts	0x0068, r24

//  Start_pll_32_mega(); // Start the PLL and use the 32 MHz PLL output
  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
     53e:	86 e0       	ldi	r24, 0x06	; 6
     540:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
     542:	09 b4       	in	r0, 0x29	; 41
     544:	00 fe       	sbrs	r0, 0
     546:	fd cf       	rjmp	.-6      	; 0x542 <mc_init_HW+0x6c>


  // => PSCx_Init(Period_Half, Dutyx0_Half, Synchro, Dutyx1_Half)
  PSC_Init();
     548:	0e 94 d7 01 	call	0x3ae	; 0x3ae <PSC_Init>

}
     54c:	08 95       	ret

0000054e <__vector_12>:
  ISR(TIMER1_COMPA_vect)
#else
#pragma vector = TIMER1_COMPA_vect
__interrupt void launch_sampling_period(void)
#endif
{
     54e:	1f 92       	push	r1
     550:	0f 92       	push	r0
     552:	0f b6       	in	r0, 0x3f	; 63
     554:	0f 92       	push	r0
     556:	11 24       	eor	r1, r1
     558:	8f 93       	push	r24
  g_tick = TRUE;
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	80 93 1a 01 	sts	0x011A, r24
}
     560:	8f 91       	pop	r24
     562:	0f 90       	pop	r0
     564:	0f be       	out	0x3f, r0	; 63
     566:	0f 90       	pop	r0
     568:	1f 90       	pop	r1
     56a:	18 95       	reti

0000056c <mc_ADC_Scheduler>:

//! @brief Launch the scheduler for the ADC
//! @post Get results for Potentiometer and current values.
void mc_ADC_Scheduler(void)
{
  switch(State)
     56c:	90 91 1e 01 	lds	r25, 0x011E
     570:	91 30       	cpi	r25, 0x01	; 1
     572:	29 f1       	breq	.+74     	; 0x5be <mc_ADC_Scheduler+0x52>
     574:	91 30       	cpi	r25, 0x01	; 1
     576:	18 f0       	brcs	.+6      	; 0x57e <mc_ADC_Scheduler+0x12>
     578:	92 30       	cpi	r25, 0x02	; 2
     57a:	d1 f5       	brne	.+116    	; 0x5f0 <mc_ADC_Scheduler+0x84>
     57c:	06 c0       	rjmp	.+12     	; 0x58a <mc_ADC_Scheduler+0x1e>
  {
  case CONV_INIT :
    ADC_State = FREE;
     57e:	10 92 1f 01 	sts	0x011F, r1
    State = CONV_CURRENT;
     582:	82 e0       	ldi	r24, 0x02	; 2
     584:	80 93 1e 01 	sts	0x011E, r24
     588:	08 95       	ret
    break;

  case CONV_CURRENT :              /* previous state was CONV_CURRENT */
    if(ADC_State == FREE)
     58a:	80 91 1f 01 	lds	r24, 0x011F
     58e:	88 23       	and	r24, r24
     590:	79 f5       	brne	.+94     	; 0x5f0 <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     592:	81 e0       	ldi	r24, 0x01	; 1
     594:	80 93 1f 01 	sts	0x011F, r24
      State= CONV_POT;                        /* new state is CONV_POT */
     598:	80 93 1e 01 	sts	0x011E, r24
      Adc_left_adjust_result();
     59c:	80 91 7c 00 	lds	r24, 0x007C
     5a0:	80 62       	ori	r24, 0x20	; 32
     5a2:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_ISRC); /* get POT on ISRC input */
     5a6:	80 91 7c 00 	lds	r24, 0x007C
     5aa:	80 7e       	andi	r24, 0xE0	; 224
     5ac:	8d 60       	ori	r24, 0x0D	; 13
     5ae:	80 93 7c 00 	sts	0x007C, r24
     5b2:	80 91 7a 00 	lds	r24, 0x007A
     5b6:	80 64       	ori	r24, 0x40	; 64
     5b8:	80 93 7a 00 	sts	0x007A, r24
     5bc:	08 95       	ret
    }
    break;

  case CONV_POT :                           /* previous state was CONV_POT */
    if(ADC_State == FREE)
     5be:	80 91 1f 01 	lds	r24, 0x011F
     5c2:	88 23       	and	r24, r24
     5c4:	a9 f4       	brne	.+42     	; 0x5f0 <mc_ADC_Scheduler+0x84>
    {
      ADC_State = BUSY;
     5c6:	90 93 1f 01 	sts	0x011F, r25
      State = CONV_CURRENT;                   /* new state is CONV_CURRENT */
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	80 93 1e 01 	sts	0x011E, r24
      Adc_right_adjust_result();
     5d0:	80 91 7c 00 	lds	r24, 0x007C
     5d4:	8f 7d       	andi	r24, 0xDF	; 223
     5d6:	80 93 7c 00 	sts	0x007C, r24
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
     5da:	80 91 7c 00 	lds	r24, 0x007C
     5de:	80 7e       	andi	r24, 0xE0	; 224
     5e0:	8f 60       	ori	r24, 0x0F	; 15
     5e2:	80 93 7c 00 	sts	0x007C, r24
     5e6:	80 91 7a 00 	lds	r24, 0x007A
     5ea:	80 64       	ori	r24, 0x40	; 64
     5ec:	80 93 7a 00 	sts	0x007A, r24
     5f0:	08 95       	ret

000005f2 <mc_disable_during_inrush>:

//! @brief the purpose of this function is to disable \n
//!   the overcurrent detection during startup (inrush current) \n
void mc_disable_during_inrush(void)
{
  inrush_delay = (U16) 500;
     5f2:	84 ef       	ldi	r24, 0xF4	; 244
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	90 93 1d 01 	sts	0x011D, r25
     5fa:	80 93 1c 01 	sts	0x011C, r24
  inrush_mask_flag = TRUE;
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	80 93 1b 01 	sts	0x011B, r24
  Disable_over_current();
     604:	88 ef       	ldi	r24, 0xF8	; 248
     606:	80 93 b9 00 	sts	0x00B9, r24
}
     60a:	08 95       	ret

0000060c <mc_inrush_task>:

//! @brief the purpose of this function is to manage the delay \n
//!   used when the overcurrent detection is disabled \n
void mc_inrush_task(void)
{ 
  if (inrush_mask_flag == TRUE)
     60c:	80 91 1b 01 	lds	r24, 0x011B
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	81 f4       	brne	.+32     	; 0x634 <mc_inrush_task+0x28>
  {
    if (inrush_delay-- == 0)
     614:	80 91 1c 01 	lds	r24, 0x011C
     618:	90 91 1d 01 	lds	r25, 0x011D
     61c:	01 97       	sbiw	r24, 0x01	; 1
     61e:	90 93 1d 01 	sts	0x011D, r25
     622:	80 93 1c 01 	sts	0x011C, r24
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	29 f4       	brne	.+10     	; 0x634 <mc_inrush_task+0x28>
    {
      inrush_mask_flag = FALSE;
     62a:	10 92 1b 01 	sts	0x011B, r1
      Enable_over_current();
     62e:	8e ef       	ldi	r24, 0xFE	; 254
     630:	80 93 b9 00 	sts	0x00B9, r24
     634:	08 95       	ret

00000636 <__vector_5>:
  ISR(PSC_FAULT_vect)
#else
#pragma vector = PSC_FAULT_vect
__interrupt void mc_overcurrent_detect(void)
#endif
{
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	2f 93       	push	r18
     642:	3f 93       	push	r19
     644:	4f 93       	push	r20
     646:	5f 93       	push	r21
     648:	6f 93       	push	r22
     64a:	7f 93       	push	r23
     64c:	8f 93       	push	r24
     64e:	9f 93       	push	r25
     650:	af 93       	push	r26
     652:	bf 93       	push	r27
     654:	ef 93       	push	r30
     656:	ff 93       	push	r31
  PIFR = (1<<PEV1); // clear the interrupt
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	80 93 bc 00 	sts	0x00BC, r24
  overcurrent = TRUE;
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	80 93 18 01 	sts	0x0118, r24
  mci_stop();
     664:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mci_stop>
}
     668:	ff 91       	pop	r31
     66a:	ef 91       	pop	r30
     66c:	bf 91       	pop	r27
     66e:	af 91       	pop	r26
     670:	9f 91       	pop	r25
     672:	8f 91       	pop	r24
     674:	7f 91       	pop	r23
     676:	6f 91       	pop	r22
     678:	5f 91       	pop	r21
     67a:	4f 91       	pop	r20
     67c:	3f 91       	pop	r19
     67e:	2f 91       	pop	r18
     680:	0f 90       	pop	r0
     682:	0f be       	out	0x3f, r0	; 63
     684:	0f 90       	pop	r0
     686:	1f 90       	pop	r1
     688:	18 95       	reti

0000068a <__vector_27>:
  ISR(ADC_vect)
#else
#pragma vector = ADC_vect
__interrupt void ADC_end_of_conversion(void)
#endif
{
     68a:	1f 92       	push	r1
     68c:	0f 92       	push	r0
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	0f 92       	push	r0
     692:	11 24       	eor	r1, r1
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	ef 93       	push	r30
     6aa:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
     6ac:	80 91 7c 00 	lds	r24, 0x007C
     6b0:	80 7e       	andi	r24, 0xE0	; 224
     6b2:	82 61       	ori	r24, 0x12	; 18
     6b4:	80 93 7c 00 	sts	0x007C, r24
  if(State == CONV_POT) mc_set_potentiometer_value(Adc_get_8_bits_result());
     6b8:	80 91 1e 01 	lds	r24, 0x011E
     6bc:	81 30       	cpi	r24, 0x01	; 1
     6be:	21 f4       	brne	.+8      	; 0x6c8 <__vector_27+0x3e>
     6c0:	80 91 79 00 	lds	r24, 0x0079
     6c4:	0e 94 53 05 	call	0xaa6	; 0xaa6 <mc_set_potentiometer_value>
  if(State == CONV_CURRENT) mci_store_measured_current(Adc_get_10_bits_result());
     6c8:	80 91 1e 01 	lds	r24, 0x011E
     6cc:	82 30       	cpi	r24, 0x02	; 2
     6ce:	51 f4       	brne	.+20     	; 0x6e4 <__vector_27+0x5a>
     6d0:	30 91 78 00 	lds	r19, 0x0078
     6d4:	20 91 79 00 	lds	r18, 0x0079
     6d8:	92 2f       	mov	r25, r18
     6da:	80 e0       	ldi	r24, 0x00	; 0
     6dc:	83 0f       	add	r24, r19
     6de:	91 1d       	adc	r25, r1
     6e0:	0e 94 18 05 	call	0xa30	; 0xa30 <mci_store_measured_current>
  ADC_State = FREE;
     6e4:	10 92 1f 01 	sts	0x011F, r1
}
     6e8:	ff 91       	pop	r31
     6ea:	ef 91       	pop	r30
     6ec:	bf 91       	pop	r27
     6ee:	af 91       	pop	r26
     6f0:	9f 91       	pop	r25
     6f2:	8f 91       	pop	r24
     6f4:	7f 91       	pop	r23
     6f6:	6f 91       	pop	r22
     6f8:	5f 91       	pop	r21
     6fa:	4f 91       	pop	r20
     6fc:	3f 91       	pop	r19
     6fe:	2f 91       	pop	r18
     700:	0f 90       	pop	r0
     702:	0f be       	out	0x3f, r0	; 63
     704:	0f 90       	pop	r0
     706:	1f 90       	pop	r1
     708:	18 95       	reti

0000070a <mc_estimation_speed>:
void mc_estimation_speed(void)
{
  U16 timer_value;
  U32 new_measured_speed;

  if (g_mc_read_enable==TRUE)
     70a:	80 91 19 01 	lds	r24, 0x0119
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	41 f5       	brne	.+80     	; 0x762 <mc_estimation_speed+0x58>
  {
    // Two 8 bits variables are use to simulate a 16 bits timers
    timer_value = (ovf_timer<<8) + TCNT0;
     712:	26 b5       	in	r18, 0x26	; 38
     714:	90 91 20 01 	lds	r25, 0x0120
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	ac 01       	movw	r20, r24
     71c:	42 0f       	add	r20, r18
     71e:	51 1d       	adc	r21, r1
     720:	9a 01       	movw	r18, r20

    if (timer_value == 0) {timer_value += 1 ;} // warning DIV by 0
     722:	41 15       	cp	r20, r1
     724:	51 05       	cpc	r21, r1
     726:	11 f4       	brne	.+4      	; 0x72c <mc_estimation_speed+0x22>
     728:	21 e0       	ldi	r18, 0x01	; 1
     72a:	30 e0       	ldi	r19, 0x00	; 0
    new_measured_speed = K_SPEED / timer_value;
     72c:	40 e0       	ldi	r20, 0x00	; 0
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	68 e6       	ldi	r22, 0x68	; 104
     732:	75 e8       	ldi	r23, 0x85	; 133
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 3c 08 	call	0x1078	; 0x1078 <__divmodsi4>
        average = 0;
      }
      else count++;
    #else
      // else get the real speed
      mc_set_measured_speed(new_measured_speed);
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	8f 3f       	cpi	r24, 0xFF	; 255
     742:	91 05       	cpc	r25, r1
     744:	a1 05       	cpc	r26, r1
     746:	b1 05       	cpc	r27, r1
     748:	29 f0       	breq	.+10     	; 0x754 <mc_estimation_speed+0x4a>
     74a:	20 f0       	brcs	.+8      	; 0x754 <mc_estimation_speed+0x4a>
     74c:	8f ef       	ldi	r24, 0xFF	; 255
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	a0 e0       	ldi	r26, 0x00	; 0
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	0e 94 01 05 	call	0xa02	; 0xa02 <mc_set_measured_speed>
    #endif

    // Reset Timer 0 register and variables
    TCNT0=0x00;
     758:	16 bc       	out	0x26, r1	; 38
    ovf_timer = 0;
     75a:	10 92 20 01 	sts	0x0120, r1
    g_mc_read_enable=FALSE;
     75e:	10 92 19 01 	sts	0x0119, r1
     762:	08 95       	ret

00000764 <__vector_17>:
  ISR(TIMER0_OVF_vect)
#else
#pragma vector = TIMER0_OVF_vect
__interrupt void ovfl_timer0(void)
#endif
{
     764:	1f 92       	push	r1
     766:	0f 92       	push	r0
     768:	0f b6       	in	r0, 0x3f	; 63
     76a:	0f 92       	push	r0
     76c:	11 24       	eor	r1, r1
     76e:	2f 93       	push	r18
     770:	3f 93       	push	r19
     772:	4f 93       	push	r20
     774:	5f 93       	push	r21
     776:	6f 93       	push	r22
     778:	7f 93       	push	r23
     77a:	8f 93       	push	r24
     77c:	9f 93       	push	r25
     77e:	af 93       	push	r26
     780:	bf 93       	push	r27
     782:	ef 93       	push	r30
     784:	ff 93       	push	r31
  TCNT0=0x00;
     786:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
     788:	80 91 20 01 	lds	r24, 0x0120
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	80 93 20 01 	sts	0x0120, r24
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
     792:	84 36       	cpi	r24, 0x64	; 100
     794:	58 f0       	brcs	.+22     	; 0x7ac <__vector_17+0x48>
  {
    ovf_timer = 0;
     796:	10 92 20 01 	sts	0x0120, r1
    mc_set_measured_speed(0);
     79a:	80 e0       	ldi	r24, 0x00	; 0
     79c:	0e 94 01 05 	call	0xa02	; 0xa02 <mc_set_measured_speed>
    //if the motor was turning and no stop order
    // was given, motor run automatically.
    if(mci_motor_is_running())mci_retry_run();
     7a0:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <mci_motor_is_running>
     7a4:	88 23       	and	r24, r24
     7a6:	11 f0       	breq	.+4      	; 0x7ac <__vector_17+0x48>
     7a8:	0e 94 62 05 	call	0xac4	; 0xac4 <mci_retry_run>
  }
}
     7ac:	ff 91       	pop	r31
     7ae:	ef 91       	pop	r30
     7b0:	bf 91       	pop	r27
     7b2:	af 91       	pop	r26
     7b4:	9f 91       	pop	r25
     7b6:	8f 91       	pop	r24
     7b8:	7f 91       	pop	r23
     7ba:	6f 91       	pop	r22
     7bc:	5f 91       	pop	r21
     7be:	4f 91       	pop	r20
     7c0:	3f 91       	pop	r19
     7c2:	2f 91       	pop	r18
     7c4:	0f 90       	pop	r0
     7c6:	0f be       	out	0x3f, r0	; 63
     7c8:	0f 90       	pop	r0
     7ca:	1f 90       	pop	r1
     7cc:	18 95       	reti

000007ce <mc_switch_commutation>:
*   according to sensor or estimation position
*
* @param position (1 to 6) and direction (FORWARD or BACKWARD)
*/
void mc_switch_commutation(Hall_Position position)
{
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	18 2f       	mov	r17, r24
  // get the motor direction to commute the right switches.
  char direction = mci_get_motor_direction();
     7d4:	0e 94 fe 04 	call	0x9fc	; 0x9fc <mci_get_motor_direction>
     7d8:	08 2f       	mov	r16, r24

  // Switches are commuted only if the user start the motor
  if (mci_motor_is_running())
     7da:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <mci_motor_is_running>
     7de:	88 23       	and	r24, r24
     7e0:	89 f1       	breq	.+98     	; 0x844 <mc_switch_commutation+0x76>
  {
    mc_duty_cycle(mc_get_duty_cycle());
     7e2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mc_get_duty_cycle>
     7e6:	0e 94 2f 02 	call	0x45e	; 0x45e <mc_duty_cycle>
    switch(position)
     7ea:	13 30       	cpi	r17, 0x03	; 3
     7ec:	19 f1       	breq	.+70     	; 0x834 <mc_switch_commutation+0x66>
     7ee:	14 30       	cpi	r17, 0x04	; 4
     7f0:	28 f4       	brcc	.+10     	; 0x7fc <mc_switch_commutation+0x2e>
     7f2:	11 30       	cpi	r17, 0x01	; 1
     7f4:	51 f0       	breq	.+20     	; 0x80a <mc_switch_commutation+0x3c>
     7f6:	12 30       	cpi	r17, 0x02	; 2
     7f8:	69 f5       	brne	.+90     	; 0x854 <mc_switch_commutation+0x86>
     7fa:	16 c0       	rjmp	.+44     	; 0x828 <mc_switch_commutation+0x5a>
     7fc:	15 30       	cpi	r17, 0x05	; 5
     7fe:	41 f0       	breq	.+16     	; 0x810 <mc_switch_commutation+0x42>
     800:	15 30       	cpi	r17, 0x05	; 5
     802:	48 f0       	brcs	.+18     	; 0x816 <mc_switch_commutation+0x48>
     804:	16 30       	cpi	r17, 0x06	; 6
     806:	31 f5       	brne	.+76     	; 0x854 <mc_switch_commutation+0x86>
     808:	09 c0       	rjmp	.+18     	; 0x81c <mc_switch_commutation+0x4e>
    {
    // cases according to rotor position
      case HS_001:  if (direction==CCW)  {Set_Q5Q2();}
     80a:	01 30       	cpi	r16, 0x01	; 1
     80c:	49 f4       	brne	.+18     	; 0x820 <mc_switch_commutation+0x52>
     80e:	0a c0       	rjmp	.+20     	; 0x824 <mc_switch_commutation+0x56>
                    else                      {Set_Q1Q6();}
                    break;

      case HS_101:  if (direction==CCW)  {Set_Q3Q2();}
     810:	01 30       	cpi	r16, 0x01	; 1
     812:	61 f4       	brne	.+24     	; 0x82c <mc_switch_commutation+0x5e>
     814:	0d c0       	rjmp	.+26     	; 0x830 <mc_switch_commutation+0x62>
                    else                      {Set_Q1Q4();}
                    break;

      case HS_100:  if (direction==CCW)  {Set_Q3Q6();}
     816:	01 30       	cpi	r16, 0x01	; 1
     818:	79 f4       	brne	.+30     	; 0x838 <mc_switch_commutation+0x6a>
     81a:	10 c0       	rjmp	.+32     	; 0x83c <mc_switch_commutation+0x6e>
                    else                      {Set_Q5Q4();}
                    break;

      case HS_110:  if (direction==CCW)  {Set_Q1Q6();}
     81c:	01 30       	cpi	r16, 0x01	; 1
     81e:	11 f4       	brne	.+4      	; 0x824 <mc_switch_commutation+0x56>
     820:	81 e2       	ldi	r24, 0x21	; 33
     822:	0d c0       	rjmp	.+26     	; 0x83e <mc_switch_commutation+0x70>
                    else                      {Set_Q5Q2();}
     824:	82 e1       	ldi	r24, 0x12	; 18
     826:	0b c0       	rjmp	.+22     	; 0x83e <mc_switch_commutation+0x70>
                    break;

      case HS_010:  if (direction==CCW)  {Set_Q1Q4();}
     828:	01 30       	cpi	r16, 0x01	; 1
     82a:	11 f4       	brne	.+4      	; 0x830 <mc_switch_commutation+0x62>
     82c:	89 e0       	ldi	r24, 0x09	; 9
     82e:	07 c0       	rjmp	.+14     	; 0x83e <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q2();}
     830:	86 e0       	ldi	r24, 0x06	; 6
     832:	05 c0       	rjmp	.+10     	; 0x83e <mc_switch_commutation+0x70>
                    break;

      case HS_011:  if (direction==CCW)  {Set_Q5Q4();}
     834:	01 30       	cpi	r16, 0x01	; 1
     836:	11 f4       	brne	.+4      	; 0x83c <mc_switch_commutation+0x6e>
     838:	88 e1       	ldi	r24, 0x18	; 24
     83a:	01 c0       	rjmp	.+2      	; 0x83e <mc_switch_commutation+0x70>
                    else                      {Set_Q3Q6();}
     83c:	84 e2       	ldi	r24, 0x24	; 36
     83e:	80 93 b6 00 	sts	0x00B6, r24
     842:	08 c0       	rjmp	.+16     	; 0x854 <mc_switch_commutation+0x86>
      default : break;
      }
  }
  else
  {
    Set_none(); // all switches are switched OFF
     844:	10 92 b6 00 	sts	0x00B6, r1
     848:	2f 98       	cbi	0x05, 7	; 5
     84a:	2e 98       	cbi	0x05, 6	; 5
     84c:	29 98       	cbi	0x05, 1	; 5
     84e:	58 98       	cbi	0x0b, 0	; 11
     850:	40 98       	cbi	0x08, 0	; 8
     852:	28 98       	cbi	0x05, 0	; 5
  }
}
     854:	1f 91       	pop	r17
     856:	0f 91       	pop	r16
     858:	08 95       	ret

0000085a <__vector_3>:
  ISR(HALL_C())
#else
#pragma vector = HALL_C()
__interrupt void mc_hall_c(void)
#endif
{
     85a:	1f 92       	push	r1
     85c:	0f 92       	push	r0
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	0f 92       	push	r0
     862:	11 24       	eor	r1, r1
     864:	2f 93       	push	r18
     866:	3f 93       	push	r19
     868:	4f 93       	push	r20
     86a:	5f 93       	push	r21
     86c:	6f 93       	push	r22
     86e:	7f 93       	push	r23
     870:	8f 93       	push	r24
     872:	9f 93       	push	r25
     874:	af 93       	push	r26
     876:	bf 93       	push	r27
     878:	ef 93       	push	r30
     87a:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     87c:	49 b1       	in	r20, 0x09	; 9
     87e:	86 b1       	in	r24, 0x06	; 6
     880:	29 b1       	in	r18, 0x09	; 9
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	80 74       	andi	r24, 0x40	; 64
     886:	90 70       	andi	r25, 0x00	; 0
     888:	65 e0       	ldi	r22, 0x05	; 5
     88a:	95 95       	asr	r25
     88c:	87 95       	ror	r24
     88e:	6a 95       	dec	r22
     890:	e1 f7       	brne	.-8      	; 0x88a <__vector_3+0x30>
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	20 72       	andi	r18, 0x20	; 32
     896:	30 70       	andi	r19, 0x00	; 0
     898:	53 e0       	ldi	r21, 0x03	; 3
     89a:	35 95       	asr	r19
     89c:	27 95       	ror	r18
     89e:	5a 95       	dec	r21
     8a0:	e1 f7       	brne	.-8      	; 0x89a <__vector_3+0x40>
     8a2:	82 2b       	or	r24, r18
     8a4:	44 1f       	adc	r20, r20
     8a6:	44 27       	eor	r20, r20
     8a8:	44 1f       	adc	r20, r20
     8aa:	84 2b       	or	r24, r20
     8ac:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mc_switch_commutation>
}
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	bf 91       	pop	r27
     8b6:	af 91       	pop	r26
     8b8:	9f 91       	pop	r25
     8ba:	8f 91       	pop	r24
     8bc:	7f 91       	pop	r23
     8be:	6f 91       	pop	r22
     8c0:	5f 91       	pop	r21
     8c2:	4f 91       	pop	r20
     8c4:	3f 91       	pop	r19
     8c6:	2f 91       	pop	r18
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <__vector_23>:
  ISR(HALL_B())
#else
#pragma vector = HALL_B()
__interrupt void mc_hall_b(void)
#endif
{
     8d2:	1f 92       	push	r1
     8d4:	0f 92       	push	r0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	0f 92       	push	r0
     8da:	11 24       	eor	r1, r1
     8dc:	2f 93       	push	r18
     8de:	3f 93       	push	r19
     8e0:	4f 93       	push	r20
     8e2:	5f 93       	push	r21
     8e4:	6f 93       	push	r22
     8e6:	7f 93       	push	r23
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	af 93       	push	r26
     8ee:	bf 93       	push	r27
     8f0:	ef 93       	push	r30
     8f2:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     8f4:	49 b1       	in	r20, 0x09	; 9
     8f6:	86 b1       	in	r24, 0x06	; 6
     8f8:	29 b1       	in	r18, 0x09	; 9
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	80 74       	andi	r24, 0x40	; 64
     8fe:	90 70       	andi	r25, 0x00	; 0
     900:	e5 e0       	ldi	r30, 0x05	; 5
     902:	95 95       	asr	r25
     904:	87 95       	ror	r24
     906:	ea 95       	dec	r30
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0x3>
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	20 72       	andi	r18, 0x20	; 32
     90e:	30 70       	andi	r19, 0x00	; 0
     910:	73 e0       	ldi	r23, 0x03	; 3
     912:	35 95       	asr	r19
     914:	27 95       	ror	r18
     916:	7a 95       	dec	r23
     918:	e1 f7       	brne	.-8      	; 0x912 <__stack+0x13>
     91a:	82 2b       	or	r24, r18
     91c:	44 1f       	adc	r20, r20
     91e:	44 27       	eor	r20, r20
     920:	44 1f       	adc	r20, r20
     922:	84 2b       	or	r24, r20
     924:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mc_switch_commutation>
}
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	bf 91       	pop	r27
     92e:	af 91       	pop	r26
     930:	9f 91       	pop	r25
     932:	8f 91       	pop	r24
     934:	7f 91       	pop	r23
     936:	6f 91       	pop	r22
     938:	5f 91       	pop	r21
     93a:	4f 91       	pop	r20
     93c:	3f 91       	pop	r19
     93e:	2f 91       	pop	r18
     940:	0f 90       	pop	r0
     942:	0f be       	out	0x3f, r0	; 63
     944:	0f 90       	pop	r0
     946:	1f 90       	pop	r1
     948:	18 95       	reti

0000094a <__vector_1>:
  ISR(HALL_A())
#else
#pragma vector = HALL_A()
__interrupt void mc_hall_a(void)
#endif
{
     94a:	1f 92       	push	r1
     94c:	0f 92       	push	r0
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	0f 92       	push	r0
     952:	11 24       	eor	r1, r1
     954:	2f 93       	push	r18
     956:	3f 93       	push	r19
     958:	4f 93       	push	r20
     95a:	5f 93       	push	r21
     95c:	6f 93       	push	r22
     95e:	7f 93       	push	r23
     960:	8f 93       	push	r24
     962:	9f 93       	push	r25
     964:	af 93       	push	r26
     966:	bf 93       	push	r27
     968:	ef 93       	push	r30
     96a:	ff 93       	push	r31
  mc_switch_commutation(HALL_SENSOR_VALUE());
     96c:	49 b1       	in	r20, 0x09	; 9
     96e:	86 b1       	in	r24, 0x06	; 6
     970:	29 b1       	in	r18, 0x09	; 9
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	80 74       	andi	r24, 0x40	; 64
     976:	90 70       	andi	r25, 0x00	; 0
     978:	a5 e0       	ldi	r26, 0x05	; 5
     97a:	95 95       	asr	r25
     97c:	87 95       	ror	r24
     97e:	aa 95       	dec	r26
     980:	e1 f7       	brne	.-8      	; 0x97a <__vector_1+0x30>
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	20 72       	andi	r18, 0x20	; 32
     986:	30 70       	andi	r19, 0x00	; 0
     988:	f3 e0       	ldi	r31, 0x03	; 3
     98a:	35 95       	asr	r19
     98c:	27 95       	ror	r18
     98e:	fa 95       	dec	r31
     990:	e1 f7       	brne	.-8      	; 0x98a <__vector_1+0x40>
     992:	82 2b       	or	r24, r18
     994:	44 1f       	adc	r20, r20
     996:	44 27       	eor	r20, r20
     998:	44 1f       	adc	r20, r20
     99a:	84 2b       	or	r24, r20
     99c:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mc_switch_commutation>

  //estimation speed on rising edge of Hall_A
  if (PIND&(1<<PORTD7))
     9a0:	4f 9b       	sbis	0x09, 7	; 9
     9a2:	05 c0       	rjmp	.+10     	; 0x9ae <__vector_1+0x64>
  {
    mc_estimation_speed();
     9a4:	0e 94 85 03 	call	0x70a	; 0x70a <mc_estimation_speed>
    g_mc_read_enable=FALSE; // Wait 1 period
     9a8:	10 92 19 01 	sts	0x0119, r1
     9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <__vector_1+0x6a>
  }
  else
  {
    g_mc_read_enable=TRUE;
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	80 93 19 01 	sts	0x0119, r24
  }

}
     9b4:	ff 91       	pop	r31
     9b6:	ef 91       	pop	r30
     9b8:	bf 91       	pop	r27
     9ba:	af 91       	pop	r26
     9bc:	9f 91       	pop	r25
     9be:	8f 91       	pop	r24
     9c0:	7f 91       	pop	r23
     9c2:	6f 91       	pop	r22
     9c4:	5f 91       	pop	r21
     9c6:	4f 91       	pop	r20
     9c8:	3f 91       	pop	r19
     9ca:	2f 91       	pop	r18
     9cc:	0f 90       	pop	r0
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	0f 90       	pop	r0
     9d2:	1f 90       	pop	r1
     9d4:	18 95       	reti

000009d6 <mci_motor_is_running>:
* @post We know if the motor is running or not
*/
Bool mci_motor_is_running(void)
{
  return mci_run_stop;
}
     9d6:	80 91 22 01 	lds	r24, 0x0122
     9da:	08 95       	ret

000009dc <mci_stop>:
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     9dc:	10 92 22 01 	sts	0x0122, r1
}
     9e0:	08 95       	ret

000009e2 <mci_set_ref_speed>:
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     9e2:	80 93 23 01 	sts	0x0123, r24
}
     9e6:	08 95       	ret

000009e8 <mci_get_ref_speed>:
* @post get speed value
*/
U8 mci_get_ref_speed(void)
{
  return mci_ref_speed;
}
     9e8:	80 91 23 01 	lds	r24, 0x0123
     9ec:	08 95       	ret

000009ee <mci_forward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     9ee:	10 92 21 01 	sts	0x0121, r1
}
     9f2:	08 95       	ret

000009f4 <mci_backward>:
* @pre initialization of motor
* @post new value of direction
*/
void mci_backward(void)
{
  mci_direction = CCW;
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	80 93 21 01 	sts	0x0121, r24
}
     9fa:	08 95       	ret

000009fc <mci_get_motor_direction>:
* @post get direction value
*/
U8 mci_get_motor_direction(void)
{
  return mci_direction;
}
     9fc:	80 91 21 01 	lds	r24, 0x0121
     a00:	08 95       	ret

00000a02 <mc_set_measured_speed>:
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     a02:	80 93 24 01 	sts	0x0124, r24
}
     a06:	08 95       	ret

00000a08 <mci_get_measured_speed>:
 * @post none
*/
U8 mci_get_measured_speed(void)
{
  return mci_measured_speed;
}
     a08:	80 91 24 01 	lds	r24, 0x0124
     a0c:	08 95       	ret

00000a0e <mci_get_measured_current>:
* @brief Get the current measured in the motor
* @pre Launch ADC scheduler
* @post Get ADC Channel 12 result (Current value on 8bits).
*/
U16 mci_get_measured_current(void)
{
     a0e:	20 91 25 01 	lds	r18, 0x0125
     a12:	30 91 26 01 	lds	r19, 0x0126
     a16:	40 91 27 01 	lds	r20, 0x0127
     a1a:	50 91 28 01 	lds	r21, 0x0128
     a1e:	86 e0       	ldi	r24, 0x06	; 6
     a20:	56 95       	lsr	r21
     a22:	47 95       	ror	r20
     a24:	37 95       	ror	r19
     a26:	27 95       	ror	r18
     a28:	8a 95       	dec	r24
     a2a:	d1 f7       	brne	.-12     	; 0xa20 <mci_get_measured_current+0x12>
  return mci_measured_current/64;
}
     a2c:	c9 01       	movw	r24, r18
     a2e:	08 95       	ret

00000a30 <mci_store_measured_current>:
* @brief Set the variable 'mc_measured_current' for initialization.
* @pre none
* @post 'mc_measured_current' set with the current value
*/
void mci_store_measured_current(U16 current)
{
     a30:	ef 92       	push	r14
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
  mci_measured_current = ((63*mci_measured_current)+(64*current))>>6;
     a38:	76 e0       	ldi	r23, 0x06	; 6
     a3a:	88 0f       	add	r24, r24
     a3c:	99 1f       	adc	r25, r25
     a3e:	7a 95       	dec	r23
     a40:	e1 f7       	brne	.-8      	; 0xa3a <mci_store_measured_current+0xa>
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	b0 e0       	ldi	r27, 0x00	; 0
     a46:	e0 90 25 01 	lds	r14, 0x0125
     a4a:	f0 90 26 01 	lds	r15, 0x0126
     a4e:	00 91 27 01 	lds	r16, 0x0127
     a52:	10 91 28 01 	lds	r17, 0x0128
     a56:	a8 01       	movw	r20, r16
     a58:	97 01       	movw	r18, r14
     a5a:	66 e0       	ldi	r22, 0x06	; 6
     a5c:	22 0f       	add	r18, r18
     a5e:	33 1f       	adc	r19, r19
     a60:	44 1f       	adc	r20, r20
     a62:	55 1f       	adc	r21, r21
     a64:	6a 95       	dec	r22
     a66:	d1 f7       	brne	.-12     	; 0xa5c <mci_store_measured_current+0x2c>
     a68:	2e 19       	sub	r18, r14
     a6a:	3f 09       	sbc	r19, r15
     a6c:	40 0b       	sbc	r20, r16
     a6e:	51 0b       	sbc	r21, r17
     a70:	82 0f       	add	r24, r18
     a72:	93 1f       	adc	r25, r19
     a74:	a4 1f       	adc	r26, r20
     a76:	b5 1f       	adc	r27, r21
     a78:	26 e0       	ldi	r18, 0x06	; 6
     a7a:	b6 95       	lsr	r27
     a7c:	a7 95       	ror	r26
     a7e:	97 95       	ror	r25
     a80:	87 95       	ror	r24
     a82:	2a 95       	dec	r18
     a84:	d1 f7       	brne	.-12     	; 0xa7a <mci_store_measured_current+0x4a>
     a86:	80 93 25 01 	sts	0x0125, r24
     a8a:	90 93 26 01 	sts	0x0126, r25
     a8e:	a0 93 27 01 	sts	0x0127, r26
     a92:	b0 93 28 01 	sts	0x0128, r27
}
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	ef 90       	pop	r14
     a9e:	08 95       	ret

00000aa0 <mc_get_potentiometer_value>:
* @post Get ADC Channel 6 result (Potentiometer value on 8bits).
*/
U8 mc_get_potentiometer_value(void)
{
  return mc_potentiometer_value;
}
     aa0:	80 91 29 01 	lds	r24, 0x0129
     aa4:	08 95       	ret

00000aa6 <mc_set_potentiometer_value>:
* @pre Launch ADC scheduler
* @post 'mc_potentiometer_value' set with the potentiometer value
*/
void mc_set_potentiometer_value(U8 potentiometer)
{
  mc_potentiometer_value = potentiometer;
     aa6:	80 93 29 01 	sts	0x0129, r24
}
     aaa:	08 95       	ret

00000aac <mc_init>:
* @post configuration of hardware and sotware
* @pre none
*/
void mc_init()
{
  mc_init_HW();
     aac:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <mc_init_HW>
  Enable_interrupt();
     ab0:	78 94       	sei
* @pre motor run (mci_run executed)
* @post motor stop
*/
void mci_stop(void)
{
  mci_run_stop=FALSE;
     ab2:	10 92 22 01 	sts	0x0122, r1
* @pre initialization of motor
* @post new value of direction
*/
void mci_forward(void)
{
  mci_direction = CW;
     ab6:	10 92 21 01 	sts	0x0121, r1
* @pre initialization of motor
* @post new value of speed
*/
void mci_set_ref_speed(U8 speed)
{
  mci_ref_speed = speed;
     aba:	10 92 23 01 	sts	0x0123, r1
 * @pre none
 * @post mci_measured_speed initialized
*/
void mc_set_measured_speed(U8 measured_speed)
{
  mci_measured_speed = measured_speed;
     abe:	10 92 24 01 	sts	0x0124, r1

  mci_stop();
  mci_forward();
  mci_set_ref_speed(0);
  mc_set_measured_speed(0);
}
     ac2:	08 95       	ret

00000ac4 <mci_retry_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_retry_run(void)
{
  mci_run_stop = TRUE;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     aca:	0e 94 bc 01 	call	0x378	; 0x378 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     ace:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mc_get_duty_cycle>
     ad2:	0e 94 2f 02 	call	0x45e	; 0x45e <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     ad6:	0e 94 16 02 	call	0x42c	; 0x42c <mc_get_hall>
     ada:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     ade:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <mc_disable_during_inrush>
}
     ae2:	08 95       	ret

00000ae4 <mci_run>:
* @pre initialization  HW and SW
* @post New value in Hall variable
*/
void mci_run(void)
{
  if (!(PCTL & (1<<PRUN))) /* if there is an overcurrent */
     ae4:	80 91 b7 00 	lds	r24, 0x00B7
     ae8:	80 fd       	sbrc	r24, 0
     aea:	02 c0       	rjmp	.+4      	; 0xaf0 <mci_run+0xc>
  {
    PSC_Init();
     aec:	0e 94 d7 01 	call	0x3ae	; 0x3ae <PSC_Init>
  }
  overcurrent = FALSE;
     af0:	10 92 18 01 	sts	0x0118, r1
  mci_run_stop = TRUE;
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 22 01 	sts	0x0122, r24
  mc_regulation_loop();
     afa:	0e 94 bc 01 	call	0x378	; 0x378 <mc_regulation_loop>
  mc_duty_cycle(mc_get_duty_cycle());
     afe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <mc_get_duty_cycle>
     b02:	0e 94 2f 02 	call	0x45e	; 0x45e <mc_duty_cycle>
  mc_switch_commutation(mc_get_hall());
     b06:	0e 94 16 02 	call	0x42c	; 0x42c <mc_get_hall>
     b0a:	0e 94 e7 03 	call	0x7ce	; 0x7ce <mc_switch_commutation>
  mc_disable_during_inrush(); /* disable overcurrent during inrush */
     b0e:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <mc_disable_during_inrush>
}
     b12:	08 95       	ret

00000b14 <print_hex16>:
//!
//! @param
//!
//! @return none
void print_hex16(U16 value)
{
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	ec 01       	movw	r28, r24
   U8 d4;
   U8 d3;
   U8 d2;
   U8 d1;

   d4 = (U16)(value >> 12) & 0x0F;
     b22:	7c 01       	movw	r14, r24
     b24:	2f 2d       	mov	r18, r15
     b26:	22 95       	swap	r18
     b28:	2f 70       	andi	r18, 0x0F	; 15
   d3 = (U16)(value >> 8) & 0x0F;
     b2a:	1f 2d       	mov	r17, r15
     b2c:	1f 70       	andi	r17, 0x0F	; 15
   d2 = (U16)(value >> 4) & 0x0F;
     b2e:	34 e0       	ldi	r19, 0x04	; 4
     b30:	96 95       	lsr	r25
     b32:	87 95       	ror	r24
     b34:	3a 95       	dec	r19
     b36:	e1 f7       	brne	.-8      	; 0xb30 <print_hex16+0x1c>
     b38:	08 2f       	mov	r16, r24
     b3a:	0f 70       	andi	r16, 0x0F	; 15
   d1 = (U16)(value) & 0x0F;

   if (d4 != 0)
     b3c:	22 23       	and	r18, r18
     b3e:	39 f0       	breq	.+14     	; 0xb4e <print_hex16+0x3a>
   {
      c = bin_to_ascii(d4);
     b40:	82 2f       	mov	r24, r18
     b42:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
      uart_putchar(c);
     b46:	90 e0       	ldi	r25, 0x00	; 0
     b48:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
     b4c:	02 c0       	rjmp	.+4      	; 0xb52 <print_hex16+0x3e>
      c = bin_to_ascii(d2);
      uart_putchar(c);
   }
   else
   {
      if (d3 != 0)
     b4e:	11 23       	and	r17, r17
     b50:	39 f0       	breq	.+14     	; 0xb60 <print_hex16+0x4c>
      {
         c = bin_to_ascii(d3);
     b52:	81 2f       	mov	r24, r17
     b54:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
         uart_putchar(c);
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <print_hex16+0x50>
         c = bin_to_ascii(d2);
         uart_putchar(c);
      }
      else
      {
         if (d2 != 0)
     b60:	00 23       	and	r16, r16
     b62:	31 f0       	breq	.+12     	; 0xb70 <print_hex16+0x5c>
         {
            c = bin_to_ascii(d2);
     b64:	80 2f       	mov	r24, r16
     b66:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
            uart_putchar(c);
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
         }
      }
   }

   c = bin_to_ascii(d1);
     b70:	9e 01       	movw	r18, r28
     b72:	2f 70       	andi	r18, 0x0F	; 15
     b74:	82 2f       	mov	r24, r18
     b76:	0e 94 b4 00 	call	0x168	; 0x168 <bin_to_ascii>
   uart_putchar(c);
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
}
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	ff 90       	pop	r15
     b8a:	ef 90       	pop	r14
     b8c:	08 95       	ret

00000b8e <print_msg>:
#ifdef __GNUC__
void print_msg(U8 const *str)
#else
void print_msg(U8 code *str)
#endif
{
     b8e:	cf 93       	push	r28
     b90:	df 93       	push	r29
   {
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
     b92:	fc 01       	movw	r30, r24
     b94:	ec 01       	movw	r28, r24
     b96:	84 91       	lpm	r24, Z+
     b98:	05 c0       	rjmp	.+10     	; 0xba4 <print_msg+0x16>
   while(c!=0)
   {
      uart_putchar(c);
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
      c=pgm_read_byte_near((unsigned int)str++);
     ba0:	fe 01       	movw	r30, r28
     ba2:	84 91       	lpm	r24, Z+
     ba4:	21 96       	adiw	r28, 0x01	; 1
      uart_putchar(c);
      c=*str++;
   }
#else    // AVRGCC does not support point to PGM space
   c=pgm_read_byte_near((unsigned int)str++);
   while(c!=0)
     ba6:	88 23       	and	r24, r24
     ba8:	c1 f7       	brne	.-16     	; 0xb9a <print_msg+0xc>
      uart_putchar(c);
      c=pgm_read_byte_near((unsigned int)str++);
   }
#endif

}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	08 95       	ret

00000bb0 <parse_cmd>:
{
   U8 i=0;
   U8 j;

   //Get command type
   for(i=0;cmd_str[i]!=' ' && i<=i_str;i++);
     bb0:	90 91 2b 01 	lds	r25, 0x012B
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <parse_cmd+0xa>
     bb8:	4f 5f       	subi	r20, 0xFF	; 255
     bba:	e4 2f       	mov	r30, r20
     bbc:	f0 e0       	ldi	r31, 0x00	; 0
     bbe:	e0 5b       	subi	r30, 0xB0	; 176
     bc0:	fe 4f       	sbci	r31, 0xFE	; 254
     bc2:	80 81       	ld	r24, Z
     bc4:	80 32       	cpi	r24, 0x20	; 32
     bc6:	11 f0       	breq	.+4      	; 0xbcc <parse_cmd+0x1c>
     bc8:	94 17       	cp	r25, r20
     bca:	b0 f7       	brcc	.-20     	; 0xbb8 <parse_cmd+0x8>
   cmd=TRUE;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 2c 01 	sts	0x012C, r24

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
     bd2:	94 2f       	mov	r25, r20
     bd4:	91 50       	subi	r25, 0x01	; 1
     bd6:	a0 e5       	ldi	r26, 0x50	; 80
     bd8:	b1 e0       	ldi	r27, 0x01	; 1
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     bde:	f9 01       	movw	r30, r18
     be0:	e4 58       	subi	r30, 0x84	; 132
     be2:	ff 4f       	sbci	r31, 0xFF	; 255
     be4:	e4 91       	lpm	r30, Z+
     be6:	8c 91       	ld	r24, X
     be8:	8e 17       	cp	r24, r30
     bea:	39 f4       	brne	.+14     	; 0xbfa <parse_cmd+0x4a>
     bec:	2f 5f       	subi	r18, 0xFF	; 255
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     bf0:	92 17       	cp	r25, r18
     bf2:	08 f4       	brcc	.+2      	; 0xbf6 <parse_cmd+0x46>
     bf4:	e6 c0       	rjmp	.+460    	; 0xdc2 <parse_cmd+0x212>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	f2 cf       	rjmp	.-28     	; 0xbde <parse_cmd+0x2e>
     bfa:	a0 e5       	ldi	r26, 0x50	; 80
     bfc:	b1 e0       	ldi	r27, 0x01	; 1
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c02:	f9 01       	movw	r30, r18
     c04:	e1 58       	subi	r30, 0x81	; 129
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	e4 91       	lpm	r30, Z+
     c0a:	8c 91       	ld	r24, X
     c0c:	8e 17       	cp	r24, r30
     c0e:	39 f4       	brne	.+14     	; 0xc1e <parse_cmd+0x6e>
     c10:	2f 5f       	subi	r18, 0xFF	; 255
     c12:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c14:	92 17       	cp	r25, r18
     c16:	08 f4       	brcc	.+2      	; 0xc1a <parse_cmd+0x6a>
     c18:	d6 c0       	rjmp	.+428    	; 0xdc6 <parse_cmd+0x216>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	f2 cf       	rjmp	.-28     	; 0xc02 <parse_cmd+0x52>
     c1e:	a0 e5       	ldi	r26, 0x50	; 80
     c20:	b1 e0       	ldi	r27, 0x01	; 1
     c22:	20 e0       	ldi	r18, 0x00	; 0
     c24:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c26:	f9 01       	movw	r30, r18
     c28:	ee 57       	subi	r30, 0x7E	; 126
     c2a:	ff 4f       	sbci	r31, 0xFF	; 255
     c2c:	e4 91       	lpm	r30, Z+
     c2e:	8c 91       	ld	r24, X
     c30:	8e 17       	cp	r24, r30
     c32:	39 f4       	brne	.+14     	; 0xc42 <parse_cmd+0x92>
     c34:	2f 5f       	subi	r18, 0xFF	; 255
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c38:	92 17       	cp	r25, r18
     c3a:	08 f4       	brcc	.+2      	; 0xc3e <parse_cmd+0x8e>
     c3c:	c6 c0       	rjmp	.+396    	; 0xdca <parse_cmd+0x21a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	f2 cf       	rjmp	.-28     	; 0xc26 <parse_cmd+0x76>
     c42:	a0 e5       	ldi	r26, 0x50	; 80
     c44:	b1 e0       	ldi	r27, 0x01	; 1
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c4a:	f9 01       	movw	r30, r18
     c4c:	e9 57       	subi	r30, 0x79	; 121
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	e4 91       	lpm	r30, Z+
     c52:	8c 91       	ld	r24, X
     c54:	8e 17       	cp	r24, r30
     c56:	39 f4       	brne	.+14     	; 0xc66 <parse_cmd+0xb6>
     c58:	2f 5f       	subi	r18, 0xFF	; 255
     c5a:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c5c:	92 17       	cp	r25, r18
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <parse_cmd+0xb2>
     c60:	b6 c0       	rjmp	.+364    	; 0xdce <parse_cmd+0x21e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	f2 cf       	rjmp	.-28     	; 0xc4a <parse_cmd+0x9a>
     c66:	a0 e5       	ldi	r26, 0x50	; 80
     c68:	b1 e0       	ldi	r27, 0x01	; 1
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c6e:	f9 01       	movw	r30, r18
     c70:	e6 57       	subi	r30, 0x76	; 118
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	e4 91       	lpm	r30, Z+
     c76:	8c 91       	ld	r24, X
     c78:	8e 17       	cp	r24, r30
     c7a:	39 f4       	brne	.+14     	; 0xc8a <parse_cmd+0xda>
     c7c:	2f 5f       	subi	r18, 0xFF	; 255
     c7e:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     c80:	92 17       	cp	r25, r18
     c82:	08 f4       	brcc	.+2      	; 0xc86 <parse_cmd+0xd6>
     c84:	a6 c0       	rjmp	.+332    	; 0xdd2 <parse_cmd+0x222>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     c86:	11 96       	adiw	r26, 0x01	; 1
     c88:	f2 cf       	rjmp	.-28     	; 0xc6e <parse_cmd+0xbe>
     c8a:	a0 e5       	ldi	r26, 0x50	; 80
     c8c:	b1 e0       	ldi	r27, 0x01	; 1
     c8e:	20 e0       	ldi	r18, 0x00	; 0
     c90:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     c92:	f9 01       	movw	r30, r18
     c94:	e3 57       	subi	r30, 0x73	; 115
     c96:	ff 4f       	sbci	r31, 0xFF	; 255
     c98:	e4 91       	lpm	r30, Z+
     c9a:	8c 91       	ld	r24, X
     c9c:	8e 17       	cp	r24, r30
     c9e:	39 f4       	brne	.+14     	; 0xcae <parse_cmd+0xfe>
     ca0:	2f 5f       	subi	r18, 0xFF	; 255
     ca2:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     ca4:	92 17       	cp	r25, r18
     ca6:	08 f4       	brcc	.+2      	; 0xcaa <parse_cmd+0xfa>
     ca8:	96 c0       	rjmp	.+300    	; 0xdd6 <parse_cmd+0x226>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     caa:	11 96       	adiw	r26, 0x01	; 1
     cac:	f2 cf       	rjmp	.-28     	; 0xc92 <parse_cmd+0xe2>
     cae:	a0 e5       	ldi	r26, 0x50	; 80
     cb0:	b1 e0       	ldi	r27, 0x01	; 1
     cb2:	20 e0       	ldi	r18, 0x00	; 0
     cb4:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     cb6:	f9 01       	movw	r30, r18
     cb8:	e0 57       	subi	r30, 0x70	; 112
     cba:	ff 4f       	sbci	r31, 0xFF	; 255
     cbc:	e4 91       	lpm	r30, Z+
     cbe:	8c 91       	ld	r24, X
     cc0:	8e 17       	cp	r24, r30
     cc2:	39 f4       	brne	.+14     	; 0xcd2 <parse_cmd+0x122>
     cc4:	2f 5f       	subi	r18, 0xFF	; 255
     cc6:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     cc8:	92 17       	cp	r25, r18
     cca:	08 f4       	brcc	.+2      	; 0xcce <parse_cmd+0x11e>
     ccc:	86 c0       	rjmp	.+268    	; 0xdda <parse_cmd+0x22a>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	f2 cf       	rjmp	.-28     	; 0xcb6 <parse_cmd+0x106>
     cd2:	a0 e5       	ldi	r26, 0x50	; 80
     cd4:	b1 e0       	ldi	r27, 0x01	; 1
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     cda:	f9 01       	movw	r30, r18
     cdc:	ed 56       	subi	r30, 0x6D	; 109
     cde:	ff 4f       	sbci	r31, 0xFF	; 255
     ce0:	e4 91       	lpm	r30, Z+
     ce2:	8c 91       	ld	r24, X
     ce4:	8e 17       	cp	r24, r30
     ce6:	39 f4       	brne	.+14     	; 0xcf6 <parse_cmd+0x146>
     ce8:	2f 5f       	subi	r18, 0xFF	; 255
     cea:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     cec:	92 17       	cp	r25, r18
     cee:	08 f4       	brcc	.+2      	; 0xcf2 <parse_cmd+0x142>
     cf0:	76 c0       	rjmp	.+236    	; 0xdde <parse_cmd+0x22e>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	f2 cf       	rjmp	.-28     	; 0xcda <parse_cmd+0x12a>
     cf6:	a0 e5       	ldi	r26, 0x50	; 80
     cf8:	b1 e0       	ldi	r27, 0x01	; 1
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
   for(j=0;j<=i;j++)
   {
#ifndef __GNUC__
      if(*str1!=*str2)
#else
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
     cfe:	f9 01       	movw	r30, r18
     d00:	ea 56       	subi	r30, 0x6A	; 106
     d02:	ff 4f       	sbci	r31, 0xFF	; 255
     d04:	e4 91       	lpm	r30, Z+
     d06:	8c 91       	ld	r24, X
     d08:	8e 17       	cp	r24, r30
     d0a:	39 f4       	brne	.+14     	; 0xd1a <parse_cmd+0x16a>
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
#else
U8 mystrncmp(U8 *str1,U8 code *str2,U8 i)
#endif
{
   U8 j;
   for(j=0;j<=i;j++)
     d10:	92 17       	cp	r25, r18
     d12:	08 f4       	brcc	.+2      	; 0xd16 <parse_cmd+0x166>
     d14:	66 c0       	rjmp	.+204    	; 0xde2 <parse_cmd+0x232>
      if( *str1 != pgm_read_byte_near((unsigned int)str2))
#endif
      {
         return FALSE;
      }
      str1++;str2++;
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	f2 cf       	rjmp	.-28     	; 0xcfe <parse_cmd+0x14e>
   {  cmd_type=CMD_GET_STATUS0; }
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
   else
   {
      if(i_str)
     d1a:	80 91 2b 01 	lds	r24, 0x012B
     d1e:	88 23       	and	r24, r24
     d20:	21 f0       	breq	.+8      	; 0xd2a <parse_cmd+0x17a>
      {
        print_msg(msg_er_cmd_not_found);
     d22:	85 e0       	ldi	r24, 0x05	; 5
     d24:	91 e0       	ldi	r25, 0x01	; 1
     d26:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
      }
      print_msg(msg_prompt);
     d2a:	89 e9       	ldi	r24, 0x99	; 153
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
      cmd=FALSE;
     d32:	10 92 2c 01 	sts	0x012C, r1
     d36:	08 95       	ret
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
   }
   else   {  return; }
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0a c0       	rjmp	.+20     	; 0xd50 <parse_cmd+0x1a0>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str1[j])=cmd_str[i];
     d3c:	e9 2f       	mov	r30, r25
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	ee 0f       	add	r30, r30
     d42:	ff 1f       	adc	r31, r31
     d44:	e2 5d       	subi	r30, 0xD2	; 210
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	30 83       	st	Z, r19
         MSB(par_str1[j])=0;
     d4a:	11 82       	std	Z+1, r1	; 0x01
         j++;
     d4c:	9f 5f       	subi	r25, 0xFF	; 255

  //Get first arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     d4e:	2f 5f       	subi	r18, 0xFF	; 255
     d50:	e2 2f       	mov	r30, r18
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	e0 5b       	subi	r30, 0xB0	; 176
     d56:	fe 4f       	sbci	r31, 0xFE	; 254
     d58:	30 81       	ld	r19, Z
     d5a:	30 32       	cpi	r19, 0x20	; 32
     d5c:	21 f0       	breq	.+8      	; 0xd66 <parse_cmd+0x1b6>
     d5e:	80 91 2b 01 	lds	r24, 0x012B
     d62:	28 17       	cp	r18, r24
     d64:	58 f3       	brcs	.-42     	; 0xd3c <parse_cmd+0x18c>
      {
         LSB(par_str1[j])=cmd_str[i];
         MSB(par_str1[j])=0;
         j++;
      }
      LSB(par_str1[j])=0;MSB(par_str1[j])=0;
     d66:	e9 2f       	mov	r30, r25
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	ee 0f       	add	r30, r30
     d6c:	ff 1f       	adc	r31, r31
     d6e:	e2 5d       	subi	r30, 0xD2	; 210
     d70:	fe 4f       	sbci	r31, 0xFE	; 254
     d72:	10 82       	st	Z, r1
     d74:	11 82       	std	Z+1, r1	; 0x01
   }
   else   {  return; }

   //Get second arg (if any)
   if(++i<i_str)
     d76:	92 2f       	mov	r25, r18
     d78:	9f 5f       	subi	r25, 0xFF	; 255
     d7a:	80 91 2b 01 	lds	r24, 0x012B
     d7e:	98 17       	cp	r25, r24
     d80:	d0 f5       	brcc	.+116    	; 0xdf6 <parse_cmd+0x246>
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
   }
   else   { return; }
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	0a c0       	rjmp	.+20     	; 0xd9a <parse_cmd+0x1ea>
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
      {
         LSB(par_str2[j])=cmd_str[i];
     d86:	e2 2f       	mov	r30, r18
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	ee 0f       	add	r30, r30
     d8c:	ff 1f       	adc	r31, r31
     d8e:	e2 5c       	subi	r30, 0xC2	; 194
     d90:	fe 4f       	sbci	r31, 0xFE	; 254
     d92:	30 83       	st	Z, r19
         MSB(par_str2[j])=0;
     d94:	11 82       	std	Z+1, r1	; 0x01
         j++;
     d96:	2f 5f       	subi	r18, 0xFF	; 255

   //Get second arg (if any)
   if(++i<i_str)
   {
      j=0;
      for(;(cmd_str[i]!=' ')&&(i<i_str);i++)
     d98:	9f 5f       	subi	r25, 0xFF	; 255
     d9a:	e9 2f       	mov	r30, r25
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	e0 5b       	subi	r30, 0xB0	; 176
     da0:	fe 4f       	sbci	r31, 0xFE	; 254
     da2:	30 81       	ld	r19, Z
     da4:	30 32       	cpi	r19, 0x20	; 32
     da6:	21 f0       	breq	.+8      	; 0xdb0 <parse_cmd+0x200>
     da8:	80 91 2b 01 	lds	r24, 0x012B
     dac:	98 17       	cp	r25, r24
     dae:	58 f3       	brcs	.-42     	; 0xd86 <parse_cmd+0x1d6>
      {
         LSB(par_str2[j])=cmd_str[i];
         MSB(par_str2[j])=0;
         j++;
      }
      LSB(par_str2[j])=0;MSB(par_str2[j])=0;
     db0:	e2 2f       	mov	r30, r18
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e2 5c       	subi	r30, 0xC2	; 194
     dba:	fe 4f       	sbci	r31, 0xFE	; 254
     dbc:	10 82       	st	Z, r1
     dbe:	11 82       	std	Z+1, r1	; 0x01
     dc0:	08 95       	ret
   cmd=TRUE;

   //Decode command type

   if ( mystrncmp(cmd_str,str_run,i-1))
   {  cmd_type=CMD_RUN; }
     dc2:	82 e0       	ldi	r24, 0x02	; 2
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_stop,i-1))
   {  cmd_type=CMD_STOP; }
     dc6:	83 e0       	ldi	r24, 0x03	; 3
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_help,i-1))
   {  cmd_type=CMD_HELP; }
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_forward,i-1))
   {  cmd_type=CMD_FORWARD; }
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_backward,i-1))
   {  cmd_type=CMD_BACKWARD; }
     dd2:	85 e0       	ldi	r24, 0x05	; 5
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_set_speed,i-1))
   {  cmd_type=CMD_SET_SPEED; }
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_id,i-1))
   {  cmd_type=CMD_GET_ID; }
     dda:	87 e0       	ldi	r24, 0x07	; 7
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status0,i-1))
   {  cmd_type=CMD_GET_STATUS0; }
     dde:	88 e0       	ldi	r24, 0x08	; 8
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <parse_cmd+0x234>
   else if ( mystrncmp(cmd_str,str_get_status1,i-1))
   {  cmd_type=CMD_GET_STATUS1; }
     de2:	89 e0       	ldi	r24, 0x09	; 9
     de4:	80 93 2d 01 	sts	0x012D, r24
      cmd=FALSE;
      return;
   }

  //Get first arg (if any)
   if(++i<i_str)
     de8:	24 2f       	mov	r18, r20
     dea:	2f 5f       	subi	r18, 0xFF	; 255
     dec:	80 91 2b 01 	lds	r24, 0x012B
     df0:	28 17       	cp	r18, r24
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <parse_cmd+0x246>
     df4:	a1 cf       	rjmp	.-190    	; 0xd38 <parse_cmd+0x188>
     df6:	08 95       	ret

00000df8 <convert_param1>:
//!
//! @param none
//!
//! @return none
void convert_param1(void)
{
     df8:	ff 92       	push	r15
     dfa:	0f 93       	push	r16
     dfc:	1f 93       	push	r17
   U8 i = 0;
   param1 = 0;
     dfe:	10 92 4f 01 	sts	0x014F, r1
     e02:	10 92 4e 01 	sts	0x014E, r1
     e06:	ff 24       	eor	r15, r15
     e08:	16 c0       	rjmp	.+44     	; 0xe36 <convert_param1+0x3e>
   while ( par_str1[i] != 0 )
   {
      param1 = param1 << 4;
     e0a:	00 91 4e 01 	lds	r16, 0x014E
     e0e:	10 91 4f 01 	lds	r17, 0x014F
     e12:	94 e0       	ldi	r25, 0x04	; 4
     e14:	00 0f       	add	r16, r16
     e16:	11 1f       	adc	r17, r17
     e18:	9a 95       	dec	r25
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <convert_param1+0x1c>
     e1c:	10 93 4f 01 	sts	0x014F, r17
     e20:	00 93 4e 01 	sts	0x014E, r16
      param1 = param1 + ascii_to_bin(par_str1[i]);
     e24:	0e 94 aa 00 	call	0x154	; 0x154 <ascii_to_bin>
     e28:	08 0f       	add	r16, r24
     e2a:	11 1d       	adc	r17, r1
     e2c:	10 93 4f 01 	sts	0x014F, r17
     e30:	00 93 4e 01 	sts	0x014E, r16
      i++;
     e34:	f3 94       	inc	r15
//! @return none
void convert_param1(void)
{
   U8 i = 0;
   param1 = 0;
   while ( par_str1[i] != 0 )
     e36:	ef 2d       	mov	r30, r15
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	ee 0f       	add	r30, r30
     e3c:	ff 1f       	adc	r31, r31
     e3e:	e2 5d       	subi	r30, 0xD2	; 210
     e40:	fe 4f       	sbci	r31, 0xFE	; 254
     e42:	80 81       	ld	r24, Z
     e44:	91 81       	ldd	r25, Z+1	; 0x01
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	01 f7       	brne	.-64     	; 0xe0a <convert_param1+0x12>
   {
      param1 = param1 << 4;
      param1 = param1 + ascii_to_bin(par_str1[i]);
      i++;
   }
}
     e4a:	1f 91       	pop	r17
     e4c:	0f 91       	pop	r16
     e4e:	ff 90       	pop	r15
     e50:	08 95       	ret

00000e52 <build_cmd>:
//! @return none
void build_cmd(void)
{
U8 c;

   if (uart_test_hit())    //Something new of  the UART ?
     e52:	0e 94 12 08 	call	0x1024	; 0x1024 <uart_test_hit>
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <build_cmd+0xa>
     e5a:	45 c0       	rjmp	.+138    	; 0xee6 <build_cmd+0x94>
   {
      c=uart_getchar();
     e5c:	0e 94 35 08 	call	0x106a	; 0x106a <uart_getchar>
     e60:	98 2f       	mov	r25, r24
      switch (c)
     e62:	88 30       	cpi	r24, 0x08	; 8
     e64:	f1 f0       	breq	.+60     	; 0xea2 <build_cmd+0x50>
     e66:	8d 30       	cpi	r24, 0x0D	; 13
     e68:	19 f0       	breq	.+6      	; 0xe70 <build_cmd+0x1e>
     e6a:	83 30       	cpi	r24, 0x03	; 3
     e6c:	91 f5       	brne	.+100    	; 0xed2 <build_cmd+0x80>
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <build_cmd+0x34>
      {
         case CR:
            cmd_str[i_str]=0;  //Add NULL char
     e70:	e0 91 2b 01 	lds	r30, 0x012B
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	e0 5b       	subi	r30, 0xB0	; 176
     e78:	fe 4f       	sbci	r31, 0xFE	; 254
     e7a:	10 82       	st	Z, r1
            parse_cmd();    //Decode the command
     e7c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <parse_cmd>
            i_str=0;
     e80:	10 92 2b 01 	sts	0x012B, r1
     e84:	08 95       	ret
            break;
         case ABORT_CHAR:    //^c abort cmd
            i_str=0;
     e86:	10 92 2b 01 	sts	0x012B, r1
            printf("\r#");
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <build_cmd+0x3a>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	91 e0       	ldi	r25, 0x01	; 1
     e90:	ed b7       	in	r30, 0x3d	; 61
     e92:	fe b7       	in	r31, 0x3e	; 62
     e94:	92 83       	std	Z+2, r25	; 0x02
     e96:	81 83       	std	Z+1, r24	; 0x01
     e98:	0e 94 79 08 	call	0x10f2	; 0x10f2 <printf>
     e9c:	0f 90       	pop	r0
     e9e:	0f 90       	pop	r0
     ea0:	08 95       	ret
            break;
         case BKSPACE_CHAR:   //backspace
            if(i_str>0)
     ea2:	80 91 2b 01 	lds	r24, 0x012B
     ea6:	88 23       	and	r24, r24
     ea8:	61 f0       	breq	.+24     	; 0xec2 <build_cmd+0x70>
            {
               uart_putchar(c);
     eaa:	88 e0       	ldi	r24, 0x08	; 8
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
               uart_putchar(' ');
     eb2:	80 e2       	ldi	r24, 0x20	; 32
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
               uart_putchar(c);
     eba:	88 e0       	ldi	r24, 0x08	; 8
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            }
            if(i_str>=1)
     ec2:	80 91 2b 01 	lds	r24, 0x012B
     ec6:	88 23       	and	r24, r24
     ec8:	71 f0       	breq	.+28     	; 0xee6 <build_cmd+0x94>
            {
               i_str--;
     eca:	81 50       	subi	r24, 0x01	; 1
     ecc:	80 93 2b 01 	sts	0x012B, r24
     ed0:	08 95       	ret
            }
            break;

         default:
            cmd_str[i_str++]=c;  //append to cmd line
     ed2:	80 91 2b 01 	lds	r24, 0x012B
     ed6:	e8 2f       	mov	r30, r24
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	e0 5b       	subi	r30, 0xB0	; 176
     edc:	fe 4f       	sbci	r31, 0xFE	; 254
     ede:	90 83       	st	Z, r25
     ee0:	8f 5f       	subi	r24, 0xFF	; 255
     ee2:	80 93 2b 01 	sts	0x012B, r24
     ee6:	08 95       	ret

00000ee8 <ushell_task>:
//! @return none
void ushell_task(void)
{
   U8 status = 0;

   if(cmd==FALSE)
     ee8:	80 91 2c 01 	lds	r24, 0x012C
     eec:	88 23       	and	r24, r24
     eee:	19 f4       	brne	.+6      	; 0xef6 <ushell_task+0xe>
   {
      build_cmd();
     ef0:	0e 94 29 07 	call	0xe52	; 0xe52 <build_cmd>
     ef4:	08 95       	ret
   }
   else
   {
      switch (cmd_type)
     ef6:	80 91 2d 01 	lds	r24, 0x012D
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	31 f1       	breq	.+76     	; 0xf4a <ushell_task+0x62>
     efe:	86 30       	cpi	r24, 0x06	; 6
     f00:	70 f4       	brcc	.+28     	; 0xf1e <ushell_task+0x36>
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	c9 f0       	breq	.+50     	; 0xf38 <ushell_task+0x50>
     f06:	83 30       	cpi	r24, 0x03	; 3
     f08:	20 f4       	brcc	.+8      	; 0xf12 <ushell_task+0x2a>
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	09 f0       	breq	.+2      	; 0xf10 <ushell_task+0x28>
     f0e:	6e c0       	rjmp	.+220    	; 0xfec <ushell_task+0x104>
     f10:	10 c0       	rjmp	.+32     	; 0xf32 <ushell_task+0x4a>
     f12:	83 30       	cpi	r24, 0x03	; 3
     f14:	a1 f0       	breq	.+40     	; 0xf3e <ushell_task+0x56>
     f16:	84 30       	cpi	r24, 0x04	; 4
     f18:	09 f0       	breq	.+2      	; 0xf1c <ushell_task+0x34>
     f1a:	68 c0       	rjmp	.+208    	; 0xfec <ushell_task+0x104>
     f1c:	13 c0       	rjmp	.+38     	; 0xf44 <ushell_task+0x5c>
     f1e:	87 30       	cpi	r24, 0x07	; 7
     f20:	01 f1       	breq	.+64     	; 0xf62 <ushell_task+0x7a>
     f22:	87 30       	cpi	r24, 0x07	; 7
     f24:	a8 f0       	brcs	.+42     	; 0xf50 <ushell_task+0x68>
     f26:	88 30       	cpi	r24, 0x08	; 8
     f28:	79 f1       	breq	.+94     	; 0xf88 <ushell_task+0xa0>
     f2a:	89 30       	cpi	r24, 0x09	; 9
     f2c:	09 f0       	breq	.+2      	; 0xf30 <ushell_task+0x48>
     f2e:	5e c0       	rjmp	.+188    	; 0xfec <ushell_task+0x104>
     f30:	50 c0       	rjmp	.+160    	; 0xfd2 <ushell_task+0xea>
      {
         case CMD_HELP:
            print_msg(msg_help);
     f32:	8b eb       	ldi	r24, 0xBB	; 187
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	5c c0       	rjmp	.+184    	; 0xff0 <ushell_task+0x108>
            break;
         case CMD_RUN:
            mci_run();
     f38:	0e 94 72 05 	call	0xae4	; 0xae4 <mci_run>
     f3c:	5b c0       	rjmp	.+182    	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_STOP:
            mci_stop();
     f3e:	0e 94 ee 04 	call	0x9dc	; 0x9dc <mci_stop>
     f42:	58 c0       	rjmp	.+176    	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_FORWARD:
            mci_forward();
     f44:	0e 94 f7 04 	call	0x9ee	; 0x9ee <mci_forward>
     f48:	55 c0       	rjmp	.+170    	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_BACKWARD:
            mci_backward();
     f4a:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <mci_backward>
     f4e:	52 c0       	rjmp	.+164    	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_SET_SPEED:
            convert_param1();
     f50:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <convert_param1>
            mc_disable_during_inrush();
     f54:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <mc_disable_during_inrush>
            mci_set_ref_speed((U8)param1);
     f58:	80 91 4e 01 	lds	r24, 0x014E
     f5c:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <mci_set_ref_speed>
     f60:	49 c0       	rjmp	.+146    	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_GET_ID:
            print_hex16(BOARD_ID);
     f62:	83 e0       	ldi	r24, 0x03	; 3
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            uart_putchar(' ');
     f6a:	80 e2       	ldi	r24, 0x20	; 32
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            print_hex16(SOFT_ID);
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            uart_putchar(' ');
     f7a:	80 e2       	ldi	r24, 0x20	; 32
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            print_hex16(REV_ID);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	2f c0       	rjmp	.+94     	; 0xfe6 <ushell_task+0xfe>
            break;
         case CMD_GET_STATUS0:
            status = 0;
            if (mci_direction == CCW) {status |= (1<<3);}
     f88:	80 91 21 01 	lds	r24, 0x0121
     f8c:	81 30       	cpi	r24, 0x01	; 1
     f8e:	11 f4       	brne	.+4      	; 0xf94 <ushell_task+0xac>
     f90:	98 e0       	ldi	r25, 0x08	; 8
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <ushell_task+0xae>
     f94:	90 e0       	ldi	r25, 0x00	; 0
            if (mci_run_stop == TRUE) {status |= (1<<2);}
     f96:	80 91 22 01 	lds	r24, 0x0122
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <ushell_task+0xb8>
     f9e:	94 60       	ori	r25, 0x04	; 4
            print_hex16(status);
     fa0:	89 2f       	mov	r24, r25
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            uart_putchar(' ');
     fa8:	80 e2       	ldi	r24, 0x20	; 32
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            print_hex16(mci_get_measured_speed());
     fb0:	0e 94 04 05 	call	0xa08	; 0xa08 <mci_get_measured_speed>
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            uart_putchar(' ');
     fba:	80 e2       	ldi	r24, 0x20	; 32
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            print_hex16(mci_get_measured_current());
     fc2:	0e 94 07 05 	call	0xa0e	; 0xa0e <mci_get_measured_current>
     fc6:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            ushell_active = TRUE;
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	80 93 2a 01 	sts	0x012A, r24
     fd0:	11 c0       	rjmp	.+34     	; 0xff4 <ushell_task+0x10c>
            break;
         case CMD_GET_STATUS1:
            print_hex16(0xDEA);
     fd2:	8a ee       	ldi	r24, 0xEA	; 234
     fd4:	9d e0       	ldi	r25, 0x0D	; 13
     fd6:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
            uart_putchar(' ');
     fda:	80 e2       	ldi	r24, 0x20	; 32
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	0e 94 2c 08 	call	0x1058	; 0x1058 <uart_putchar>
            print_hex16(0x123);
     fe2:	83 e2       	ldi	r24, 0x23	; 35
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	0e 94 8a 05 	call	0xb14	; 0xb14 <print_hex16>
     fea:	04 c0       	rjmp	.+8      	; 0xff4 <ushell_task+0x10c>
            break;
         default:    //Unknown command
            print_msg(msg_er_cmd_not_found);
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
      }
      cmd_type=CMD_NONE;
     ff4:	10 92 2d 01 	sts	0x012D, r1
      cmd=FALSE;
     ff8:	10 92 2c 01 	sts	0x012C, r1
      print_msg(msg_prompt);
     ffc:	89 e9       	ldi	r24, 0x99	; 153
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
    1004:	08 95       	ret

00001006 <ushell_task_init>:
//! @return none
//!
//!/
void ushell_task_init(void)
{
   uart_init();
    1006:	0e 94 16 08 	call	0x102c	; 0x102c <uart_init>
   print_msg(msg_welcome);
    100a:	8c e9       	ldi	r24, 0x9C	; 156
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
   print_msg(msg_prompt);
    1012:	89 e9       	ldi	r24, 0x99	; 153
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 c7 05 	call	0xb8e	; 0xb8e <print_msg>
   cmd=FALSE;
    101a:	10 92 2c 01 	sts	0x012C, r1
   cmd_type=CMD_NONE;
    101e:	10 92 2d 01 	sts	0x012D, r1
}
    1022:	08 95       	ret

00001024 <uart_test_hit>:
/*_____ M A C R O S ________________________________________________________*/


bit uart_test_hit(void)
{
  return (Lin_rx_response_ready());
    1024:	80 91 c9 00 	lds	r24, 0x00C9
}
    1028:	81 70       	andi	r24, 0x01	; 1
    102a:	08 95       	ret

0000102c <uart_init>:


bit uart_init(void)
{
   Lin_set_btr_brr(BITSAMPLING,BAUDRATE);
    102c:	e8 ec       	ldi	r30, 0xC8	; 200
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	90 81       	ld	r25, Z
    1032:	80 81       	ld	r24, Z
    1034:	87 7f       	andi	r24, 0xF7	; 247
    1036:	80 83       	st	Z, r24
    1038:	88 e8       	ldi	r24, 0x88	; 136
    103a:	80 93 cc 00 	sts	0x00CC, r24
    103e:	10 92 ce 00 	sts	0x00CE, r1
    1042:	83 e3       	ldi	r24, 0x33	; 51
    1044:	80 93 cd 00 	sts	0x00CD, r24
    1048:	90 83       	st	Z, r25
   Byte_transfer_enable();
    104a:	8f e0       	ldi	r24, 0x0F	; 15
    104c:	80 83       	st	Z, r24
   Lin_set_data(0xFF);
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	80 93 d2 00 	sts	0x00D2, r24
   return TRUE;
}
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	08 95       	ret

00001058 <uart_putchar>:


r_uart_ptchar uart_putchar(p_uart_ptchar ch)
{
    1058:	28 2f       	mov	r18, r24
   while (!Lin_tx_response_ready());
    105a:	80 91 c9 00 	lds	r24, 0x00C9
    105e:	81 ff       	sbrs	r24, 1
    1060:	fc cf       	rjmp	.-8      	; 0x105a <uart_putchar+0x2>
   Lin_set_data(ch);
    1062:	20 93 d2 00 	sts	0x00D2, r18
   return (ch);
}
    1066:	82 2f       	mov	r24, r18
    1068:	08 95       	ret

0000106a <uart_getchar>:



r_uart_gtchar uart_getchar(void)
{
    while(!Lin_rx_response_ready());
    106a:	80 91 c9 00 	lds	r24, 0x00C9
    106e:	80 ff       	sbrs	r24, 0
    1070:	fc cf       	rjmp	.-8      	; 0x106a <uart_getchar>
    return Lin_get_data();
    1072:	80 91 d2 00 	lds	r24, 0x00D2
}
    1076:	08 95       	ret

00001078 <__divmodsi4>:
    1078:	97 fb       	bst	r25, 7
    107a:	09 2e       	mov	r0, r25
    107c:	05 26       	eor	r0, r21
    107e:	0e d0       	rcall	.+28     	; 0x109c <__divmodsi4_neg1>
    1080:	57 fd       	sbrc	r21, 7
    1082:	04 d0       	rcall	.+8      	; 0x108c <__divmodsi4_neg2>
    1084:	14 d0       	rcall	.+40     	; 0x10ae <__udivmodsi4>
    1086:	0a d0       	rcall	.+20     	; 0x109c <__divmodsi4_neg1>
    1088:	00 1c       	adc	r0, r0
    108a:	38 f4       	brcc	.+14     	; 0x109a <__divmodsi4_exit>

0000108c <__divmodsi4_neg2>:
    108c:	50 95       	com	r21
    108e:	40 95       	com	r20
    1090:	30 95       	com	r19
    1092:	21 95       	neg	r18
    1094:	3f 4f       	sbci	r19, 0xFF	; 255
    1096:	4f 4f       	sbci	r20, 0xFF	; 255
    1098:	5f 4f       	sbci	r21, 0xFF	; 255

0000109a <__divmodsi4_exit>:
    109a:	08 95       	ret

0000109c <__divmodsi4_neg1>:
    109c:	f6 f7       	brtc	.-4      	; 0x109a <__divmodsi4_exit>
    109e:	90 95       	com	r25
    10a0:	80 95       	com	r24
    10a2:	70 95       	com	r23
    10a4:	61 95       	neg	r22
    10a6:	7f 4f       	sbci	r23, 0xFF	; 255
    10a8:	8f 4f       	sbci	r24, 0xFF	; 255
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	08 95       	ret

000010ae <__udivmodsi4>:
    10ae:	a1 e2       	ldi	r26, 0x21	; 33
    10b0:	1a 2e       	mov	r1, r26
    10b2:	aa 1b       	sub	r26, r26
    10b4:	bb 1b       	sub	r27, r27
    10b6:	fd 01       	movw	r30, r26
    10b8:	0d c0       	rjmp	.+26     	; 0x10d4 <__udivmodsi4_ep>

000010ba <__udivmodsi4_loop>:
    10ba:	aa 1f       	adc	r26, r26
    10bc:	bb 1f       	adc	r27, r27
    10be:	ee 1f       	adc	r30, r30
    10c0:	ff 1f       	adc	r31, r31
    10c2:	a2 17       	cp	r26, r18
    10c4:	b3 07       	cpc	r27, r19
    10c6:	e4 07       	cpc	r30, r20
    10c8:	f5 07       	cpc	r31, r21
    10ca:	20 f0       	brcs	.+8      	; 0x10d4 <__udivmodsi4_ep>
    10cc:	a2 1b       	sub	r26, r18
    10ce:	b3 0b       	sbc	r27, r19
    10d0:	e4 0b       	sbc	r30, r20
    10d2:	f5 0b       	sbc	r31, r21

000010d4 <__udivmodsi4_ep>:
    10d4:	66 1f       	adc	r22, r22
    10d6:	77 1f       	adc	r23, r23
    10d8:	88 1f       	adc	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	1a 94       	dec	r1
    10de:	69 f7       	brne	.-38     	; 0x10ba <__udivmodsi4_loop>
    10e0:	60 95       	com	r22
    10e2:	70 95       	com	r23
    10e4:	80 95       	com	r24
    10e6:	90 95       	com	r25
    10e8:	9b 01       	movw	r18, r22
    10ea:	ac 01       	movw	r20, r24
    10ec:	bd 01       	movw	r22, r26
    10ee:	cf 01       	movw	r24, r30
    10f0:	08 95       	ret

000010f2 <printf>:
    10f2:	a0 e0       	ldi	r26, 0x00	; 0
    10f4:	b0 e0       	ldi	r27, 0x00	; 0
    10f6:	ef e7       	ldi	r30, 0x7F	; 127
    10f8:	f8 e0       	ldi	r31, 0x08	; 8
    10fa:	0c 94 1b 0b 	jmp	0x1636	; 0x1636 <__prologue_saves__+0x20>
    10fe:	fe 01       	movw	r30, r28
    1100:	35 96       	adiw	r30, 0x05	; 5
    1102:	61 91       	ld	r22, Z+
    1104:	71 91       	ld	r23, Z+
    1106:	80 91 6c 01 	lds	r24, 0x016C
    110a:	90 91 6d 01 	lds	r25, 0x016D
    110e:	af 01       	movw	r20, r30
    1110:	0e 94 8e 08 	call	0x111c	; 0x111c <vfprintf>
    1114:	20 96       	adiw	r28, 0x00	; 0
    1116:	e2 e0       	ldi	r30, 0x02	; 2
    1118:	0c 94 37 0b 	jmp	0x166e	; 0x166e <__epilogue_restores__+0x20>

0000111c <vfprintf>:
    111c:	ab e0       	ldi	r26, 0x0B	; 11
    111e:	b0 e0       	ldi	r27, 0x00	; 0
    1120:	e4 e9       	ldi	r30, 0x94	; 148
    1122:	f8 e0       	ldi	r31, 0x08	; 8
    1124:	0c 94 0b 0b 	jmp	0x1616	; 0x1616 <__prologue_saves__>
    1128:	3c 01       	movw	r6, r24
    112a:	2b 01       	movw	r4, r22
    112c:	5a 01       	movw	r10, r20
    112e:	fc 01       	movw	r30, r24
    1130:	17 82       	std	Z+7, r1	; 0x07
    1132:	16 82       	std	Z+6, r1	; 0x06
    1134:	83 81       	ldd	r24, Z+3	; 0x03
    1136:	81 fd       	sbrc	r24, 1
    1138:	03 c0       	rjmp	.+6      	; 0x1140 <vfprintf+0x24>
    113a:	6f ef       	ldi	r22, 0xFF	; 255
    113c:	7f ef       	ldi	r23, 0xFF	; 255
    113e:	c6 c1       	rjmp	.+908    	; 0x14cc <vfprintf+0x3b0>
    1140:	9a e0       	ldi	r25, 0x0A	; 10
    1142:	89 2e       	mov	r8, r25
    1144:	1e 01       	movw	r2, r28
    1146:	08 94       	sec
    1148:	21 1c       	adc	r2, r1
    114a:	31 1c       	adc	r3, r1
    114c:	f3 01       	movw	r30, r6
    114e:	23 81       	ldd	r18, Z+3	; 0x03
    1150:	f2 01       	movw	r30, r4
    1152:	23 fd       	sbrc	r18, 3
    1154:	85 91       	lpm	r24, Z+
    1156:	23 ff       	sbrs	r18, 3
    1158:	81 91       	ld	r24, Z+
    115a:	2f 01       	movw	r4, r30
    115c:	88 23       	and	r24, r24
    115e:	09 f4       	brne	.+2      	; 0x1162 <vfprintf+0x46>
    1160:	b2 c1       	rjmp	.+868    	; 0x14c6 <vfprintf+0x3aa>
    1162:	85 32       	cpi	r24, 0x25	; 37
    1164:	39 f4       	brne	.+14     	; 0x1174 <vfprintf+0x58>
    1166:	23 fd       	sbrc	r18, 3
    1168:	85 91       	lpm	r24, Z+
    116a:	23 ff       	sbrs	r18, 3
    116c:	81 91       	ld	r24, Z+
    116e:	2f 01       	movw	r4, r30
    1170:	85 32       	cpi	r24, 0x25	; 37
    1172:	29 f4       	brne	.+10     	; 0x117e <vfprintf+0x62>
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	b3 01       	movw	r22, r6
    1178:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    117c:	e7 cf       	rjmp	.-50     	; 0x114c <vfprintf+0x30>
    117e:	98 2f       	mov	r25, r24
    1180:	ff 24       	eor	r15, r15
    1182:	ee 24       	eor	r14, r14
    1184:	99 24       	eor	r9, r9
    1186:	ff e1       	ldi	r31, 0x1F	; 31
    1188:	ff 15       	cp	r31, r15
    118a:	d0 f0       	brcs	.+52     	; 0x11c0 <vfprintf+0xa4>
    118c:	9b 32       	cpi	r25, 0x2B	; 43
    118e:	69 f0       	breq	.+26     	; 0x11aa <vfprintf+0x8e>
    1190:	9c 32       	cpi	r25, 0x2C	; 44
    1192:	28 f4       	brcc	.+10     	; 0x119e <vfprintf+0x82>
    1194:	90 32       	cpi	r25, 0x20	; 32
    1196:	59 f0       	breq	.+22     	; 0x11ae <vfprintf+0x92>
    1198:	93 32       	cpi	r25, 0x23	; 35
    119a:	91 f4       	brne	.+36     	; 0x11c0 <vfprintf+0xa4>
    119c:	0e c0       	rjmp	.+28     	; 0x11ba <vfprintf+0x9e>
    119e:	9d 32       	cpi	r25, 0x2D	; 45
    11a0:	49 f0       	breq	.+18     	; 0x11b4 <vfprintf+0x98>
    11a2:	90 33       	cpi	r25, 0x30	; 48
    11a4:	69 f4       	brne	.+26     	; 0x11c0 <vfprintf+0xa4>
    11a6:	41 e0       	ldi	r20, 0x01	; 1
    11a8:	24 c0       	rjmp	.+72     	; 0x11f2 <vfprintf+0xd6>
    11aa:	52 e0       	ldi	r21, 0x02	; 2
    11ac:	f5 2a       	or	r15, r21
    11ae:	84 e0       	ldi	r24, 0x04	; 4
    11b0:	f8 2a       	or	r15, r24
    11b2:	28 c0       	rjmp	.+80     	; 0x1204 <vfprintf+0xe8>
    11b4:	98 e0       	ldi	r25, 0x08	; 8
    11b6:	f9 2a       	or	r15, r25
    11b8:	25 c0       	rjmp	.+74     	; 0x1204 <vfprintf+0xe8>
    11ba:	e0 e1       	ldi	r30, 0x10	; 16
    11bc:	fe 2a       	or	r15, r30
    11be:	22 c0       	rjmp	.+68     	; 0x1204 <vfprintf+0xe8>
    11c0:	f7 fc       	sbrc	r15, 7
    11c2:	29 c0       	rjmp	.+82     	; 0x1216 <vfprintf+0xfa>
    11c4:	89 2f       	mov	r24, r25
    11c6:	80 53       	subi	r24, 0x30	; 48
    11c8:	8a 30       	cpi	r24, 0x0A	; 10
    11ca:	70 f4       	brcc	.+28     	; 0x11e8 <vfprintf+0xcc>
    11cc:	f6 fe       	sbrs	r15, 6
    11ce:	05 c0       	rjmp	.+10     	; 0x11da <vfprintf+0xbe>
    11d0:	98 9c       	mul	r9, r8
    11d2:	90 2c       	mov	r9, r0
    11d4:	11 24       	eor	r1, r1
    11d6:	98 0e       	add	r9, r24
    11d8:	15 c0       	rjmp	.+42     	; 0x1204 <vfprintf+0xe8>
    11da:	e8 9c       	mul	r14, r8
    11dc:	e0 2c       	mov	r14, r0
    11de:	11 24       	eor	r1, r1
    11e0:	e8 0e       	add	r14, r24
    11e2:	f0 e2       	ldi	r31, 0x20	; 32
    11e4:	ff 2a       	or	r15, r31
    11e6:	0e c0       	rjmp	.+28     	; 0x1204 <vfprintf+0xe8>
    11e8:	9e 32       	cpi	r25, 0x2E	; 46
    11ea:	29 f4       	brne	.+10     	; 0x11f6 <vfprintf+0xda>
    11ec:	f6 fc       	sbrc	r15, 6
    11ee:	6b c1       	rjmp	.+726    	; 0x14c6 <vfprintf+0x3aa>
    11f0:	40 e4       	ldi	r20, 0x40	; 64
    11f2:	f4 2a       	or	r15, r20
    11f4:	07 c0       	rjmp	.+14     	; 0x1204 <vfprintf+0xe8>
    11f6:	9c 36       	cpi	r25, 0x6C	; 108
    11f8:	19 f4       	brne	.+6      	; 0x1200 <vfprintf+0xe4>
    11fa:	50 e8       	ldi	r21, 0x80	; 128
    11fc:	f5 2a       	or	r15, r21
    11fe:	02 c0       	rjmp	.+4      	; 0x1204 <vfprintf+0xe8>
    1200:	98 36       	cpi	r25, 0x68	; 104
    1202:	49 f4       	brne	.+18     	; 0x1216 <vfprintf+0xfa>
    1204:	f2 01       	movw	r30, r4
    1206:	23 fd       	sbrc	r18, 3
    1208:	95 91       	lpm	r25, Z+
    120a:	23 ff       	sbrs	r18, 3
    120c:	91 91       	ld	r25, Z+
    120e:	2f 01       	movw	r4, r30
    1210:	99 23       	and	r25, r25
    1212:	09 f0       	breq	.+2      	; 0x1216 <vfprintf+0xfa>
    1214:	b8 cf       	rjmp	.-144    	; 0x1186 <vfprintf+0x6a>
    1216:	89 2f       	mov	r24, r25
    1218:	85 54       	subi	r24, 0x45	; 69
    121a:	83 30       	cpi	r24, 0x03	; 3
    121c:	18 f0       	brcs	.+6      	; 0x1224 <vfprintf+0x108>
    121e:	80 52       	subi	r24, 0x20	; 32
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	38 f4       	brcc	.+14     	; 0x1232 <vfprintf+0x116>
    1224:	44 e0       	ldi	r20, 0x04	; 4
    1226:	50 e0       	ldi	r21, 0x00	; 0
    1228:	a4 0e       	add	r10, r20
    122a:	b5 1e       	adc	r11, r21
    122c:	5f e3       	ldi	r21, 0x3F	; 63
    122e:	59 83       	std	Y+1, r21	; 0x01
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <vfprintf+0x134>
    1232:	93 36       	cpi	r25, 0x63	; 99
    1234:	31 f0       	breq	.+12     	; 0x1242 <vfprintf+0x126>
    1236:	93 37       	cpi	r25, 0x73	; 115
    1238:	79 f0       	breq	.+30     	; 0x1258 <vfprintf+0x13c>
    123a:	93 35       	cpi	r25, 0x53	; 83
    123c:	09 f0       	breq	.+2      	; 0x1240 <vfprintf+0x124>
    123e:	56 c0       	rjmp	.+172    	; 0x12ec <vfprintf+0x1d0>
    1240:	20 c0       	rjmp	.+64     	; 0x1282 <vfprintf+0x166>
    1242:	f5 01       	movw	r30, r10
    1244:	80 81       	ld	r24, Z
    1246:	89 83       	std	Y+1, r24	; 0x01
    1248:	42 e0       	ldi	r20, 0x02	; 2
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	a4 0e       	add	r10, r20
    124e:	b5 1e       	adc	r11, r21
    1250:	61 01       	movw	r12, r2
    1252:	01 e0       	ldi	r16, 0x01	; 1
    1254:	10 e0       	ldi	r17, 0x00	; 0
    1256:	12 c0       	rjmp	.+36     	; 0x127c <vfprintf+0x160>
    1258:	f5 01       	movw	r30, r10
    125a:	c0 80       	ld	r12, Z
    125c:	d1 80       	ldd	r13, Z+1	; 0x01
    125e:	f6 fc       	sbrc	r15, 6
    1260:	03 c0       	rjmp	.+6      	; 0x1268 <vfprintf+0x14c>
    1262:	6f ef       	ldi	r22, 0xFF	; 255
    1264:	7f ef       	ldi	r23, 0xFF	; 255
    1266:	02 c0       	rjmp	.+4      	; 0x126c <vfprintf+0x150>
    1268:	69 2d       	mov	r22, r9
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	42 e0       	ldi	r20, 0x02	; 2
    126e:	50 e0       	ldi	r21, 0x00	; 0
    1270:	a4 0e       	add	r10, r20
    1272:	b5 1e       	adc	r11, r21
    1274:	c6 01       	movw	r24, r12
    1276:	0e 94 76 0a 	call	0x14ec	; 0x14ec <strnlen>
    127a:	8c 01       	movw	r16, r24
    127c:	5f e7       	ldi	r21, 0x7F	; 127
    127e:	f5 22       	and	r15, r21
    1280:	14 c0       	rjmp	.+40     	; 0x12aa <vfprintf+0x18e>
    1282:	f5 01       	movw	r30, r10
    1284:	c0 80       	ld	r12, Z
    1286:	d1 80       	ldd	r13, Z+1	; 0x01
    1288:	f6 fc       	sbrc	r15, 6
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <vfprintf+0x176>
    128c:	6f ef       	ldi	r22, 0xFF	; 255
    128e:	7f ef       	ldi	r23, 0xFF	; 255
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <vfprintf+0x17a>
    1292:	69 2d       	mov	r22, r9
    1294:	70 e0       	ldi	r23, 0x00	; 0
    1296:	42 e0       	ldi	r20, 0x02	; 2
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	a4 0e       	add	r10, r20
    129c:	b5 1e       	adc	r11, r21
    129e:	c6 01       	movw	r24, r12
    12a0:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <strnlen_P>
    12a4:	8c 01       	movw	r16, r24
    12a6:	50 e8       	ldi	r21, 0x80	; 128
    12a8:	f5 2a       	or	r15, r21
    12aa:	f3 fe       	sbrs	r15, 3
    12ac:	07 c0       	rjmp	.+14     	; 0x12bc <vfprintf+0x1a0>
    12ae:	1a c0       	rjmp	.+52     	; 0x12e4 <vfprintf+0x1c8>
    12b0:	80 e2       	ldi	r24, 0x20	; 32
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	b3 01       	movw	r22, r6
    12b6:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    12ba:	ea 94       	dec	r14
    12bc:	8e 2d       	mov	r24, r14
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	08 17       	cp	r16, r24
    12c2:	19 07       	cpc	r17, r25
    12c4:	a8 f3       	brcs	.-22     	; 0x12b0 <vfprintf+0x194>
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <vfprintf+0x1c8>
    12c8:	f6 01       	movw	r30, r12
    12ca:	f7 fc       	sbrc	r15, 7
    12cc:	85 91       	lpm	r24, Z+
    12ce:	f7 fe       	sbrs	r15, 7
    12d0:	81 91       	ld	r24, Z+
    12d2:	6f 01       	movw	r12, r30
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	b3 01       	movw	r22, r6
    12d8:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    12dc:	e1 10       	cpse	r14, r1
    12de:	ea 94       	dec	r14
    12e0:	01 50       	subi	r16, 0x01	; 1
    12e2:	10 40       	sbci	r17, 0x00	; 0
    12e4:	01 15       	cp	r16, r1
    12e6:	11 05       	cpc	r17, r1
    12e8:	79 f7       	brne	.-34     	; 0x12c8 <vfprintf+0x1ac>
    12ea:	ea c0       	rjmp	.+468    	; 0x14c0 <vfprintf+0x3a4>
    12ec:	94 36       	cpi	r25, 0x64	; 100
    12ee:	11 f0       	breq	.+4      	; 0x12f4 <vfprintf+0x1d8>
    12f0:	99 36       	cpi	r25, 0x69	; 105
    12f2:	69 f5       	brne	.+90     	; 0x134e <vfprintf+0x232>
    12f4:	f7 fe       	sbrs	r15, 7
    12f6:	08 c0       	rjmp	.+16     	; 0x1308 <vfprintf+0x1ec>
    12f8:	f5 01       	movw	r30, r10
    12fa:	20 81       	ld	r18, Z
    12fc:	31 81       	ldd	r19, Z+1	; 0x01
    12fe:	42 81       	ldd	r20, Z+2	; 0x02
    1300:	53 81       	ldd	r21, Z+3	; 0x03
    1302:	84 e0       	ldi	r24, 0x04	; 4
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0a c0       	rjmp	.+20     	; 0x131c <vfprintf+0x200>
    1308:	f5 01       	movw	r30, r10
    130a:	80 81       	ld	r24, Z
    130c:	91 81       	ldd	r25, Z+1	; 0x01
    130e:	9c 01       	movw	r18, r24
    1310:	44 27       	eor	r20, r20
    1312:	37 fd       	sbrc	r19, 7
    1314:	40 95       	com	r20
    1316:	54 2f       	mov	r21, r20
    1318:	82 e0       	ldi	r24, 0x02	; 2
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a8 0e       	add	r10, r24
    131e:	b9 1e       	adc	r11, r25
    1320:	9f e6       	ldi	r25, 0x6F	; 111
    1322:	f9 22       	and	r15, r25
    1324:	57 ff       	sbrs	r21, 7
    1326:	09 c0       	rjmp	.+18     	; 0x133a <vfprintf+0x21e>
    1328:	50 95       	com	r21
    132a:	40 95       	com	r20
    132c:	30 95       	com	r19
    132e:	21 95       	neg	r18
    1330:	3f 4f       	sbci	r19, 0xFF	; 255
    1332:	4f 4f       	sbci	r20, 0xFF	; 255
    1334:	5f 4f       	sbci	r21, 0xFF	; 255
    1336:	e0 e8       	ldi	r30, 0x80	; 128
    1338:	fe 2a       	or	r15, r30
    133a:	ca 01       	movw	r24, r20
    133c:	b9 01       	movw	r22, r18
    133e:	a1 01       	movw	r20, r2
    1340:	2a e0       	ldi	r18, 0x0A	; 10
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	0e 94 ad 0a 	call	0x155a	; 0x155a <__ultoa_invert>
    1348:	d8 2e       	mov	r13, r24
    134a:	d2 18       	sub	r13, r2
    134c:	40 c0       	rjmp	.+128    	; 0x13ce <vfprintf+0x2b2>
    134e:	95 37       	cpi	r25, 0x75	; 117
    1350:	29 f4       	brne	.+10     	; 0x135c <vfprintf+0x240>
    1352:	1f 2d       	mov	r17, r15
    1354:	1f 7e       	andi	r17, 0xEF	; 239
    1356:	2a e0       	ldi	r18, 0x0A	; 10
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	1d c0       	rjmp	.+58     	; 0x1396 <vfprintf+0x27a>
    135c:	1f 2d       	mov	r17, r15
    135e:	19 7f       	andi	r17, 0xF9	; 249
    1360:	9f 36       	cpi	r25, 0x6F	; 111
    1362:	61 f0       	breq	.+24     	; 0x137c <vfprintf+0x260>
    1364:	90 37       	cpi	r25, 0x70	; 112
    1366:	20 f4       	brcc	.+8      	; 0x1370 <vfprintf+0x254>
    1368:	98 35       	cpi	r25, 0x58	; 88
    136a:	09 f0       	breq	.+2      	; 0x136e <vfprintf+0x252>
    136c:	ac c0       	rjmp	.+344    	; 0x14c6 <vfprintf+0x3aa>
    136e:	0f c0       	rjmp	.+30     	; 0x138e <vfprintf+0x272>
    1370:	90 37       	cpi	r25, 0x70	; 112
    1372:	39 f0       	breq	.+14     	; 0x1382 <vfprintf+0x266>
    1374:	98 37       	cpi	r25, 0x78	; 120
    1376:	09 f0       	breq	.+2      	; 0x137a <vfprintf+0x25e>
    1378:	a6 c0       	rjmp	.+332    	; 0x14c6 <vfprintf+0x3aa>
    137a:	04 c0       	rjmp	.+8      	; 0x1384 <vfprintf+0x268>
    137c:	28 e0       	ldi	r18, 0x08	; 8
    137e:	30 e0       	ldi	r19, 0x00	; 0
    1380:	0a c0       	rjmp	.+20     	; 0x1396 <vfprintf+0x27a>
    1382:	10 61       	ori	r17, 0x10	; 16
    1384:	14 fd       	sbrc	r17, 4
    1386:	14 60       	ori	r17, 0x04	; 4
    1388:	20 e1       	ldi	r18, 0x10	; 16
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	04 c0       	rjmp	.+8      	; 0x1396 <vfprintf+0x27a>
    138e:	14 fd       	sbrc	r17, 4
    1390:	16 60       	ori	r17, 0x06	; 6
    1392:	20 e1       	ldi	r18, 0x10	; 16
    1394:	32 e0       	ldi	r19, 0x02	; 2
    1396:	17 ff       	sbrs	r17, 7
    1398:	08 c0       	rjmp	.+16     	; 0x13aa <vfprintf+0x28e>
    139a:	f5 01       	movw	r30, r10
    139c:	60 81       	ld	r22, Z
    139e:	71 81       	ldd	r23, Z+1	; 0x01
    13a0:	82 81       	ldd	r24, Z+2	; 0x02
    13a2:	93 81       	ldd	r25, Z+3	; 0x03
    13a4:	44 e0       	ldi	r20, 0x04	; 4
    13a6:	50 e0       	ldi	r21, 0x00	; 0
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <vfprintf+0x29e>
    13aa:	f5 01       	movw	r30, r10
    13ac:	80 81       	ld	r24, Z
    13ae:	91 81       	ldd	r25, Z+1	; 0x01
    13b0:	bc 01       	movw	r22, r24
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	42 e0       	ldi	r20, 0x02	; 2
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	a4 0e       	add	r10, r20
    13bc:	b5 1e       	adc	r11, r21
    13be:	a1 01       	movw	r20, r2
    13c0:	0e 94 ad 0a 	call	0x155a	; 0x155a <__ultoa_invert>
    13c4:	d8 2e       	mov	r13, r24
    13c6:	d2 18       	sub	r13, r2
    13c8:	8f e7       	ldi	r24, 0x7F	; 127
    13ca:	f8 2e       	mov	r15, r24
    13cc:	f1 22       	and	r15, r17
    13ce:	f6 fe       	sbrs	r15, 6
    13d0:	0b c0       	rjmp	.+22     	; 0x13e8 <vfprintf+0x2cc>
    13d2:	5e ef       	ldi	r21, 0xFE	; 254
    13d4:	f5 22       	and	r15, r21
    13d6:	d9 14       	cp	r13, r9
    13d8:	38 f4       	brcc	.+14     	; 0x13e8 <vfprintf+0x2cc>
    13da:	f4 fe       	sbrs	r15, 4
    13dc:	07 c0       	rjmp	.+14     	; 0x13ec <vfprintf+0x2d0>
    13de:	f2 fc       	sbrc	r15, 2
    13e0:	05 c0       	rjmp	.+10     	; 0x13ec <vfprintf+0x2d0>
    13e2:	8f ee       	ldi	r24, 0xEF	; 239
    13e4:	f8 22       	and	r15, r24
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <vfprintf+0x2d0>
    13e8:	1d 2d       	mov	r17, r13
    13ea:	01 c0       	rjmp	.+2      	; 0x13ee <vfprintf+0x2d2>
    13ec:	19 2d       	mov	r17, r9
    13ee:	f4 fe       	sbrs	r15, 4
    13f0:	0d c0       	rjmp	.+26     	; 0x140c <vfprintf+0x2f0>
    13f2:	fe 01       	movw	r30, r28
    13f4:	ed 0d       	add	r30, r13
    13f6:	f1 1d       	adc	r31, r1
    13f8:	80 81       	ld	r24, Z
    13fa:	80 33       	cpi	r24, 0x30	; 48
    13fc:	19 f4       	brne	.+6      	; 0x1404 <vfprintf+0x2e8>
    13fe:	99 ee       	ldi	r25, 0xE9	; 233
    1400:	f9 22       	and	r15, r25
    1402:	08 c0       	rjmp	.+16     	; 0x1414 <vfprintf+0x2f8>
    1404:	1f 5f       	subi	r17, 0xFF	; 255
    1406:	f2 fe       	sbrs	r15, 2
    1408:	05 c0       	rjmp	.+10     	; 0x1414 <vfprintf+0x2f8>
    140a:	03 c0       	rjmp	.+6      	; 0x1412 <vfprintf+0x2f6>
    140c:	8f 2d       	mov	r24, r15
    140e:	86 78       	andi	r24, 0x86	; 134
    1410:	09 f0       	breq	.+2      	; 0x1414 <vfprintf+0x2f8>
    1412:	1f 5f       	subi	r17, 0xFF	; 255
    1414:	0f 2d       	mov	r16, r15
    1416:	f3 fc       	sbrc	r15, 3
    1418:	14 c0       	rjmp	.+40     	; 0x1442 <vfprintf+0x326>
    141a:	f0 fe       	sbrs	r15, 0
    141c:	0f c0       	rjmp	.+30     	; 0x143c <vfprintf+0x320>
    141e:	1e 15       	cp	r17, r14
    1420:	10 f0       	brcs	.+4      	; 0x1426 <vfprintf+0x30a>
    1422:	9d 2c       	mov	r9, r13
    1424:	0b c0       	rjmp	.+22     	; 0x143c <vfprintf+0x320>
    1426:	9d 2c       	mov	r9, r13
    1428:	9e 0c       	add	r9, r14
    142a:	91 1a       	sub	r9, r17
    142c:	1e 2d       	mov	r17, r14
    142e:	06 c0       	rjmp	.+12     	; 0x143c <vfprintf+0x320>
    1430:	80 e2       	ldi	r24, 0x20	; 32
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	b3 01       	movw	r22, r6
    1436:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    143a:	1f 5f       	subi	r17, 0xFF	; 255
    143c:	1e 15       	cp	r17, r14
    143e:	c0 f3       	brcs	.-16     	; 0x1430 <vfprintf+0x314>
    1440:	04 c0       	rjmp	.+8      	; 0x144a <vfprintf+0x32e>
    1442:	1e 15       	cp	r17, r14
    1444:	10 f4       	brcc	.+4      	; 0x144a <vfprintf+0x32e>
    1446:	e1 1a       	sub	r14, r17
    1448:	01 c0       	rjmp	.+2      	; 0x144c <vfprintf+0x330>
    144a:	ee 24       	eor	r14, r14
    144c:	04 ff       	sbrs	r16, 4
    144e:	0f c0       	rjmp	.+30     	; 0x146e <vfprintf+0x352>
    1450:	80 e3       	ldi	r24, 0x30	; 48
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	b3 01       	movw	r22, r6
    1456:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    145a:	02 ff       	sbrs	r16, 2
    145c:	1d c0       	rjmp	.+58     	; 0x1498 <vfprintf+0x37c>
    145e:	01 fd       	sbrc	r16, 1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <vfprintf+0x34c>
    1462:	88 e7       	ldi	r24, 0x78	; 120
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	0e c0       	rjmp	.+28     	; 0x1484 <vfprintf+0x368>
    1468:	88 e5       	ldi	r24, 0x58	; 88
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	0b c0       	rjmp	.+22     	; 0x1484 <vfprintf+0x368>
    146e:	80 2f       	mov	r24, r16
    1470:	86 78       	andi	r24, 0x86	; 134
    1472:	91 f0       	breq	.+36     	; 0x1498 <vfprintf+0x37c>
    1474:	01 ff       	sbrs	r16, 1
    1476:	02 c0       	rjmp	.+4      	; 0x147c <vfprintf+0x360>
    1478:	8b e2       	ldi	r24, 0x2B	; 43
    147a:	01 c0       	rjmp	.+2      	; 0x147e <vfprintf+0x362>
    147c:	80 e2       	ldi	r24, 0x20	; 32
    147e:	f7 fc       	sbrc	r15, 7
    1480:	8d e2       	ldi	r24, 0x2D	; 45
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	b3 01       	movw	r22, r6
    1486:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    148a:	06 c0       	rjmp	.+12     	; 0x1498 <vfprintf+0x37c>
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	b3 01       	movw	r22, r6
    1492:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    1496:	9a 94       	dec	r9
    1498:	d9 14       	cp	r13, r9
    149a:	c0 f3       	brcs	.-16     	; 0x148c <vfprintf+0x370>
    149c:	da 94       	dec	r13
    149e:	f1 01       	movw	r30, r2
    14a0:	ed 0d       	add	r30, r13
    14a2:	f1 1d       	adc	r31, r1
    14a4:	80 81       	ld	r24, Z
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	b3 01       	movw	r22, r6
    14aa:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    14ae:	dd 20       	and	r13, r13
    14b0:	a9 f7       	brne	.-22     	; 0x149c <vfprintf+0x380>
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0x3a4>
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	b3 01       	movw	r22, r6
    14ba:	0e 94 81 0a 	call	0x1502	; 0x1502 <fputc>
    14be:	ea 94       	dec	r14
    14c0:	ee 20       	and	r14, r14
    14c2:	c1 f7       	brne	.-16     	; 0x14b4 <vfprintf+0x398>
    14c4:	43 ce       	rjmp	.-890    	; 0x114c <vfprintf+0x30>
    14c6:	f3 01       	movw	r30, r6
    14c8:	66 81       	ldd	r22, Z+6	; 0x06
    14ca:	77 81       	ldd	r23, Z+7	; 0x07
    14cc:	cb 01       	movw	r24, r22
    14ce:	2b 96       	adiw	r28, 0x0b	; 11
    14d0:	e2 e1       	ldi	r30, 0x12	; 18
    14d2:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__epilogue_restores__>

000014d6 <strnlen_P>:
    14d6:	fc 01       	movw	r30, r24
    14d8:	05 90       	lpm	r0, Z+
    14da:	61 50       	subi	r22, 0x01	; 1
    14dc:	70 40       	sbci	r23, 0x00	; 0
    14de:	01 10       	cpse	r0, r1
    14e0:	d8 f7       	brcc	.-10     	; 0x14d8 <strnlen_P+0x2>
    14e2:	80 95       	com	r24
    14e4:	90 95       	com	r25
    14e6:	8e 0f       	add	r24, r30
    14e8:	9f 1f       	adc	r25, r31
    14ea:	08 95       	ret

000014ec <strnlen>:
    14ec:	fc 01       	movw	r30, r24
    14ee:	61 50       	subi	r22, 0x01	; 1
    14f0:	70 40       	sbci	r23, 0x00	; 0
    14f2:	01 90       	ld	r0, Z+
    14f4:	01 10       	cpse	r0, r1
    14f6:	d8 f7       	brcc	.-10     	; 0x14ee <strnlen+0x2>
    14f8:	80 95       	com	r24
    14fa:	90 95       	com	r25
    14fc:	8e 0f       	add	r24, r30
    14fe:	9f 1f       	adc	r25, r31
    1500:	08 95       	ret

00001502 <fputc>:
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	8c 01       	movw	r16, r24
    150c:	eb 01       	movw	r28, r22
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 ff       	sbrs	r24, 1
    1512:	1b c0       	rjmp	.+54     	; 0x154a <fputc+0x48>
    1514:	82 ff       	sbrs	r24, 2
    1516:	0d c0       	rjmp	.+26     	; 0x1532 <fputc+0x30>
    1518:	2e 81       	ldd	r18, Y+6	; 0x06
    151a:	3f 81       	ldd	r19, Y+7	; 0x07
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	28 17       	cp	r18, r24
    1522:	39 07       	cpc	r19, r25
    1524:	64 f4       	brge	.+24     	; 0x153e <fputc+0x3c>
    1526:	e8 81       	ld	r30, Y
    1528:	f9 81       	ldd	r31, Y+1	; 0x01
    152a:	01 93       	st	Z+, r16
    152c:	f9 83       	std	Y+1, r31	; 0x01
    152e:	e8 83       	st	Y, r30
    1530:	06 c0       	rjmp	.+12     	; 0x153e <fputc+0x3c>
    1532:	e8 85       	ldd	r30, Y+8	; 0x08
    1534:	f9 85       	ldd	r31, Y+9	; 0x09
    1536:	80 2f       	mov	r24, r16
    1538:	09 95       	icall
    153a:	89 2b       	or	r24, r25
    153c:	31 f4       	brne	.+12     	; 0x154a <fputc+0x48>
    153e:	8e 81       	ldd	r24, Y+6	; 0x06
    1540:	9f 81       	ldd	r25, Y+7	; 0x07
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	9f 83       	std	Y+7, r25	; 0x07
    1546:	8e 83       	std	Y+6, r24	; 0x06
    1548:	02 c0       	rjmp	.+4      	; 0x154e <fputc+0x4c>
    154a:	0f ef       	ldi	r16, 0xFF	; 255
    154c:	1f ef       	ldi	r17, 0xFF	; 255
    154e:	c8 01       	movw	r24, r16
    1550:	df 91       	pop	r29
    1552:	cf 91       	pop	r28
    1554:	1f 91       	pop	r17
    1556:	0f 91       	pop	r16
    1558:	08 95       	ret

0000155a <__ultoa_invert>:
    155a:	fa 01       	movw	r30, r20
    155c:	aa 27       	eor	r26, r26
    155e:	28 30       	cpi	r18, 0x08	; 8
    1560:	51 f1       	breq	.+84     	; 0x15b6 <__ultoa_invert+0x5c>
    1562:	20 31       	cpi	r18, 0x10	; 16
    1564:	81 f1       	breq	.+96     	; 0x15c6 <__ultoa_invert+0x6c>
    1566:	e8 94       	clt
    1568:	6f 93       	push	r22
    156a:	6e 7f       	andi	r22, 0xFE	; 254
    156c:	6e 5f       	subi	r22, 0xFE	; 254
    156e:	7f 4f       	sbci	r23, 0xFF	; 255
    1570:	8f 4f       	sbci	r24, 0xFF	; 255
    1572:	9f 4f       	sbci	r25, 0xFF	; 255
    1574:	af 4f       	sbci	r26, 0xFF	; 255
    1576:	b1 e0       	ldi	r27, 0x01	; 1
    1578:	3e d0       	rcall	.+124    	; 0x15f6 <__ultoa_invert+0x9c>
    157a:	b4 e0       	ldi	r27, 0x04	; 4
    157c:	3c d0       	rcall	.+120    	; 0x15f6 <__ultoa_invert+0x9c>
    157e:	67 0f       	add	r22, r23
    1580:	78 1f       	adc	r23, r24
    1582:	89 1f       	adc	r24, r25
    1584:	9a 1f       	adc	r25, r26
    1586:	a1 1d       	adc	r26, r1
    1588:	68 0f       	add	r22, r24
    158a:	79 1f       	adc	r23, r25
    158c:	8a 1f       	adc	r24, r26
    158e:	91 1d       	adc	r25, r1
    1590:	a1 1d       	adc	r26, r1
    1592:	6a 0f       	add	r22, r26
    1594:	71 1d       	adc	r23, r1
    1596:	81 1d       	adc	r24, r1
    1598:	91 1d       	adc	r25, r1
    159a:	a1 1d       	adc	r26, r1
    159c:	20 d0       	rcall	.+64     	; 0x15de <__ultoa_invert+0x84>
    159e:	09 f4       	brne	.+2      	; 0x15a2 <__ultoa_invert+0x48>
    15a0:	68 94       	set
    15a2:	3f 91       	pop	r19
    15a4:	2a e0       	ldi	r18, 0x0A	; 10
    15a6:	26 9f       	mul	r18, r22
    15a8:	11 24       	eor	r1, r1
    15aa:	30 19       	sub	r19, r0
    15ac:	30 5d       	subi	r19, 0xD0	; 208
    15ae:	31 93       	st	Z+, r19
    15b0:	de f6       	brtc	.-74     	; 0x1568 <__ultoa_invert+0xe>
    15b2:	cf 01       	movw	r24, r30
    15b4:	08 95       	ret
    15b6:	46 2f       	mov	r20, r22
    15b8:	47 70       	andi	r20, 0x07	; 7
    15ba:	40 5d       	subi	r20, 0xD0	; 208
    15bc:	41 93       	st	Z+, r20
    15be:	b3 e0       	ldi	r27, 0x03	; 3
    15c0:	0f d0       	rcall	.+30     	; 0x15e0 <__ultoa_invert+0x86>
    15c2:	c9 f7       	brne	.-14     	; 0x15b6 <__ultoa_invert+0x5c>
    15c4:	f6 cf       	rjmp	.-20     	; 0x15b2 <__ultoa_invert+0x58>
    15c6:	46 2f       	mov	r20, r22
    15c8:	4f 70       	andi	r20, 0x0F	; 15
    15ca:	40 5d       	subi	r20, 0xD0	; 208
    15cc:	4a 33       	cpi	r20, 0x3A	; 58
    15ce:	18 f0       	brcs	.+6      	; 0x15d6 <__ultoa_invert+0x7c>
    15d0:	49 5d       	subi	r20, 0xD9	; 217
    15d2:	31 fd       	sbrc	r19, 1
    15d4:	40 52       	subi	r20, 0x20	; 32
    15d6:	41 93       	st	Z+, r20
    15d8:	02 d0       	rcall	.+4      	; 0x15de <__ultoa_invert+0x84>
    15da:	a9 f7       	brne	.-22     	; 0x15c6 <__ultoa_invert+0x6c>
    15dc:	ea cf       	rjmp	.-44     	; 0x15b2 <__ultoa_invert+0x58>
    15de:	b4 e0       	ldi	r27, 0x04	; 4
    15e0:	a6 95       	lsr	r26
    15e2:	97 95       	ror	r25
    15e4:	87 95       	ror	r24
    15e6:	77 95       	ror	r23
    15e8:	67 95       	ror	r22
    15ea:	ba 95       	dec	r27
    15ec:	c9 f7       	brne	.-14     	; 0x15e0 <__ultoa_invert+0x86>
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	61 05       	cpc	r22, r1
    15f2:	71 05       	cpc	r23, r1
    15f4:	08 95       	ret
    15f6:	9b 01       	movw	r18, r22
    15f8:	ac 01       	movw	r20, r24
    15fa:	0a 2e       	mov	r0, r26
    15fc:	06 94       	lsr	r0
    15fe:	57 95       	ror	r21
    1600:	47 95       	ror	r20
    1602:	37 95       	ror	r19
    1604:	27 95       	ror	r18
    1606:	ba 95       	dec	r27
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__ultoa_invert+0xa2>
    160a:	62 0f       	add	r22, r18
    160c:	73 1f       	adc	r23, r19
    160e:	84 1f       	adc	r24, r20
    1610:	95 1f       	adc	r25, r21
    1612:	a0 1d       	adc	r26, r0
    1614:	08 95       	ret

00001616 <__prologue_saves__>:
    1616:	2f 92       	push	r2
    1618:	3f 92       	push	r3
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	6f 92       	push	r6
    1620:	7f 92       	push	r7
    1622:	8f 92       	push	r8
    1624:	9f 92       	push	r9
    1626:	af 92       	push	r10
    1628:	bf 92       	push	r11
    162a:	cf 92       	push	r12
    162c:	df 92       	push	r13
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	cd b7       	in	r28, 0x3d	; 61
    163c:	de b7       	in	r29, 0x3e	; 62
    163e:	ca 1b       	sub	r28, r26
    1640:	db 0b       	sbc	r29, r27
    1642:	0f b6       	in	r0, 0x3f	; 63
    1644:	f8 94       	cli
    1646:	de bf       	out	0x3e, r29	; 62
    1648:	0f be       	out	0x3f, r0	; 63
    164a:	cd bf       	out	0x3d, r28	; 61
    164c:	09 94       	ijmp

0000164e <__epilogue_restores__>:
    164e:	2a 88       	ldd	r2, Y+18	; 0x12
    1650:	39 88       	ldd	r3, Y+17	; 0x11
    1652:	48 88       	ldd	r4, Y+16	; 0x10
    1654:	5f 84       	ldd	r5, Y+15	; 0x0f
    1656:	6e 84       	ldd	r6, Y+14	; 0x0e
    1658:	7d 84       	ldd	r7, Y+13	; 0x0d
    165a:	8c 84       	ldd	r8, Y+12	; 0x0c
    165c:	9b 84       	ldd	r9, Y+11	; 0x0b
    165e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1660:	b9 84       	ldd	r11, Y+9	; 0x09
    1662:	c8 84       	ldd	r12, Y+8	; 0x08
    1664:	df 80       	ldd	r13, Y+7	; 0x07
    1666:	ee 80       	ldd	r14, Y+6	; 0x06
    1668:	fd 80       	ldd	r15, Y+5	; 0x05
    166a:	0c 81       	ldd	r16, Y+4	; 0x04
    166c:	1b 81       	ldd	r17, Y+3	; 0x03
    166e:	aa 81       	ldd	r26, Y+2	; 0x02
    1670:	b9 81       	ldd	r27, Y+1	; 0x01
    1672:	ce 0f       	add	r28, r30
    1674:	d1 1d       	adc	r29, r1
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	de bf       	out	0x3e, r29	; 62
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	cd bf       	out	0x3d, r28	; 61
    1680:	ed 01       	movw	r28, r26
    1682:	08 95       	ret

00001684 <_exit>:
    1684:	f8 94       	cli

00001686 <__stop_program>:
    1686:	ff cf       	rjmp	.-2      	; 0x1686 <__stop_program>
