
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000278  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000002e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000104a  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c73  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d3  00000000  00000000  0000204d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00002620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006b9  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000175  00000000  00000000  00002da1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002f16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 b0 00 	call	0x160	; 0x160 <main>
  8c:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <atmel_start_init>:
  94:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <system_init>
  98:	08 95       	ret

0000009a <phase_init>:
}

void phase_init()
{
	//Pull enable pin high
	BLDC_ENABLE_DDR |= BLDC_ENABLE_MASK; //configure as output
  9a:	24 9a       	sbi	0x04, 4	; 4
	BLDC_ENABLE_PORT |= BLDC_ENABLE_MASK; //set pin high
  9c:	2c 9a       	sbi	0x05, 4	; 5
	
	//configure phases as output
	DDRB |= FET_PORTB_MASK;
  9e:	84 b1       	in	r24, 0x04	; 4
  a0:	83 6c       	ori	r24, 0xC3	; 195
  a2:	84 b9       	out	0x04, r24	; 4
	DDRC |= FET_PORTC_MASK;
  a4:	38 9a       	sbi	0x07, 0	; 7
	DDRD |= FET_PORTD_MASK;
  a6:	50 9a       	sbi	0x0a, 0	; 10
	
	//set pins low
	PORTB &= ~(FET_PORTB_MASK);
  a8:	85 b1       	in	r24, 0x05	; 5
  aa:	8c 73       	andi	r24, 0x3C	; 60
  ac:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(FET_PORTB_MASK);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8c 73       	andi	r24, 0x3C	; 60
  b2:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(FET_PORTB_MASK);
  b4:	8b b1       	in	r24, 0x0b	; 11
  b6:	8c 73       	andi	r24, 0x3C	; 60
  b8:	8b b9       	out	0x0b, r24	; 11
	
	//debug (X1LIMIT)
	DDRD |= (1<<3); //debug set to output
  ba:	53 9a       	sbi	0x0a, 3	; 10
	PORTD |= (1<<3); //debug set X1LIMIT (PD3) low (so we can toggle when errors)
  bc:	5b 9a       	sbi	0x0b, 3	; 11
  be:	08 95       	ret

000000c0 <get_hall_logic>:

uint8_t get_hall_logic()
{
	
	uint8_t temp = 0; //reset state to zero
	if ( (Hall_A_PIN & Hall_A_MASK) ) { temp |= (1<<HALL_A_LOGIC_BIT); }
  c0:	49 9b       	sbis	0x09, 1	; 9
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <get_hall_logic+0x8>
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	01 c0       	rjmp	.+2      	; 0xca <get_hall_logic+0xa>
}

uint8_t get_hall_logic()
{
	
	uint8_t temp = 0; //reset state to zero
  c8:	80 e0       	ldi	r24, 0x00	; 0
	if ( (Hall_A_PIN & Hall_A_MASK) ) { temp |= (1<<HALL_A_LOGIC_BIT); }
	if ( (Hall_B_PIN & Hall_B_MASK) ) { temp |= (1<<HALL_B_LOGIC_BIT); }
  ca:	31 99       	sbic	0x06, 1	; 6
  cc:	82 60       	ori	r24, 0x02	; 2
	if ( (Hall_C_PIN & Hall_C_MASK) ) { temp |= (1<<HALL_C_LOGIC_BIT); }
  ce:	4a 99       	sbic	0x09, 2	; 9
  d0:	81 60       	ori	r24, 0x01	; 1
	return temp;
}
  d2:	08 95       	ret

000000d4 <set_phase>:


void set_phase(char phase, char set_output_to)
{
	switch (phase) {
  d4:	82 34       	cpi	r24, 0x42	; 66
  d6:	99 f0       	breq	.+38     	; 0xfe <set_phase+0x2a>
  d8:	83 34       	cpi	r24, 0x43	; 67
  da:	01 f1       	breq	.+64     	; 0x11c <set_phase+0x48>
  dc:	81 34       	cpi	r24, 0x41	; 65
  de:	61 f5       	brne	.+88     	; 0x138 <set_phase+0x64>
		case 'A':
			//PIND |= (1<<3);			
			switch (set_output_to) {
  e0:	6c 34       	cpi	r22, 0x4C	; 76
  e2:	39 f0       	breq	.+14     	; 0xf2 <set_phase+0x1e>
  e4:	6a 35       	cpi	r22, 0x5A	; 90
  e6:	41 f0       	breq	.+16     	; 0xf8 <set_phase+0x24>
  e8:	68 34       	cpi	r22, 0x48	; 72
  ea:	31 f5       	brne	.+76     	; 0x138 <set_phase+0x64>
				case 'H':
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);//turn low FET off
  ec:	2f 98       	cbi	0x05, 7	; 5
					FET_A_HIGH_PORT |= (1<<FET_A_HIGH_BIT);//turn high FET on
  ee:	58 9a       	sbi	0x0b, 0	; 11
					break;
  f0:	08 95       	ret
				case 'L':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn high FET off
  f2:	58 98       	cbi	0x0b, 0	; 11
					FET_A_LOW_PORT |= (1<<FET_A_LOW_BIT);//turn low FET on
  f4:	2f 9a       	sbi	0x05, 7	; 5
					break;
  f6:	08 95       	ret
				case 'Z':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn both FETs off
  f8:	58 98       	cbi	0x0b, 0	; 11
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);
  fa:	2f 98       	cbi	0x05, 7	; 5
					break;
  fc:	08 95       	ret
					break;
			}
			break;
			
		case 'B':
			switch (set_output_to) {
  fe:	6c 34       	cpi	r22, 0x4C	; 76
 100:	39 f0       	breq	.+14     	; 0x110 <set_phase+0x3c>
 102:	6a 35       	cpi	r22, 0x5A	; 90
 104:	41 f0       	breq	.+16     	; 0x116 <set_phase+0x42>
 106:	68 34       	cpi	r22, 0x48	; 72
 108:	b9 f4       	brne	.+46     	; 0x138 <set_phase+0x64>
				case 'H':
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);//turn low FET off
 10a:	2e 98       	cbi	0x05, 6	; 5
					FET_B_HIGH_PORT |= (1<<FET_B_HIGH_BIT);//turn high FET on
 10c:	40 9a       	sbi	0x08, 0	; 8
					break;
 10e:	08 95       	ret
				case 'L':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn high FET off
 110:	40 98       	cbi	0x08, 0	; 8
					FET_B_LOW_PORT |= (1<<FET_B_LOW_BIT);//turn low FET on
 112:	2e 9a       	sbi	0x05, 6	; 5
					break;
 114:	08 95       	ret
				case 'Z':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn both FETs off
 116:	40 98       	cbi	0x08, 0	; 8
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);
 118:	2e 98       	cbi	0x05, 6	; 5
					break;
 11a:	08 95       	ret
					break;
			}			
			break;
			
		case 'C':			
			switch (set_output_to) {
 11c:	6c 34       	cpi	r22, 0x4C	; 76
 11e:	39 f0       	breq	.+14     	; 0x12e <set_phase+0x5a>
 120:	6a 35       	cpi	r22, 0x5A	; 90
 122:	41 f0       	breq	.+16     	; 0x134 <set_phase+0x60>
 124:	68 34       	cpi	r22, 0x48	; 72
 126:	41 f4       	brne	.+16     	; 0x138 <set_phase+0x64>
				case 'H':
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);//turn low FET off
 128:	29 98       	cbi	0x05, 1	; 5
					FET_C_HIGH_PORT |= (1<<FET_C_HIGH_BIT);//turn high FET on
 12a:	28 9a       	sbi	0x05, 0	; 5
					break;
 12c:	08 95       	ret
				case 'L':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn high FET off
 12e:	28 98       	cbi	0x05, 0	; 5
					FET_C_LOW_PORT |= (1<<FET_C_LOW_BIT);//turn low FET on
 130:	29 9a       	sbi	0x05, 1	; 5
					break;
 132:	08 95       	ret
				case 'Z':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn both FETs off
 134:	28 98       	cbi	0x05, 0	; 5
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);
 136:	29 98       	cbi	0x05, 1	; 5
 138:	08 95       	ret

0000013a <set_all_phases>:

}


void set_all_phases(char stateA, char stateB, char stateC)
{
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	d6 2f       	mov	r29, r22
 140:	c4 2f       	mov	r28, r20
	set_phase('A',stateA);
 142:	68 2f       	mov	r22, r24
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_phase>
	set_phase('B',stateB);
 14a:	6d 2f       	mov	r22, r29
 14c:	82 e4       	ldi	r24, 0x42	; 66
 14e:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_phase>
	set_phase('C',stateC);
 152:	6c 2f       	mov	r22, r28
 154:	83 e4       	ldi	r24, 0x43	; 67
 156:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_phase>
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 160:	0e 94 4a 00 	call	0x94	; 0x94 <atmel_start_init>
	hall_init();
	phase_init();
 164:	0e 94 4d 00 	call	0x9a	; 0x9a <phase_init>

	/* Replace with your application code */
	while (1) {
		
		switch ( get_hall_logic() ) {
 168:	0e 94 60 00 	call	0xc0	; 0xc0 <get_hall_logic>
 16c:	83 30       	cpi	r24, 0x03	; 3
 16e:	c1 f0       	breq	.+48     	; 0x1a0 <main+0x40>
 170:	28 f4       	brcc	.+10     	; 0x17c <main+0x1c>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	49 f0       	breq	.+18     	; 0x188 <main+0x28>
 176:	82 30       	cpi	r24, 0x02	; 2
 178:	69 f0       	breq	.+26     	; 0x194 <main+0x34>
 17a:	2a c0       	rjmp	.+84     	; 0x1d0 <main+0x70>
 17c:	85 30       	cpi	r24, 0x05	; 5
 17e:	e1 f0       	breq	.+56     	; 0x1b8 <main+0x58>
 180:	a8 f0       	brcs	.+42     	; 0x1ac <main+0x4c>
 182:	86 30       	cpi	r24, 0x06	; 6
 184:	f9 f0       	breq	.+62     	; 0x1c4 <main+0x64>
 186:	24 c0       	rjmp	.+72     	; 0x1d0 <main+0x70>
			case 1: set_all_phases('H','L','Z'); break;
 188:	4a e5       	ldi	r20, 0x5A	; 90
 18a:	6c e4       	ldi	r22, 0x4C	; 76
 18c:	88 e4       	ldi	r24, 0x48	; 72
 18e:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 192:	ea cf       	rjmp	.-44     	; 0x168 <main+0x8>
			case 2: set_all_phases('L','Z','H'); break;
 194:	48 e4       	ldi	r20, 0x48	; 72
 196:	6a e5       	ldi	r22, 0x5A	; 90
 198:	8c e4       	ldi	r24, 0x4C	; 76
 19a:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 19e:	e4 cf       	rjmp	.-56     	; 0x168 <main+0x8>
			case 3: set_all_phases('Z','L','H'); break;
 1a0:	48 e4       	ldi	r20, 0x48	; 72
 1a2:	6c e4       	ldi	r22, 0x4C	; 76
 1a4:	8a e5       	ldi	r24, 0x5A	; 90
 1a6:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 1aa:	de cf       	rjmp	.-68     	; 0x168 <main+0x8>
			case 4: set_all_phases('Z','H','L'); break;
 1ac:	4c e4       	ldi	r20, 0x4C	; 76
 1ae:	68 e4       	ldi	r22, 0x48	; 72
 1b0:	8a e5       	ldi	r24, 0x5A	; 90
 1b2:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 1b6:	d8 cf       	rjmp	.-80     	; 0x168 <main+0x8>
			case 5: set_all_phases('H','Z','L'); break;
 1b8:	4c e4       	ldi	r20, 0x4C	; 76
 1ba:	6a e5       	ldi	r22, 0x5A	; 90
 1bc:	88 e4       	ldi	r24, 0x48	; 72
 1be:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 1c2:	d2 cf       	rjmp	.-92     	; 0x168 <main+0x8>
			case 6: set_all_phases('L','H','Z'); break;
 1c4:	4a e5       	ldi	r20, 0x5A	; 90
 1c6:	68 e4       	ldi	r22, 0x48	; 72
 1c8:	8c e4       	ldi	r24, 0x4C	; 76
 1ca:	0e 94 9d 00 	call	0x13a	; 0x13a <set_all_phases>
 1ce:	cc cf       	rjmp	.-104    	; 0x168 <main+0x8>
			case 0: //fall through
			case 7: // fall through 0b000 & 0b111 are invalid hall states
			default: 
				PIND |= (1<<3); //debug... toggle PD3 (X1LIM)
 1d0:	4b 9a       	sbi	0x09, 3	; 9
				break;
 1d2:	ca cf       	rjmp	.-108    	; 0x168 <main+0x8>

000001d4 <system_init>:
 1d4:	8f e7       	ldi	r24, 0x7F	; 127
 1d6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f0064>
 1da:	84 b1       	in	r24, 0x04	; 4
 1dc:	14 b8       	out	0x04, r1	; 4
 1de:	85 b1       	in	r24, 0x05	; 5
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	85 b9       	out	0x05, r24	; 5
 1e4:	97 b1       	in	r25, 0x07	; 7
 1e6:	17 b8       	out	0x07, r1	; 7
 1e8:	98 b1       	in	r25, 0x08	; 8
 1ea:	88 b9       	out	0x08, r24	; 8
 1ec:	9a b1       	in	r25, 0x0a	; 10
 1ee:	1a b8       	out	0x0a, r1	; 10
 1f0:	9b b1       	in	r25, 0x0b	; 11
 1f2:	8b b9       	out	0x0b, r24	; 11
 1f4:	8d b1       	in	r24, 0x0d	; 13
 1f6:	88 7f       	andi	r24, 0xF8	; 248
 1f8:	8d b9       	out	0x0d, r24	; 13
 1fa:	8e b1       	in	r24, 0x0e	; 14
 1fc:	87 60       	ori	r24, 0x07	; 7
 1fe:	8e b9       	out	0x0e, r24	; 14
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	60 e8       	ldi	r22, 0x80	; 128
 204:	81 e6       	ldi	r24, 0x61	; 97
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 09 01 	call	0x212	; 0x212 <protected_write_io>
 20c:	13 be       	out	0x33, r1	; 51
 20e:	15 be       	out	0x35, r1	; 53
 210:	08 95       	ret

00000212 <protected_write_io>:
 212:	2f b7       	in	r18, 0x3f	; 63
 214:	f8 94       	cli
 216:	fc 01       	movw	r30, r24
 218:	60 83       	st	Z, r22
 21a:	40 83       	st	Z, r20
 21c:	2f bf       	out	0x3f, r18	; 63
 21e:	08 95       	ret

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
