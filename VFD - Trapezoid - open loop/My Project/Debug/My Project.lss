
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000356  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000003c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011a7  00000000  00000000  000004a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d2b  00000000  00000000  0000164f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000076d  00000000  00000000  0000237a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002ae8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000071e  00000000  00000000  00002c18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000219  00000000  00000000  00003336  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  0000354f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  8c:	0c 94 7f 01 	jmp	0x2fe	; 0x2fe <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <adc_select_vref>:


void adc_select_vref(uint8_t reference)
{
	//"The user is advised not to write new reference selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
  94:	ea e7       	ldi	r30, 0x7A	; 122
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	90 81       	ld	r25, Z
  9a:	9f 7b       	andi	r25, 0xBF	; 191
  9c:	90 83       	st	Z, r25
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(reference == VREF_EXT_AVCC) {ADMUX = ( (ADMUX & 0b00111111) | (1<<REFS0) ); } //sets ADMUX to b01xxxxxx
  9e:	81 11       	cpse	r24, r1
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <adc_select_vref+0x1c>
  a2:	ec e7       	ldi	r30, 0x7C	; 124
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	8f 73       	andi	r24, 0x3F	; 63
  aa:	80 64       	ori	r24, 0x40	; 64
  ac:	80 83       	st	Z, r24
  ae:	07 c0       	rjmp	.+14     	; 0xbe <adc_select_vref+0x2a>
	if(reference == VREF_INT_2V56) {ADMUX |= ( (1<<REFS0) | (1<<REFS1) ); } //sets ADMUX to b11xxxxxx
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	29 f4       	brne	.+10     	; 0xbe <adc_select_vref+0x2a>
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	80 6c       	ori	r24, 0xC0	; 192
  bc:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //enable free running mode
  be:	ea e7       	ldi	r30, 0x7A	; 122
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	80 83       	st	Z, r24
  c8:	08 95       	ret

000000ca <adc_select_channel>:


void adc_select_channel(uint8_t channel)
{
	//"The user is advised not to write new channel selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
  ca:	ea e7       	ldi	r30, 0x7A	; 122
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	90 81       	ld	r25, Z
  d0:	9f 7b       	andi	r25, 0xBF	; 191
  d2:	90 83       	st	Z, r25
	while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
  d4:	90 81       	ld	r25, Z
  d6:	94 ff       	sbrs	r25, 4
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <adc_select_channel+0xa>
	if(channel == ADC_CHANNEL_goalRPM) {ADMUX = ( (ADMUX & 0b1100000) | 0b00000101 ); } //ADC5 (single ended)
  da:	81 11       	cpse	r24, r1
  dc:	06 c0       	rjmp	.+12     	; 0xea <adc_select_channel+0x20>
  de:	ec e7       	ldi	r30, 0x7C	; 124
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	80 81       	ld	r24, Z
  e4:	80 76       	andi	r24, 0x60	; 96
  e6:	85 60       	ori	r24, 0x05	; 5
  e8:	80 83       	st	Z, r24
	//JTS2do: add other channels here
	ADCSRA |= (1<<ADSC); //enable free running mode
  ea:	ea e7       	ldi	r30, 0x7A	; 122
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	80 64       	ori	r24, 0x40	; 64
  f2:	80 83       	st	Z, r24
  f4:	08 95       	ret

000000f6 <adc_init>:
}


void adc_init()
{	
  f6:	0f 93       	push	r16
  f8:	1f 93       	push	r17
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
	DIDR0 = (1<<ADC5D);//JTS2do: disable digital logic on adc pins (to reduce power)(see DIDR0/DIDR1)
  fe:	80 e2       	ldi	r24, 0x20	; 32
 100:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f007e>
	PRR &= ~(1<<PRADC); //enable system clock to ADC.  This is default value, but just making sure ADC is on
 104:	e4 e6       	ldi	r30, 0x64	; 100
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8e 7f       	andi	r24, 0xFE	; 254
 10c:	80 83       	st	Z, r24
	ADC_goalRPM_PORT &= ~(1<<ADC_goalRPM_BIT); //disable goalRPM pullup resistor
 10e:	2a 98       	cbi	0x05, 2	; 5

	ADCSRA = 0; //reset to default valuess
 110:	ca e7       	ldi	r28, 0x7A	; 122
 112:	d0 e0       	ldi	r29, 0x00	; 0
 114:	18 82       	st	Y, r1
	ADCSRA |= 0b00000110; //ADPS: sets ADC clock to 16E6/64 = 250 kHz (max anecdotal supported is clock = 2 MHz).  Conversion takes 13 clock cycles, so ~19 kS/s.
 116:	88 81       	ld	r24, Y
 118:	86 60       	ori	r24, 0x06	; 6
 11a:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADATE); //auto-trigger enable... ADC is just always digitizing.  When we want a value, we just grab the last one acquired
 11c:	88 81       	ld	r24, Y
 11e:	80 62       	ori	r24, 0x20	; 32
 120:	88 83       	st	Y, r24
		
	ADCSRB = 0; //reset to default values
 122:	eb e7       	ldi	r30, 0x7B	; 123
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	10 82       	st	Z, r1
	//ADCSRB |= (1<<ADHSM) //uncomment to enable high speed mode.  max ADC rate with this line commented out is 200 kHz 
	ADCSRB |= (1<<AREFEN); //connect analog reference to external AREF pin (with capacitor)
 128:	80 81       	ld	r24, Z
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 83       	st	Z, r24
	//ADCSRB 3:0 sets auto-trigger source selection bits 0b0000 is "free running mode", which we're using for now

	
	ADMUX = 0; //reset 
 12e:	0c e7       	ldi	r16, 0x7C	; 124
 130:	10 e0       	ldi	r17, 0x00	; 0
 132:	f8 01       	movw	r30, r16
 134:	10 82       	st	Z, r1
	adc_select_vref(VREF_EXT_AVCC);  //modifies ADMUX, so needs to happen after "ADMUX=0;"
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 4a 00 	call	0x94	; 0x94 <adc_select_vref>
	ADMUX |= (1<<ADLAR); //left adjust ADC result, so that upper 8 bits are in ADCH
 13c:	f8 01       	movw	r30, r16
 13e:	80 81       	ld	r24, Z
 140:	80 62       	ori	r24, 0x20	; 32
 142:	80 83       	st	Z, r24

	ADCSRA |= (1<<ADEN); //enable ADC (but doesn't actually start)
 144:	88 81       	ld	r24, Y
 146:	80 68       	ori	r24, 0x80	; 128
 148:	88 83       	st	Y, r24
	ADCSRA |= (1<<ADSC); //start ADC conversion (since we're free running, we only need to set bit once)
 14a:	88 81       	ld	r24, Y
 14c:	80 64       	ori	r24, 0x40	; 64
 14e:	88 83       	st	Y, r24
}
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <adc_read>:

//returns the latest measurement (8 bits for now)
uint8_t adc_read()
{
	uint8_t adc_result = ADCH; //high byte ADC result
 15a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f0079>
	return adc_result; //only 8 MSBs returned (2 LSBs in ADCL not read).  Search ADLAR to enable 10b (and note this requires two register reads, etc)
 15e:	08 95       	ret

00000160 <atmel_start_init>:
 160:	0e 94 59 01 	call	0x2b2	; 0x2b2 <system_init>
 164:	08 95       	ret

00000166 <phase_init>:
}

void phase_init()
{
	//Pull enable pin high
	BLDC_ENABLE_DDR |= BLDC_ENABLE_MASK; //configure as output
 166:	24 9a       	sbi	0x04, 4	; 4
	BLDC_ENABLE_PORT |= BLDC_ENABLE_MASK; //set pin high
 168:	2c 9a       	sbi	0x05, 4	; 5
	
	//configure phases as output
	DDRB |= FET_PORTB_MASK;
 16a:	84 b1       	in	r24, 0x04	; 4
 16c:	83 6c       	ori	r24, 0xC3	; 195
 16e:	84 b9       	out	0x04, r24	; 4
	DDRC |= FET_PORTC_MASK;
 170:	38 9a       	sbi	0x07, 0	; 7
	DDRD |= FET_PORTD_MASK;
 172:	50 9a       	sbi	0x0a, 0	; 10
	
	//set pins low
	PORTB &= ~(FET_PORTB_MASK);
 174:	85 b1       	in	r24, 0x05	; 5
 176:	8c 73       	andi	r24, 0x3C	; 60
 178:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(FET_PORTB_MASK);
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8c 73       	andi	r24, 0x3C	; 60
 17e:	88 b9       	out	0x08, r24	; 8
	PORTD &= ~(FET_PORTB_MASK);
 180:	8b b1       	in	r24, 0x0b	; 11
 182:	8c 73       	andi	r24, 0x3C	; 60
 184:	8b b9       	out	0x0b, r24	; 11
	
	//debug (X1LIMIT)
	DDRD |= (1<<3); //debug set to output
 186:	53 9a       	sbi	0x0a, 3	; 10
	PORTD |= (1<<3); //debug set X1LIMIT (PD3) low (so we can toggle when errors)
 188:	5b 9a       	sbi	0x0b, 3	; 11
 18a:	08 95       	ret

0000018c <get_hall_logic>:

uint8_t get_hall_logic()
{
	
	uint8_t temp = 0; //reset state to zero
	if ( (Hall_A_PIN & Hall_A_MASK) ) { temp |= (1<<HALL_A_LOGIC_BIT); }
 18c:	49 9b       	sbis	0x09, 1	; 9
 18e:	02 c0       	rjmp	.+4      	; 0x194 <get_hall_logic+0x8>
 190:	84 e0       	ldi	r24, 0x04	; 4
 192:	01 c0       	rjmp	.+2      	; 0x196 <get_hall_logic+0xa>
}

uint8_t get_hall_logic()
{
	
	uint8_t temp = 0; //reset state to zero
 194:	80 e0       	ldi	r24, 0x00	; 0
	if ( (Hall_A_PIN & Hall_A_MASK) ) { temp |= (1<<HALL_A_LOGIC_BIT); }
	if ( (Hall_B_PIN & Hall_B_MASK) ) { temp |= (1<<HALL_B_LOGIC_BIT); }
 196:	31 99       	sbic	0x06, 1	; 6
 198:	82 60       	ori	r24, 0x02	; 2
	if ( (Hall_C_PIN & Hall_C_MASK) ) { temp |= (1<<HALL_C_LOGIC_BIT); }
 19a:	4a 99       	sbic	0x09, 2	; 9
 19c:	81 60       	ori	r24, 0x01	; 1
	return temp;
}
 19e:	08 95       	ret

000001a0 <set_phase>:


void set_phase(char phase, char set_output_to)
{
	switch (phase) {
 1a0:	82 34       	cpi	r24, 0x42	; 66
 1a2:	99 f0       	breq	.+38     	; 0x1ca <set_phase+0x2a>
 1a4:	83 34       	cpi	r24, 0x43	; 67
 1a6:	01 f1       	breq	.+64     	; 0x1e8 <set_phase+0x48>
 1a8:	81 34       	cpi	r24, 0x41	; 65
 1aa:	61 f5       	brne	.+88     	; 0x204 <set_phase+0x64>
		case 'A':
			//PIND |= (1<<3);			
			switch (set_output_to) {
 1ac:	6c 34       	cpi	r22, 0x4C	; 76
 1ae:	39 f0       	breq	.+14     	; 0x1be <set_phase+0x1e>
 1b0:	6a 35       	cpi	r22, 0x5A	; 90
 1b2:	41 f0       	breq	.+16     	; 0x1c4 <set_phase+0x24>
 1b4:	68 34       	cpi	r22, 0x48	; 72
 1b6:	31 f5       	brne	.+76     	; 0x204 <set_phase+0x64>
				case 'H':
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);//turn low FET off
 1b8:	2f 98       	cbi	0x05, 7	; 5
					FET_A_HIGH_PORT |= (1<<FET_A_HIGH_BIT);//turn high FET on
 1ba:	58 9a       	sbi	0x0b, 0	; 11
					break;
 1bc:	08 95       	ret
				case 'L':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn high FET off
 1be:	58 98       	cbi	0x0b, 0	; 11
					FET_A_LOW_PORT |= (1<<FET_A_LOW_BIT);//turn low FET on
 1c0:	2f 9a       	sbi	0x05, 7	; 5
					break;
 1c2:	08 95       	ret
				case 'Z':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn both FETs off
 1c4:	58 98       	cbi	0x0b, 0	; 11
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);
 1c6:	2f 98       	cbi	0x05, 7	; 5
					break;
 1c8:	08 95       	ret
					break;
			}
			break;
			
		case 'B':
			switch (set_output_to) {
 1ca:	6c 34       	cpi	r22, 0x4C	; 76
 1cc:	39 f0       	breq	.+14     	; 0x1dc <set_phase+0x3c>
 1ce:	6a 35       	cpi	r22, 0x5A	; 90
 1d0:	41 f0       	breq	.+16     	; 0x1e2 <set_phase+0x42>
 1d2:	68 34       	cpi	r22, 0x48	; 72
 1d4:	b9 f4       	brne	.+46     	; 0x204 <set_phase+0x64>
				case 'H':
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);//turn low FET off
 1d6:	2e 98       	cbi	0x05, 6	; 5
					FET_B_HIGH_PORT |= (1<<FET_B_HIGH_BIT);//turn high FET on
 1d8:	40 9a       	sbi	0x08, 0	; 8
					break;
 1da:	08 95       	ret
				case 'L':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn high FET off
 1dc:	40 98       	cbi	0x08, 0	; 8
					FET_B_LOW_PORT |= (1<<FET_B_LOW_BIT);//turn low FET on
 1de:	2e 9a       	sbi	0x05, 6	; 5
					break;
 1e0:	08 95       	ret
				case 'Z':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn both FETs off
 1e2:	40 98       	cbi	0x08, 0	; 8
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);
 1e4:	2e 98       	cbi	0x05, 6	; 5
					break;
 1e6:	08 95       	ret
					break;
			}			
			break;
			
		case 'C':			
			switch (set_output_to) {
 1e8:	6c 34       	cpi	r22, 0x4C	; 76
 1ea:	39 f0       	breq	.+14     	; 0x1fa <set_phase+0x5a>
 1ec:	6a 35       	cpi	r22, 0x5A	; 90
 1ee:	41 f0       	breq	.+16     	; 0x200 <set_phase+0x60>
 1f0:	68 34       	cpi	r22, 0x48	; 72
 1f2:	41 f4       	brne	.+16     	; 0x204 <set_phase+0x64>
				case 'H':
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);//turn low FET off
 1f4:	29 98       	cbi	0x05, 1	; 5
					FET_C_HIGH_PORT |= (1<<FET_C_HIGH_BIT);//turn high FET on
 1f6:	28 9a       	sbi	0x05, 0	; 5
					break;
 1f8:	08 95       	ret
				case 'L':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn high FET off
 1fa:	28 98       	cbi	0x05, 0	; 5
					FET_C_LOW_PORT |= (1<<FET_C_LOW_BIT);//turn low FET on
 1fc:	29 9a       	sbi	0x05, 1	; 5
					break;
 1fe:	08 95       	ret
				case 'Z':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn both FETs off
 200:	28 98       	cbi	0x05, 0	; 5
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);
 202:	29 98       	cbi	0x05, 1	; 5
 204:	08 95       	ret

00000206 <set_all_phases>:

}


void set_all_phases(char stateA, char stateB, char stateC)
{
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	d6 2f       	mov	r29, r22
 20c:	c4 2f       	mov	r28, r20
	set_phase('A',stateA);
 20e:	68 2f       	mov	r22, r24
 210:	81 e4       	ldi	r24, 0x41	; 65
 212:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <set_phase>
	set_phase('B',stateB);
 216:	6d 2f       	mov	r22, r29
 218:	82 e4       	ldi	r24, 0x42	; 66
 21a:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <set_phase>
	set_phase('C',stateC);
 21e:	6c 2f       	mov	r22, r28
 220:	83 e4       	ldi	r24, 0x43	; 67
 222:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <set_phase>
}
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	08 95       	ret

0000022c <main>:


int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 22c:	0e 94 b0 00 	call	0x160	; 0x160 <atmel_start_init>
	hall_init();
	phase_init();
 230:	0e 94 b3 00 	call	0x166	; 0x166 <phase_init>
	adc_init();
 234:	0e 94 7b 00 	call	0xf6	; 0xf6 <adc_init>
	
	adc_select_channel(ADC_CHANNEL_goalRPM);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 65 00 	call	0xca	; 0xca <adc_select_channel>

	/* Replace with your application code */
	while (1) {
		if( (adc_read() != 0) ) { //~1.25 volts (Vresult / Vref *256)
 23e:	0e 94 ad 00 	call	0x15a	; 0x15a <adc_read>
 242:	88 23       	and	r24, r24
 244:	a1 f1       	breq	.+104    	; 0x2ae <main+0x82>
			switch ( get_hall_logic() ) {
 246:	0e 94 c6 00 	call	0x18c	; 0x18c <get_hall_logic>
 24a:	83 30       	cpi	r24, 0x03	; 3
 24c:	c1 f0       	breq	.+48     	; 0x27e <main+0x52>
 24e:	28 f4       	brcc	.+10     	; 0x25a <main+0x2e>
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	49 f0       	breq	.+18     	; 0x266 <main+0x3a>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	69 f0       	breq	.+26     	; 0x272 <main+0x46>
 258:	f2 cf       	rjmp	.-28     	; 0x23e <main+0x12>
 25a:	85 30       	cpi	r24, 0x05	; 5
 25c:	e1 f0       	breq	.+56     	; 0x296 <main+0x6a>
 25e:	a8 f0       	brcs	.+42     	; 0x28a <main+0x5e>
 260:	86 30       	cpi	r24, 0x06	; 6
 262:	f9 f0       	breq	.+62     	; 0x2a2 <main+0x76>
 264:	ec cf       	rjmp	.-40     	; 0x23e <main+0x12>
				case 1: set_all_phases('H','L','Z'); break;
 266:	4a e5       	ldi	r20, 0x5A	; 90
 268:	6c e4       	ldi	r22, 0x4C	; 76
 26a:	88 e4       	ldi	r24, 0x48	; 72
 26c:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 270:	e6 cf       	rjmp	.-52     	; 0x23e <main+0x12>
				case 2: set_all_phases('L','Z','H'); break;
 272:	48 e4       	ldi	r20, 0x48	; 72
 274:	6a e5       	ldi	r22, 0x5A	; 90
 276:	8c e4       	ldi	r24, 0x4C	; 76
 278:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 27c:	e0 cf       	rjmp	.-64     	; 0x23e <main+0x12>
				case 3: set_all_phases('Z','L','H'); break;
 27e:	48 e4       	ldi	r20, 0x48	; 72
 280:	6c e4       	ldi	r22, 0x4C	; 76
 282:	8a e5       	ldi	r24, 0x5A	; 90
 284:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 288:	da cf       	rjmp	.-76     	; 0x23e <main+0x12>
				case 4: set_all_phases('Z','H','L'); break;
 28a:	4c e4       	ldi	r20, 0x4C	; 76
 28c:	68 e4       	ldi	r22, 0x48	; 72
 28e:	8a e5       	ldi	r24, 0x5A	; 90
 290:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 294:	d4 cf       	rjmp	.-88     	; 0x23e <main+0x12>
				case 5: set_all_phases('H','Z','L'); break;
 296:	4c e4       	ldi	r20, 0x4C	; 76
 298:	6a e5       	ldi	r22, 0x5A	; 90
 29a:	88 e4       	ldi	r24, 0x48	; 72
 29c:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 2a0:	ce cf       	rjmp	.-100    	; 0x23e <main+0x12>
				case 6: set_all_phases('L','H','Z'); break;
 2a2:	4a e5       	ldi	r20, 0x5A	; 90
 2a4:	68 e4       	ldi	r22, 0x48	; 72
 2a6:	8c e4       	ldi	r24, 0x4C	; 76
 2a8:	0e 94 03 01 	call	0x206	; 0x206 <set_all_phases>
 2ac:	c8 cf       	rjmp	.-112    	; 0x23e <main+0x12>
				case 7: // fall through 0b000 & 0b111 are invalid hall states
				default: 
					break;
			PIND |= (1<<3); //debug... toggle PD3 (X1LIM)
			}
		} else { PIND |= (1<<3); }
 2ae:	4b 9a       	sbi	0x09, 3	; 9
 2b0:	c6 cf       	rjmp	.-116    	; 0x23e <main+0x12>

000002b2 <system_init>:
 2b2:	8f e7       	ldi	r24, 0x7F	; 127
 2b4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7f0064>
 2b8:	84 b1       	in	r24, 0x04	; 4
 2ba:	14 b8       	out	0x04, r1	; 4
 2bc:	85 b1       	in	r24, 0x05	; 5
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	85 b9       	out	0x05, r24	; 5
 2c2:	97 b1       	in	r25, 0x07	; 7
 2c4:	17 b8       	out	0x07, r1	; 7
 2c6:	98 b1       	in	r25, 0x08	; 8
 2c8:	88 b9       	out	0x08, r24	; 8
 2ca:	9a b1       	in	r25, 0x0a	; 10
 2cc:	1a b8       	out	0x0a, r1	; 10
 2ce:	9b b1       	in	r25, 0x0b	; 11
 2d0:	8b b9       	out	0x0b, r24	; 11
 2d2:	8d b1       	in	r24, 0x0d	; 13
 2d4:	88 7f       	andi	r24, 0xF8	; 248
 2d6:	8d b9       	out	0x0d, r24	; 13
 2d8:	8e b1       	in	r24, 0x0e	; 14
 2da:	87 60       	ori	r24, 0x07	; 7
 2dc:	8e b9       	out	0x0e, r24	; 14
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	60 e8       	ldi	r22, 0x80	; 128
 2e2:	81 e6       	ldi	r24, 0x61	; 97
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	0e 94 78 01 	call	0x2f0	; 0x2f0 <protected_write_io>
 2ea:	13 be       	out	0x33, r1	; 51
 2ec:	15 be       	out	0x35, r1	; 53
 2ee:	08 95       	ret

000002f0 <protected_write_io>:
 2f0:	2f b7       	in	r18, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	fc 01       	movw	r30, r24
 2f6:	60 83       	st	Z, r22
 2f8:	40 83       	st	Z, r20
 2fa:	2f bf       	out	0x3f, r18	; 63
 2fc:	08 95       	ret

000002fe <_exit>:
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
