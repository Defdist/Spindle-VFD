
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b37  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aa0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000b34  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000b34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b68  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  00000ba8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000010a2  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cfe  00000000  00000000  00001d72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a94  00000000  00000000  00002a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002f0  00000000  00000000  00003504  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000076c  00000000  00000000  000037f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000573  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c8  00000000  00000000  000044d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ea       	ldi	r30, 0xA0	; 160
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a0 30       	cpi	r26, 0x00	; 0
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a0 e0       	ldi	r26, 0x00	; 0
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 30       	cpi	r26, 0x02	; 2
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 0e 03 	call	0x61c	; 0x61c <main>
  b2:	0c 94 4e 05 	jmp	0xa9c	; 0xa9c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <adc_select_vref>:
#include <adc.h>
#include <atmel_start.h>


void adc_select_vref(uint8_t reference)
{
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	1f 92       	push	r1
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	89 83       	std	Y+1, r24	; 0x01
	//"The user is advised not to write new reference selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
  c6:	8a e7       	ldi	r24, 0x7A	; 122
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	2a e7       	ldi	r18, 0x7A	; 122
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	2f 7b       	andi	r18, 0xBF	; 191
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(reference == VREF_EXT_AVCC) {ADMUX = ( (ADMUX & 0b00111111) | (1<<REFS0) ); } //sets ADMUX to b01xxxxxx
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 23       	and	r24, r24
  dc:	51 f4       	brne	.+20     	; 0xf2 <adc_select_vref+0x38>
  de:	8c e7       	ldi	r24, 0x7C	; 124
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	2c e7       	ldi	r18, 0x7C	; 124
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	f9 01       	movw	r30, r18
  e8:	20 81       	ld	r18, Z
  ea:	2f 73       	andi	r18, 0x3F	; 63
  ec:	20 64       	ori	r18, 0x40	; 64
  ee:	fc 01       	movw	r30, r24
  f0:	20 83       	st	Z, r18
	if(reference == VREF_INT_2V56) {ADMUX |= ( (1<<REFS0) | (1<<REFS1) ); } //sets ADMUX to b11xxxxxx
  f2:	89 81       	ldd	r24, Y+1	; 0x01
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	49 f4       	brne	.+18     	; 0x10a <adc_select_vref+0x50>
  f8:	8c e7       	ldi	r24, 0x7C	; 124
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	2c e7       	ldi	r18, 0x7C	; 124
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	20 6c       	ori	r18, 0xC0	; 192
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
 10a:	00 00       	nop
 10c:	0f 90       	pop	r0
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <adc_select_channel>:


void adc_select_channel(uint8_t channel)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	89 83       	std	Y+1, r24	; 0x01
	//"The user is advised not to write new channel selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
 120:	8a e7       	ldi	r24, 0x7A	; 122
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	2a e7       	ldi	r18, 0x7A	; 122
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	f9 01       	movw	r30, r18
 12a:	20 81       	ld	r18, Z
 12c:	2f 7b       	andi	r18, 0xBF	; 191
 12e:	fc 01       	movw	r30, r24
 130:	20 83       	st	Z, r18
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(     channel == ADC_CHANNEL_goalRPM) {ADMUX = ( (ADMUX & 0b11100000) | 0b00000101 ); } //ADC5 (single ended)
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	88 23       	and	r24, r24
 136:	59 f4       	brne	.+22     	; 0x14e <adc_select_channel+0x3a>
 138:	8c e7       	ldi	r24, 0x7C	; 124
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	2c e7       	ldi	r18, 0x7C	; 124
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	f9 01       	movw	r30, r18
 142:	20 81       	ld	r18, Z
 144:	20 7e       	andi	r18, 0xE0	; 224
 146:	25 60       	ori	r18, 0x05	; 5
 148:	fc 01       	movw	r30, r24
 14a:	20 83       	st	Z, r18
	else if(channel == ADC_CHANNEL_VCCDIV4) {ADMUX = ( (ADMUX & 0b11100000) | 0b00001100 ); } //VCC/4 (SE)
	//JTS2do: add other channels here
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
 14c:	0d c0       	rjmp	.+26     	; 0x168 <adc_select_channel+0x54>
{
	//"The user is advised not to write new channel selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(     channel == ADC_CHANNEL_goalRPM) {ADMUX = ( (ADMUX & 0b11100000) | 0b00000101 ); } //ADC5 (single ended)
	else if(channel == ADC_CHANNEL_VCCDIV4) {ADMUX = ( (ADMUX & 0b11100000) | 0b00001100 ); } //VCC/4 (SE)
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	85 30       	cpi	r24, 0x05	; 5
 152:	51 f4       	brne	.+20     	; 0x168 <adc_select_channel+0x54>
 154:	8c e7       	ldi	r24, 0x7C	; 124
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	2c e7       	ldi	r18, 0x7C	; 124
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	f9 01       	movw	r30, r18
 15e:	20 81       	ld	r18, Z
 160:	20 7e       	andi	r18, 0xE0	; 224
 162:	2c 60       	ori	r18, 0x0C	; 12
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	//JTS2do: add other channels here
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
 168:	00 00       	nop
 16a:	0f 90       	pop	r0
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <adc_init>:


void adc_init()
{	
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
	DIDR0 = (1<<ADC5D);//disable digital logic on adc pin (to reduce power)(see DIDR0/DIDR1)
 17a:	8e e7       	ldi	r24, 0x7E	; 126
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	20 e2       	ldi	r18, 0x20	; 32
 180:	fc 01       	movw	r30, r24
 182:	20 83       	st	Z, r18
	PRR &= ~(1<<PRADC); //enable system clock to ADC.  This is default value, but just making sure ADC is on
 184:	84 e6       	ldi	r24, 0x64	; 100
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	24 e6       	ldi	r18, 0x64	; 100
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	f9 01       	movw	r30, r18
 18e:	20 81       	ld	r18, Z
 190:	2e 7f       	andi	r18, 0xFE	; 254
 192:	fc 01       	movw	r30, r24
 194:	20 83       	st	Z, r18
	ADC_goalRPM_PORT &= ~(1<<ADC_goalRPM_BIT); //disable goalRPM pullup resistor
 196:	85 e2       	ldi	r24, 0x25	; 37
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	25 e2       	ldi	r18, 0x25	; 37
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	2b 7f       	andi	r18, 0xFB	; 251
 1a4:	fc 01       	movw	r30, r24
 1a6:	20 83       	st	Z, r18

	ADCSRA = 0; //reset to default values
 1a8:	8a e7       	ldi	r24, 0x7A	; 122
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	fc 01       	movw	r30, r24
 1ae:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN); //enable ADC subsystem (but doesn't actually start)
 1b0:	8a e7       	ldi	r24, 0x7A	; 122
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	2a e7       	ldi	r18, 0x7A	; 122
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	f9 01       	movw	r30, r18
 1ba:	20 81       	ld	r18, Z
 1bc:	20 68       	ori	r18, 0x80	; 128
 1be:	fc 01       	movw	r30, r24
 1c0:	20 83       	st	Z, r18
	ADCSRA |= 0b00000110; //ADPS: sets ADC clock to 16E6/64 = 250 kHz (max anecdotal supported is clock = 2 MHz).  Conversion takes 16 clock cycles, so ~15 kS/s.
 1c2:	8a e7       	ldi	r24, 0x7A	; 122
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	2a e7       	ldi	r18, 0x7A	; 122
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	f9 01       	movw	r30, r18
 1cc:	20 81       	ld	r18, Z
 1ce:	26 60       	ori	r18, 0x06	; 6
 1d0:	fc 01       	movw	r30, r24
 1d2:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADATE); //auto-trigger enable... ADC is just always digitizing.  When we want a value, we just grab the last one acquired
 1d4:	8a e7       	ldi	r24, 0x7A	; 122
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	2a e7       	ldi	r18, 0x7A	; 122
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	f9 01       	movw	r30, r18
 1de:	20 81       	ld	r18, Z
 1e0:	20 62       	ori	r18, 0x20	; 32
 1e2:	fc 01       	movw	r30, r24
 1e4:	20 83       	st	Z, r18
		
	ADCSRB = 0; //reset to default values
 1e6:	8b e7       	ldi	r24, 0x7B	; 123
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	10 82       	st	Z, r1
	ADCSRB |= (1<<ADHSM); //uncomment to enable high speed mode.  max ADC rate with this line commented out is 200 kHz 
 1ee:	8b e7       	ldi	r24, 0x7B	; 123
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	2b e7       	ldi	r18, 0x7B	; 123
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	20 81       	ld	r18, Z
 1fa:	20 68       	ori	r18, 0x80	; 128
 1fc:	fc 01       	movw	r30, r24
 1fe:	20 83       	st	Z, r18
	ADCSRB |= (1<<AREFEN); //connect analog reference to external AREF pin (with capacitor)
 200:	8b e7       	ldi	r24, 0x7B	; 123
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	2b e7       	ldi	r18, 0x7B	; 123
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	f9 01       	movw	r30, r18
 20a:	20 81       	ld	r18, Z
 20c:	20 62       	ori	r18, 0x20	; 32
 20e:	fc 01       	movw	r30, r24
 210:	20 83       	st	Z, r18
						   //We don't want to use 32M1's internal reference because we only care about the ratiometric difference between the VCC and PWM %
						   //In other words, uses a known good reference would actually add more uncertainty (because we lose the ratiometric tie)
	//ADCSRB 3:0 sets auto-trigger source selection bits 0b0000 is "free running mode", which we're using for now

	
	ADMUX = 0; //reset 
 212:	8c e7       	ldi	r24, 0x7C	; 124
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	fc 01       	movw	r30, r24
 218:	10 82       	st	Z, r1
	adc_select_vref(VREF_EXT_AVCC);  //modifies ADMUX, so needs to happen after "ADMUX=0;"
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	0e 94 5d 00 	call	0xba	; 0xba <adc_select_vref>
	adc_select_channel(ADC_CHANNEL_goalRPM); // "always select a channel before starting the first conversion"
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	0e 94 8a 00 	call	0x114	; 0x114 <adc_select_channel>
	ADMUX |= (1<<ADLAR); //left adjust ADC result, so that upper 8 bits are in ADCH
 226:	8c e7       	ldi	r24, 0x7C	; 124
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	2c e7       	ldi	r18, 0x7C	; 124
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	f9 01       	movw	r30, r18
 230:	20 81       	ld	r18, Z
 232:	20 62       	ori	r18, 0x20	; 32
 234:	fc 01       	movw	r30, r24
 236:	20 83       	st	Z, r18


	ADCSRA |= (1<<ADSC); //start ADC conversion (since we're free running, we only need to set bit once)
 238:	8a e7       	ldi	r24, 0x7A	; 122
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	2a e7       	ldi	r18, 0x7A	; 122
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	f9 01       	movw	r30, r18
 242:	20 81       	ld	r18, Z
 244:	20 64       	ori	r18, 0x40	; 64
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18
}
 24a:	00 00       	nop
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	08 95       	ret

00000252 <adc_read_latest>:

//returns the latest measurement (8 bits for now)
//As implemented on grBLDC3v1, only the 7 LSBs are used (0:127)(see explanation above) 
uint8_t adc_read_latest()
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	1f 92       	push	r1
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
	uint8_t adc_result = 0;
 25c:	19 82       	std	Y+1, r1	; 0x01
	adc_result = ADCH; //high byte ADC result
 25e:	89 e7       	ldi	r24, 0x79	; 121
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	fc 01       	movw	r30, r24
 264:	80 81       	ld	r24, Z
 266:	89 83       	std	Y+1, r24	; 0x01
	return adc_result; //only 8 MSBs returned (2 LSBs in ADCL not read).  Search ADLAR to enable 10b (and note this requires two register reads, etc)
 268:	89 81       	ldd	r24, Y+1	; 0x01
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
	system_init();
 27a:	0e 94 3b 05 	call	0xa76	; 0xa76 <system_init>
}
 27e:	00 00       	nop
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	08 95       	ret

00000286 <hall_init>:
		122,122,123,123,124,124,125,125,
		126,126,127,127,127,127,127,127
	};

	return lookup_PWM[raw_adc_value];
}
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	00 00       	nop
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <timer0_init>:
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	84 e6       	ldi	r24, 0x64	; 100
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	24 e6       	ldi	r18, 0x64	; 100
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	f9 01       	movw	r30, r18
 2a8:	20 81       	ld	r18, Z
 2aa:	27 7f       	andi	r18, 0xF7	; 247
 2ac:	fc 01       	movw	r30, r24
 2ae:	20 83       	st	Z, r18
 2b0:	84 e4       	ldi	r24, 0x44	; 68
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	22 e8       	ldi	r18, 0x82	; 130
 2b6:	fc 01       	movw	r30, r24
 2b8:	20 83       	st	Z, r18
 2ba:	85 e4       	ldi	r24, 0x45	; 69
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	22 e0       	ldi	r18, 0x02	; 2
 2c0:	fc 01       	movw	r30, r24
 2c2:	20 83       	st	Z, r18
 2c4:	87 e4       	ldi	r24, 0x47	; 71
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	2f e7       	ldi	r18, 0x7F	; 127
 2ca:	fc 01       	movw	r30, r24
 2cc:	20 83       	st	Z, r18
 2ce:	00 00       	nop
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <phase_init>:
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
 2de:	84 e2       	ldi	r24, 0x24	; 36
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	24 e2       	ldi	r18, 0x24	; 36
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	f9 01       	movw	r30, r18
 2e8:	20 81       	ld	r18, Z
 2ea:	20 61       	ori	r18, 0x10	; 16
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
 2f0:	85 e2       	ldi	r24, 0x25	; 37
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	25 e2       	ldi	r18, 0x25	; 37
 2f6:	30 e0       	ldi	r19, 0x00	; 0
 2f8:	f9 01       	movw	r30, r18
 2fa:	20 81       	ld	r18, Z
 2fc:	20 61       	ori	r18, 0x10	; 16
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18
 302:	84 e2       	ldi	r24, 0x24	; 36
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	24 e2       	ldi	r18, 0x24	; 36
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	20 81       	ld	r18, Z
 30e:	23 6c       	ori	r18, 0xC3	; 195
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
 314:	87 e2       	ldi	r24, 0x27	; 39
 316:	90 e0       	ldi	r25, 0x00	; 0
 318:	27 e2       	ldi	r18, 0x27	; 39
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	f9 01       	movw	r30, r18
 31e:	20 81       	ld	r18, Z
 320:	21 60       	ori	r18, 0x01	; 1
 322:	fc 01       	movw	r30, r24
 324:	20 83       	st	Z, r18
 326:	8a e2       	ldi	r24, 0x2A	; 42
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	2a e2       	ldi	r18, 0x2A	; 42
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	f9 01       	movw	r30, r18
 330:	20 81       	ld	r18, Z
 332:	21 60       	ori	r18, 0x01	; 1
 334:	fc 01       	movw	r30, r24
 336:	20 83       	st	Z, r18
 338:	85 e2       	ldi	r24, 0x25	; 37
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	25 e2       	ldi	r18, 0x25	; 37
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	f9 01       	movw	r30, r18
 342:	20 81       	ld	r18, Z
 344:	2c 73       	andi	r18, 0x3C	; 60
 346:	fc 01       	movw	r30, r24
 348:	20 83       	st	Z, r18
 34a:	88 e2       	ldi	r24, 0x28	; 40
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	28 e2       	ldi	r18, 0x28	; 40
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	f9 01       	movw	r30, r18
 354:	20 81       	ld	r18, Z
 356:	2c 73       	andi	r18, 0x3C	; 60
 358:	fc 01       	movw	r30, r24
 35a:	20 83       	st	Z, r18
 35c:	8b e2       	ldi	r24, 0x2B	; 43
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	2b e2       	ldi	r18, 0x2B	; 43
 362:	30 e0       	ldi	r19, 0x00	; 0
 364:	f9 01       	movw	r30, r18
 366:	20 81       	ld	r18, Z
 368:	2c 73       	andi	r18, 0x3C	; 60
 36a:	fc 01       	movw	r30, r24
 36c:	20 83       	st	Z, r18
 36e:	00 00       	nop
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	08 95       	ret

00000376 <get_hall_logic>:
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	1f 92       	push	r1
 37c:	cd b7       	in	r28, 0x3d	; 61
 37e:	de b7       	in	r29, 0x3e	; 62
 380:	19 82       	std	Y+1, r1	; 0x01
 382:	89 e2       	ldi	r24, 0x29	; 41
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	fc 01       	movw	r30, r24
 388:	80 81       	ld	r24, Z
 38a:	88 2f       	mov	r24, r24
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	82 70       	andi	r24, 0x02	; 2
 390:	99 27       	eor	r25, r25
 392:	89 2b       	or	r24, r25
 394:	19 f0       	breq	.+6      	; 0x39c <get_hall_logic+0x26>
 396:	89 81       	ldd	r24, Y+1	; 0x01
 398:	84 60       	ori	r24, 0x04	; 4
 39a:	89 83       	std	Y+1, r24	; 0x01
 39c:	86 e2       	ldi	r24, 0x26	; 38
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	fc 01       	movw	r30, r24
 3a2:	80 81       	ld	r24, Z
 3a4:	88 2f       	mov	r24, r24
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	82 70       	andi	r24, 0x02	; 2
 3aa:	99 27       	eor	r25, r25
 3ac:	89 2b       	or	r24, r25
 3ae:	19 f0       	breq	.+6      	; 0x3b6 <get_hall_logic+0x40>
 3b0:	89 81       	ldd	r24, Y+1	; 0x01
 3b2:	82 60       	ori	r24, 0x02	; 2
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	89 e2       	ldi	r24, 0x29	; 41
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	fc 01       	movw	r30, r24
 3bc:	80 81       	ld	r24, Z
 3be:	88 2f       	mov	r24, r24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	84 70       	andi	r24, 0x04	; 4
 3c4:	99 27       	eor	r25, r25
 3c6:	89 2b       	or	r24, r25
 3c8:	19 f0       	breq	.+6      	; 0x3d0 <get_hall_logic+0x5a>
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	81 60       	ori	r24, 0x01	; 1
 3ce:	89 83       	std	Y+1, r24	; 0x01
 3d0:	89 81       	ldd	r24, Y+1	; 0x01
 3d2:	0f 90       	pop	r0
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	08 95       	ret

000003da <is_direction_clockwise>:
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
 3e2:	83 e2       	ldi	r24, 0x23	; 35
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	fc 01       	movw	r30, r24
 3e8:	80 81       	ld	r24, Z
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	88 70       	andi	r24, 0x08	; 8
 3f0:	99 27       	eor	r25, r25
 3f2:	89 2b       	or	r24, r25
 3f4:	11 f0       	breq	.+4      	; 0x3fa <is_direction_clockwise+0x20>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <is_direction_clockwise+0x22>
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	df 91       	pop	r29
 3fe:	cf 91       	pop	r28
 400:	08 95       	ret

00000402 <set_phase>:
 402:	cf 93       	push	r28
 404:	df 93       	push	r29
 406:	00 d0       	rcall	.+0      	; 0x408 <set_phase+0x6>
 408:	cd b7       	in	r28, 0x3d	; 61
 40a:	de b7       	in	r29, 0x3e	; 62
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	6a 83       	std	Y+2, r22	; 0x02
 410:	89 81       	ldd	r24, Y+1	; 0x01
 412:	88 2f       	mov	r24, r24
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	82 34       	cpi	r24, 0x42	; 66
 418:	91 05       	cpc	r25, r1
 41a:	09 f4       	brne	.+2      	; 0x41e <set_phase+0x1c>
 41c:	4f c0       	rjmp	.+158    	; 0x4bc <set_phase+0xba>
 41e:	83 34       	cpi	r24, 0x43	; 67
 420:	91 05       	cpc	r25, r1
 422:	09 f4       	brne	.+2      	; 0x426 <set_phase+0x24>
 424:	92 c0       	rjmp	.+292    	; 0x54a <set_phase+0x148>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	91 05       	cpc	r25, r1
 42a:	09 f0       	breq	.+2      	; 0x42e <set_phase+0x2c>
 42c:	d5 c0       	rjmp	.+426    	; 0x5d8 <set_phase+0x1d6>
 42e:	8a 81       	ldd	r24, Y+2	; 0x02
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	8c 34       	cpi	r24, 0x4C	; 76
 436:	91 05       	cpc	r25, r1
 438:	d1 f0       	breq	.+52     	; 0x46e <set_phase+0x6c>
 43a:	8a 35       	cpi	r24, 0x5A	; 90
 43c:	91 05       	cpc	r25, r1
 43e:	51 f1       	breq	.+84     	; 0x494 <set_phase+0x92>
 440:	88 34       	cpi	r24, 0x48	; 72
 442:	91 05       	cpc	r25, r1
 444:	09 f0       	breq	.+2      	; 0x448 <set_phase+0x46>
 446:	39 c0       	rjmp	.+114    	; 0x4ba <set_phase+0xb8>
 448:	85 e2       	ldi	r24, 0x25	; 37
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	25 e2       	ldi	r18, 0x25	; 37
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	f9 01       	movw	r30, r18
 452:	20 81       	ld	r18, Z
 454:	2f 77       	andi	r18, 0x7F	; 127
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
 45a:	8b e2       	ldi	r24, 0x2B	; 43
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	2b e2       	ldi	r18, 0x2B	; 43
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	f9 01       	movw	r30, r18
 464:	20 81       	ld	r18, Z
 466:	21 60       	ori	r18, 0x01	; 1
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
 46c:	26 c0       	rjmp	.+76     	; 0x4ba <set_phase+0xb8>
 46e:	8b e2       	ldi	r24, 0x2B	; 43
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	2b e2       	ldi	r18, 0x2B	; 43
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	f9 01       	movw	r30, r18
 478:	20 81       	ld	r18, Z
 47a:	2e 7f       	andi	r18, 0xFE	; 254
 47c:	fc 01       	movw	r30, r24
 47e:	20 83       	st	Z, r18
 480:	85 e2       	ldi	r24, 0x25	; 37
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	25 e2       	ldi	r18, 0x25	; 37
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	20 68       	ori	r18, 0x80	; 128
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
 492:	13 c0       	rjmp	.+38     	; 0x4ba <set_phase+0xb8>
 494:	8b e2       	ldi	r24, 0x2B	; 43
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	2b e2       	ldi	r18, 0x2B	; 43
 49a:	30 e0       	ldi	r19, 0x00	; 0
 49c:	f9 01       	movw	r30, r18
 49e:	20 81       	ld	r18, Z
 4a0:	2e 7f       	andi	r18, 0xFE	; 254
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
 4a6:	85 e2       	ldi	r24, 0x25	; 37
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	25 e2       	ldi	r18, 0x25	; 37
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	f9 01       	movw	r30, r18
 4b0:	20 81       	ld	r18, Z
 4b2:	2f 77       	andi	r18, 0x7F	; 127
 4b4:	fc 01       	movw	r30, r24
 4b6:	20 83       	st	Z, r18
 4b8:	00 00       	nop
 4ba:	8e c0       	rjmp	.+284    	; 0x5d8 <set_phase+0x1d6>
 4bc:	8a 81       	ldd	r24, Y+2	; 0x02
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	8c 34       	cpi	r24, 0x4C	; 76
 4c4:	91 05       	cpc	r25, r1
 4c6:	d1 f0       	breq	.+52     	; 0x4fc <set_phase+0xfa>
 4c8:	8a 35       	cpi	r24, 0x5A	; 90
 4ca:	91 05       	cpc	r25, r1
 4cc:	51 f1       	breq	.+84     	; 0x522 <set_phase+0x120>
 4ce:	88 34       	cpi	r24, 0x48	; 72
 4d0:	91 05       	cpc	r25, r1
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <set_phase+0xd4>
 4d4:	39 c0       	rjmp	.+114    	; 0x548 <set_phase+0x146>
 4d6:	85 e2       	ldi	r24, 0x25	; 37
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	25 e2       	ldi	r18, 0x25	; 37
 4dc:	30 e0       	ldi	r19, 0x00	; 0
 4de:	f9 01       	movw	r30, r18
 4e0:	20 81       	ld	r18, Z
 4e2:	2f 7b       	andi	r18, 0xBF	; 191
 4e4:	fc 01       	movw	r30, r24
 4e6:	20 83       	st	Z, r18
 4e8:	88 e2       	ldi	r24, 0x28	; 40
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	28 e2       	ldi	r18, 0x28	; 40
 4ee:	30 e0       	ldi	r19, 0x00	; 0
 4f0:	f9 01       	movw	r30, r18
 4f2:	20 81       	ld	r18, Z
 4f4:	21 60       	ori	r18, 0x01	; 1
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
 4fa:	26 c0       	rjmp	.+76     	; 0x548 <set_phase+0x146>
 4fc:	88 e2       	ldi	r24, 0x28	; 40
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	28 e2       	ldi	r18, 0x28	; 40
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	f9 01       	movw	r30, r18
 506:	20 81       	ld	r18, Z
 508:	2e 7f       	andi	r18, 0xFE	; 254
 50a:	fc 01       	movw	r30, r24
 50c:	20 83       	st	Z, r18
 50e:	85 e2       	ldi	r24, 0x25	; 37
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	25 e2       	ldi	r18, 0x25	; 37
 514:	30 e0       	ldi	r19, 0x00	; 0
 516:	f9 01       	movw	r30, r18
 518:	20 81       	ld	r18, Z
 51a:	20 64       	ori	r18, 0x40	; 64
 51c:	fc 01       	movw	r30, r24
 51e:	20 83       	st	Z, r18
 520:	13 c0       	rjmp	.+38     	; 0x548 <set_phase+0x146>
 522:	88 e2       	ldi	r24, 0x28	; 40
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	28 e2       	ldi	r18, 0x28	; 40
 528:	30 e0       	ldi	r19, 0x00	; 0
 52a:	f9 01       	movw	r30, r18
 52c:	20 81       	ld	r18, Z
 52e:	2e 7f       	andi	r18, 0xFE	; 254
 530:	fc 01       	movw	r30, r24
 532:	20 83       	st	Z, r18
 534:	85 e2       	ldi	r24, 0x25	; 37
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	25 e2       	ldi	r18, 0x25	; 37
 53a:	30 e0       	ldi	r19, 0x00	; 0
 53c:	f9 01       	movw	r30, r18
 53e:	20 81       	ld	r18, Z
 540:	2f 7b       	andi	r18, 0xBF	; 191
 542:	fc 01       	movw	r30, r24
 544:	20 83       	st	Z, r18
 546:	00 00       	nop
 548:	47 c0       	rjmp	.+142    	; 0x5d8 <set_phase+0x1d6>
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	88 2f       	mov	r24, r24
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	8c 34       	cpi	r24, 0x4C	; 76
 552:	91 05       	cpc	r25, r1
 554:	d1 f0       	breq	.+52     	; 0x58a <set_phase+0x188>
 556:	8a 35       	cpi	r24, 0x5A	; 90
 558:	91 05       	cpc	r25, r1
 55a:	51 f1       	breq	.+84     	; 0x5b0 <set_phase+0x1ae>
 55c:	88 34       	cpi	r24, 0x48	; 72
 55e:	91 05       	cpc	r25, r1
 560:	09 f0       	breq	.+2      	; 0x564 <set_phase+0x162>
 562:	39 c0       	rjmp	.+114    	; 0x5d6 <set_phase+0x1d4>
 564:	85 e2       	ldi	r24, 0x25	; 37
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	25 e2       	ldi	r18, 0x25	; 37
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f9 01       	movw	r30, r18
 56e:	20 81       	ld	r18, Z
 570:	2d 7f       	andi	r18, 0xFD	; 253
 572:	fc 01       	movw	r30, r24
 574:	20 83       	st	Z, r18
 576:	85 e2       	ldi	r24, 0x25	; 37
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	25 e2       	ldi	r18, 0x25	; 37
 57c:	30 e0       	ldi	r19, 0x00	; 0
 57e:	f9 01       	movw	r30, r18
 580:	20 81       	ld	r18, Z
 582:	21 60       	ori	r18, 0x01	; 1
 584:	fc 01       	movw	r30, r24
 586:	20 83       	st	Z, r18
 588:	26 c0       	rjmp	.+76     	; 0x5d6 <set_phase+0x1d4>
 58a:	85 e2       	ldi	r24, 0x25	; 37
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	25 e2       	ldi	r18, 0x25	; 37
 590:	30 e0       	ldi	r19, 0x00	; 0
 592:	f9 01       	movw	r30, r18
 594:	20 81       	ld	r18, Z
 596:	2e 7f       	andi	r18, 0xFE	; 254
 598:	fc 01       	movw	r30, r24
 59a:	20 83       	st	Z, r18
 59c:	85 e2       	ldi	r24, 0x25	; 37
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	25 e2       	ldi	r18, 0x25	; 37
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	f9 01       	movw	r30, r18
 5a6:	20 81       	ld	r18, Z
 5a8:	22 60       	ori	r18, 0x02	; 2
 5aa:	fc 01       	movw	r30, r24
 5ac:	20 83       	st	Z, r18
 5ae:	13 c0       	rjmp	.+38     	; 0x5d6 <set_phase+0x1d4>
 5b0:	85 e2       	ldi	r24, 0x25	; 37
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	25 e2       	ldi	r18, 0x25	; 37
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	f9 01       	movw	r30, r18
 5ba:	20 81       	ld	r18, Z
 5bc:	2e 7f       	andi	r18, 0xFE	; 254
 5be:	fc 01       	movw	r30, r24
 5c0:	20 83       	st	Z, r18
 5c2:	85 e2       	ldi	r24, 0x25	; 37
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	25 e2       	ldi	r18, 0x25	; 37
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	f9 01       	movw	r30, r18
 5cc:	20 81       	ld	r18, Z
 5ce:	2d 7f       	andi	r18, 0xFD	; 253
 5d0:	fc 01       	movw	r30, r24
 5d2:	20 83       	st	Z, r18
 5d4:	00 00       	nop
 5d6:	00 00       	nop
 5d8:	00 00       	nop
 5da:	0f 90       	pop	r0
 5dc:	0f 90       	pop	r0
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	08 95       	ret

000005e4 <set_all_phases>:
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <set_all_phases+0x6>
 5ea:	1f 92       	push	r1
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
 5f0:	89 83       	std	Y+1, r24	; 0x01
 5f2:	6a 83       	std	Y+2, r22	; 0x02
 5f4:	4b 83       	std	Y+3, r20	; 0x03
 5f6:	69 81       	ldd	r22, Y+1	; 0x01
 5f8:	81 e4       	ldi	r24, 0x41	; 65
 5fa:	0e 94 01 02 	call	0x402	; 0x402 <set_phase>
 5fe:	6a 81       	ldd	r22, Y+2	; 0x02
 600:	82 e4       	ldi	r24, 0x42	; 66
 602:	0e 94 01 02 	call	0x402	; 0x402 <set_phase>
 606:	6b 81       	ldd	r22, Y+3	; 0x03
 608:	83 e4       	ldi	r24, 0x43	; 67
 60a:	0e 94 01 02 	call	0x402	; 0x402 <set_phase>
 60e:	00 00       	nop
 610:	0f 90       	pop	r0
 612:	0f 90       	pop	r0
 614:	0f 90       	pop	r0
 616:	df 91       	pop	r29
 618:	cf 91       	pop	r28
 61a:	08 95       	ret

0000061c <main>:

uint8_t ai_result_delayed = 0;
uint8_t helper_p_control = 0; //controls how quickly main() runs

int main(void)
{
 61c:	cf 93       	push	r28
 61e:	df 93       	push	r29
 620:	00 d0       	rcall	.+0      	; 0x622 <main+0x6>
 622:	cd b7       	in	r28, 0x3d	; 61
 624:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 626:	0e 94 39 01 	call	0x272	; 0x272 <atmel_start_init>
	hall_init();
 62a:	0e 94 43 01 	call	0x286	; 0x286 <hall_init>
	phase_init();
 62e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <phase_init>
	adc_init();
 632:	0e 94 b9 00 	call	0x172	; 0x172 <adc_init>
	timer0_init();
 636:	0e 94 4b 01 	call	0x296	; 0x296 <timer0_init>

	
//	adc_select_channel(ADC_CHANNEL_goalRPM);

	while (1) {
		uint8_t ai_result = adc_read_latest();
 63a:	0e 94 29 01 	call	0x252	; 0x252 <adc_read_latest>
 63e:	89 83       	std	Y+1, r24	; 0x01
		uint8_t count_latest = TCNT0;
 640:	86 e4       	ldi	r24, 0x46	; 70
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	fc 01       	movw	r30, r24
 646:	80 81       	ld	r24, Z
 648:	8a 83       	std	Y+2, r24	; 0x02
		
		if( ai_result != ai_result_delayed ) { //user changed rpm
 64a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 64e:	99 81       	ldd	r25, Y+1	; 0x01
 650:	98 17       	cp	r25, r24
 652:	39 f1       	breq	.+78     	; 0x6a2 <main+0x86>
			helper_p_control++; //increment helper               
 654:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 658:	8f 5f       	subi	r24, 0xFF	; 255
 65a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <helper_p_control>
			if( helper_p_control >= 100 ) { //only update rpm every n loop cycles
 65e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 662:	84 36       	cpi	r24, 0x64	; 100
 664:	f0 f0       	brcs	.+60     	; 0x6a2 <main+0x86>
				helper_p_control = 0; //reset helper
 666:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <helper_p_control>
				if ( (ai_result > ai_result_delayed) && (ai_result_delayed < 127) ) { ai_result_delayed++; } //new rpm greater than old
 66a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 66e:	99 81       	ldd	r25, Y+1	; 0x01
 670:	89 17       	cp	r24, r25
 672:	48 f4       	brcc	.+18     	; 0x686 <main+0x6a>
 674:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 678:	8f 37       	cpi	r24, 0x7F	; 127
 67a:	28 f4       	brcc	.+10     	; 0x686 <main+0x6a>
 67c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 680:	8f 5f       	subi	r24, 0xFF	; 255
 682:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				if ( (ai_result < ai_result_delayed) && (ai_result_delayed > 0  ) ) { ai_result_delayed--; } //new rpm less    than old
 686:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 68a:	99 81       	ldd	r25, Y+1	; 0x01
 68c:	98 17       	cp	r25, r24
 68e:	48 f4       	brcc	.+18     	; 0x6a2 <main+0x86>
 690:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 694:	88 23       	and	r24, r24
 696:	29 f0       	breq	.+10     	; 0x6a2 <main+0x86>
 698:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 69c:	81 50       	subi	r24, 0x01	; 1
 69e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		} 
		
		
		//ai_result_delayed = scale_adc_pwm(ai_result_delayed); //LUT hack to spoof GG2 spindle RPM behavior 
		
		if( count_latest > ai_result_delayed ) { //if free-running counter value is greater than arduino PWM output, turn off all FETs
 6a2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 6a6:	9a 81       	ldd	r25, Y+2	; 0x02
 6a8:	89 17       	cp	r24, r25
 6aa:	30 f4       	brcc	.+12     	; 0x6b8 <main+0x9c>
			set_all_phases('Z','Z','Z'); //replicate GG2 behavior
 6ac:	4a e5       	ldi	r20, 0x5A	; 90
 6ae:	6a e5       	ldi	r22, 0x5A	; 90
 6b0:	8a e5       	ldi	r24, 0x5A	; 90
 6b2:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 6b6:	c1 cf       	rjmp	.-126    	; 0x63a <main+0x1e>
		
		} else { //always true when 'S8000' sent, true half the time when 'S4000', never true when 'S0'
			if( is_direction_clockwise() == 0 ) //spin CCW
 6b8:	0e 94 ed 01 	call	0x3da	; 0x3da <is_direction_clockwise>
 6bc:	88 23       	and	r24, r24
 6be:	09 f0       	breq	.+2      	; 0x6c2 <main+0xa6>
 6c0:	43 c0       	rjmp	.+134    	; 0x748 <main+0x12c>
			{
				//PIND |= (1<<3); //debug... toggle PD3 (X1LIM)
				switch ( get_hall_logic() ) {
 6c2:	0e 94 bb 01 	call	0x376	; 0x376 <get_hall_logic>
 6c6:	88 2f       	mov	r24, r24
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	83 30       	cpi	r24, 0x03	; 3
 6cc:	91 05       	cpc	r25, r1
 6ce:	19 f1       	breq	.+70     	; 0x716 <main+0xfa>
 6d0:	84 30       	cpi	r24, 0x04	; 4
 6d2:	91 05       	cpc	r25, r1
 6d4:	34 f4       	brge	.+12     	; 0x6e2 <main+0xc6>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	91 05       	cpc	r25, r1
 6da:	49 f1       	breq	.+82     	; 0x72e <main+0x112>
 6dc:	02 97       	sbiw	r24, 0x02	; 2
 6de:	09 f1       	breq	.+66     	; 0x722 <main+0x106>
 6e0:	2c c0       	rjmp	.+88     	; 0x73a <main+0x11e>
 6e2:	85 30       	cpi	r24, 0x05	; 5
 6e4:	91 05       	cpc	r25, r1
 6e6:	59 f0       	breq	.+22     	; 0x6fe <main+0xe2>
 6e8:	85 30       	cpi	r24, 0x05	; 5
 6ea:	91 05       	cpc	r25, r1
 6ec:	74 f0       	brlt	.+28     	; 0x70a <main+0xee>
 6ee:	06 97       	sbiw	r24, 0x06	; 6
 6f0:	21 f5       	brne	.+72     	; 0x73a <main+0x11e>
					case 6: set_all_phases('H','L','Z'); break;
 6f2:	4a e5       	ldi	r20, 0x5A	; 90
 6f4:	6c e4       	ldi	r22, 0x4C	; 76
 6f6:	88 e4       	ldi	r24, 0x48	; 72
 6f8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 6fc:	68 c0       	rjmp	.+208    	; 0x7ce <main+0x1b2>
					case 5: set_all_phases('L','Z','H'); break;
 6fe:	48 e4       	ldi	r20, 0x48	; 72
 700:	6a e5       	ldi	r22, 0x5A	; 90
 702:	8c e4       	ldi	r24, 0x4C	; 76
 704:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 708:	62 c0       	rjmp	.+196    	; 0x7ce <main+0x1b2>
					case 4: set_all_phases('Z','L','H'); break;
 70a:	48 e4       	ldi	r20, 0x48	; 72
 70c:	6c e4       	ldi	r22, 0x4C	; 76
 70e:	8a e5       	ldi	r24, 0x5A	; 90
 710:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 714:	5c c0       	rjmp	.+184    	; 0x7ce <main+0x1b2>
					case 3: set_all_phases('Z','H','L'); break;
 716:	4c e4       	ldi	r20, 0x4C	; 76
 718:	68 e4       	ldi	r22, 0x48	; 72
 71a:	8a e5       	ldi	r24, 0x5A	; 90
 71c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 720:	56 c0       	rjmp	.+172    	; 0x7ce <main+0x1b2>
					case 2: set_all_phases('H','Z','L'); break;
 722:	4c e4       	ldi	r20, 0x4C	; 76
 724:	6a e5       	ldi	r22, 0x5A	; 90
 726:	88 e4       	ldi	r24, 0x48	; 72
 728:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 72c:	50 c0       	rjmp	.+160    	; 0x7ce <main+0x1b2>
					case 1: set_all_phases('L','H','Z'); break;
 72e:	4a e5       	ldi	r20, 0x5A	; 90
 730:	68 e4       	ldi	r22, 0x48	; 72
 732:	8c e4       	ldi	r24, 0x4C	; 76
 734:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 738:	4a c0       	rjmp	.+148    	; 0x7ce <main+0x1b2>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 73a:	4a e5       	ldi	r20, 0x5A	; 90
 73c:	6a e5       	ldi	r22, 0x5A	; 90
 73e:	8a e5       	ldi	r24, 0x5A	; 90
 740:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
						break;
 744:	00 00       	nop
 746:	43 c0       	rjmp	.+134    	; 0x7ce <main+0x1b2>
				}		
			} else { //spin CW
				switch ( get_hall_logic() ) {
 748:	0e 94 bb 01 	call	0x376	; 0x376 <get_hall_logic>
 74c:	88 2f       	mov	r24, r24
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	83 30       	cpi	r24, 0x03	; 3
 752:	91 05       	cpc	r25, r1
 754:	f1 f0       	breq	.+60     	; 0x792 <main+0x176>
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	91 05       	cpc	r25, r1
 75a:	34 f4       	brge	.+12     	; 0x768 <main+0x14c>
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 05       	cpc	r25, r1
 760:	61 f0       	breq	.+24     	; 0x77a <main+0x15e>
 762:	02 97       	sbiw	r24, 0x02	; 2
 764:	81 f0       	breq	.+32     	; 0x786 <main+0x16a>
 766:	2d c0       	rjmp	.+90     	; 0x7c2 <main+0x1a6>
 768:	85 30       	cpi	r24, 0x05	; 5
 76a:	91 05       	cpc	r25, r1
 76c:	f1 f0       	breq	.+60     	; 0x7aa <main+0x18e>
 76e:	85 30       	cpi	r24, 0x05	; 5
 770:	91 05       	cpc	r25, r1
 772:	ac f0       	brlt	.+42     	; 0x79e <main+0x182>
 774:	06 97       	sbiw	r24, 0x06	; 6
 776:	f9 f0       	breq	.+62     	; 0x7b6 <main+0x19a>
 778:	24 c0       	rjmp	.+72     	; 0x7c2 <main+0x1a6>
					case 1: set_all_phases('H','L','Z'); break;
 77a:	4a e5       	ldi	r20, 0x5A	; 90
 77c:	6c e4       	ldi	r22, 0x4C	; 76
 77e:	88 e4       	ldi	r24, 0x48	; 72
 780:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 784:	24 c0       	rjmp	.+72     	; 0x7ce <main+0x1b2>
					case 2: set_all_phases('L','Z','H'); break;
 786:	48 e4       	ldi	r20, 0x48	; 72
 788:	6a e5       	ldi	r22, 0x5A	; 90
 78a:	8c e4       	ldi	r24, 0x4C	; 76
 78c:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 790:	1e c0       	rjmp	.+60     	; 0x7ce <main+0x1b2>
					case 3: set_all_phases('Z','L','H'); break;
 792:	48 e4       	ldi	r20, 0x48	; 72
 794:	6c e4       	ldi	r22, 0x4C	; 76
 796:	8a e5       	ldi	r24, 0x5A	; 90
 798:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 79c:	18 c0       	rjmp	.+48     	; 0x7ce <main+0x1b2>
					case 4: set_all_phases('Z','H','L'); break;
 79e:	4c e4       	ldi	r20, 0x4C	; 76
 7a0:	68 e4       	ldi	r22, 0x48	; 72
 7a2:	8a e5       	ldi	r24, 0x5A	; 90
 7a4:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 7a8:	12 c0       	rjmp	.+36     	; 0x7ce <main+0x1b2>
					case 5: set_all_phases('H','Z','L'); break;
 7aa:	4c e4       	ldi	r20, 0x4C	; 76
 7ac:	6a e5       	ldi	r22, 0x5A	; 90
 7ae:	88 e4       	ldi	r24, 0x48	; 72
 7b0:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 7b4:	0c c0       	rjmp	.+24     	; 0x7ce <main+0x1b2>
					case 6: set_all_phases('L','H','Z'); break;
 7b6:	4a e5       	ldi	r20, 0x5A	; 90
 7b8:	68 e4       	ldi	r22, 0x48	; 72
 7ba:	8c e4       	ldi	r24, 0x4C	; 76
 7bc:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
 7c0:	06 c0       	rjmp	.+12     	; 0x7ce <main+0x1b2>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 7c2:	4a e5       	ldi	r20, 0x5A	; 90
 7c4:	6a e5       	ldi	r22, 0x5A	; 90
 7c6:	8a e5       	ldi	r24, 0x5A	; 90
 7c8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <set_all_phases>
						break;
 7cc:	00 00       	nop
				}
			}
		}
	}
 7ce:	35 cf       	rjmp	.-406    	; 0x63a <main+0x1e>

000007d0 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 7d0:	cf 93       	push	r28
 7d2:	df 93       	push	r29
 7d4:	00 d0       	rcall	.+0      	; 0x7d6 <PORTB_set_port_dir+0x6>
 7d6:	cd b7       	in	r28, 0x3d	; 61
 7d8:	de b7       	in	r29, 0x3e	; 62
 7da:	89 83       	std	Y+1, r24	; 0x01
 7dc:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	88 2f       	mov	r24, r24
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	81 30       	cpi	r24, 0x01	; 1
 7e6:	91 05       	cpc	r25, r1
 7e8:	99 f0       	breq	.+38     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 7ea:	82 30       	cpi	r24, 0x02	; 2
 7ec:	91 05       	cpc	r25, r1
 7ee:	d9 f0       	breq	.+54     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7f0:	89 2b       	or	r24, r25
 7f2:	09 f0       	breq	.+2      	; 0x7f6 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 7f4:	2f c0       	rjmp	.+94     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 7f6:	84 e2       	ldi	r24, 0x24	; 36
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	24 e2       	ldi	r18, 0x24	; 36
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	f9 01       	movw	r30, r18
 800:	20 81       	ld	r18, Z
 802:	32 2f       	mov	r19, r18
 804:	29 81       	ldd	r18, Y+1	; 0x01
 806:	20 95       	com	r18
 808:	23 23       	and	r18, r19
 80a:	fc 01       	movw	r30, r24
 80c:	20 83       	st	Z, r18
		break;
 80e:	22 c0       	rjmp	.+68     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	case PORT_DIR_OUT:
		DDRB |= mask;
 810:	84 e2       	ldi	r24, 0x24	; 36
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	24 e2       	ldi	r18, 0x24	; 36
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	f9 01       	movw	r30, r18
 81a:	30 81       	ld	r19, Z
 81c:	29 81       	ldd	r18, Y+1	; 0x01
 81e:	23 2b       	or	r18, r19
 820:	fc 01       	movw	r30, r24
 822:	20 83       	st	Z, r18
		break;
 824:	17 c0       	rjmp	.+46     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 826:	84 e2       	ldi	r24, 0x24	; 36
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	24 e2       	ldi	r18, 0x24	; 36
 82c:	30 e0       	ldi	r19, 0x00	; 0
 82e:	f9 01       	movw	r30, r18
 830:	20 81       	ld	r18, Z
 832:	32 2f       	mov	r19, r18
 834:	29 81       	ldd	r18, Y+1	; 0x01
 836:	20 95       	com	r18
 838:	23 23       	and	r18, r19
 83a:	fc 01       	movw	r30, r24
 83c:	20 83       	st	Z, r18

		PORTB |= mask;
 83e:	85 e2       	ldi	r24, 0x25	; 37
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	25 e2       	ldi	r18, 0x25	; 37
 844:	30 e0       	ldi	r19, 0x00	; 0
 846:	f9 01       	movw	r30, r18
 848:	30 81       	ld	r19, Z
 84a:	29 81       	ldd	r18, Y+1	; 0x01
 84c:	23 2b       	or	r18, r19
 84e:	fc 01       	movw	r30, r24
 850:	20 83       	st	Z, r18
		break;
 852:	00 00       	nop
	default:
		break;
	}
}
 854:	00 00       	nop
 856:	0f 90       	pop	r0
 858:	0f 90       	pop	r0
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 860:	cf 93       	push	r28
 862:	df 93       	push	r29
 864:	00 d0       	rcall	.+0      	; 0x866 <PORTC_set_port_dir+0x6>
 866:	cd b7       	in	r28, 0x3d	; 61
 868:	de b7       	in	r29, 0x3e	; 62
 86a:	89 83       	std	Y+1, r24	; 0x01
 86c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	88 2f       	mov	r24, r24
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	91 05       	cpc	r25, r1
 878:	99 f0       	breq	.+38     	; 0x8a0 <PORTC_set_port_dir+0x40>
 87a:	82 30       	cpi	r24, 0x02	; 2
 87c:	91 05       	cpc	r25, r1
 87e:	d9 f0       	breq	.+54     	; 0x8b6 <PORTC_set_port_dir+0x56>
 880:	89 2b       	or	r24, r25
 882:	09 f0       	breq	.+2      	; 0x886 <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 884:	2f c0       	rjmp	.+94     	; 0x8e4 <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 886:	87 e2       	ldi	r24, 0x27	; 39
 888:	90 e0       	ldi	r25, 0x00	; 0
 88a:	27 e2       	ldi	r18, 0x27	; 39
 88c:	30 e0       	ldi	r19, 0x00	; 0
 88e:	f9 01       	movw	r30, r18
 890:	20 81       	ld	r18, Z
 892:	32 2f       	mov	r19, r18
 894:	29 81       	ldd	r18, Y+1	; 0x01
 896:	20 95       	com	r18
 898:	23 23       	and	r18, r19
 89a:	fc 01       	movw	r30, r24
 89c:	20 83       	st	Z, r18
		break;
 89e:	22 c0       	rjmp	.+68     	; 0x8e4 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
 8a0:	87 e2       	ldi	r24, 0x27	; 39
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	27 e2       	ldi	r18, 0x27	; 39
 8a6:	30 e0       	ldi	r19, 0x00	; 0
 8a8:	f9 01       	movw	r30, r18
 8aa:	30 81       	ld	r19, Z
 8ac:	29 81       	ldd	r18, Y+1	; 0x01
 8ae:	23 2b       	or	r18, r19
 8b0:	fc 01       	movw	r30, r24
 8b2:	20 83       	st	Z, r18
		break;
 8b4:	17 c0       	rjmp	.+46     	; 0x8e4 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 8b6:	87 e2       	ldi	r24, 0x27	; 39
 8b8:	90 e0       	ldi	r25, 0x00	; 0
 8ba:	27 e2       	ldi	r18, 0x27	; 39
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	f9 01       	movw	r30, r18
 8c0:	20 81       	ld	r18, Z
 8c2:	32 2f       	mov	r19, r18
 8c4:	29 81       	ldd	r18, Y+1	; 0x01
 8c6:	20 95       	com	r18
 8c8:	23 23       	and	r18, r19
 8ca:	fc 01       	movw	r30, r24
 8cc:	20 83       	st	Z, r18

		PORTC |= mask;
 8ce:	88 e2       	ldi	r24, 0x28	; 40
 8d0:	90 e0       	ldi	r25, 0x00	; 0
 8d2:	28 e2       	ldi	r18, 0x28	; 40
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	f9 01       	movw	r30, r18
 8d8:	30 81       	ld	r19, Z
 8da:	29 81       	ldd	r18, Y+1	; 0x01
 8dc:	23 2b       	or	r18, r19
 8de:	fc 01       	movw	r30, r24
 8e0:	20 83       	st	Z, r18
		break;
 8e2:	00 00       	nop
	default:
		break;
	}
}
 8e4:	00 00       	nop
 8e6:	0f 90       	pop	r0
 8e8:	0f 90       	pop	r0
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	00 d0       	rcall	.+0      	; 0x8f6 <PORTD_set_port_dir+0x6>
 8f6:	cd b7       	in	r28, 0x3d	; 61
 8f8:	de b7       	in	r29, 0x3e	; 62
 8fa:	89 83       	std	Y+1, r24	; 0x01
 8fc:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 8fe:	8a 81       	ldd	r24, Y+2	; 0x02
 900:	88 2f       	mov	r24, r24
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	81 30       	cpi	r24, 0x01	; 1
 906:	91 05       	cpc	r25, r1
 908:	99 f0       	breq	.+38     	; 0x930 <__stack+0x31>
 90a:	82 30       	cpi	r24, 0x02	; 2
 90c:	91 05       	cpc	r25, r1
 90e:	d9 f0       	breq	.+54     	; 0x946 <__stack+0x47>
 910:	89 2b       	or	r24, r25
 912:	09 f0       	breq	.+2      	; 0x916 <__stack+0x17>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 914:	2f c0       	rjmp	.+94     	; 0x974 <__stack+0x75>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 916:	8a e2       	ldi	r24, 0x2A	; 42
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	2a e2       	ldi	r18, 0x2A	; 42
 91c:	30 e0       	ldi	r19, 0x00	; 0
 91e:	f9 01       	movw	r30, r18
 920:	20 81       	ld	r18, Z
 922:	32 2f       	mov	r19, r18
 924:	29 81       	ldd	r18, Y+1	; 0x01
 926:	20 95       	com	r18
 928:	23 23       	and	r18, r19
 92a:	fc 01       	movw	r30, r24
 92c:	20 83       	st	Z, r18
		break;
 92e:	22 c0       	rjmp	.+68     	; 0x974 <__stack+0x75>
	case PORT_DIR_OUT:
		DDRD |= mask;
 930:	8a e2       	ldi	r24, 0x2A	; 42
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	2a e2       	ldi	r18, 0x2A	; 42
 936:	30 e0       	ldi	r19, 0x00	; 0
 938:	f9 01       	movw	r30, r18
 93a:	30 81       	ld	r19, Z
 93c:	29 81       	ldd	r18, Y+1	; 0x01
 93e:	23 2b       	or	r18, r19
 940:	fc 01       	movw	r30, r24
 942:	20 83       	st	Z, r18
		break;
 944:	17 c0       	rjmp	.+46     	; 0x974 <__stack+0x75>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 946:	8a e2       	ldi	r24, 0x2A	; 42
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	2a e2       	ldi	r18, 0x2A	; 42
 94c:	30 e0       	ldi	r19, 0x00	; 0
 94e:	f9 01       	movw	r30, r18
 950:	20 81       	ld	r18, Z
 952:	32 2f       	mov	r19, r18
 954:	29 81       	ldd	r18, Y+1	; 0x01
 956:	20 95       	com	r18
 958:	23 23       	and	r18, r19
 95a:	fc 01       	movw	r30, r24
 95c:	20 83       	st	Z, r18

		PORTD |= mask;
 95e:	8b e2       	ldi	r24, 0x2B	; 43
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	2b e2       	ldi	r18, 0x2B	; 43
 964:	30 e0       	ldi	r19, 0x00	; 0
 966:	f9 01       	movw	r30, r18
 968:	30 81       	ld	r19, Z
 96a:	29 81       	ldd	r18, Y+1	; 0x01
 96c:	23 2b       	or	r18, r19
 96e:	fc 01       	movw	r30, r24
 970:	20 83       	st	Z, r18
		break;
 972:	00 00       	nop
	default:
		break;
	}
}
 974:	00 00       	nop
 976:	0f 90       	pop	r0
 978:	0f 90       	pop	r0
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	08 95       	ret

00000980 <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 980:	cf 93       	push	r28
 982:	df 93       	push	r29
 984:	00 d0       	rcall	.+0      	; 0x986 <PORTE_set_port_dir+0x6>
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	89 83       	std	Y+1, r24	; 0x01
 98c:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 98e:	8a 81       	ldd	r24, Y+2	; 0x02
 990:	88 2f       	mov	r24, r24
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	91 05       	cpc	r25, r1
 998:	99 f0       	breq	.+38     	; 0x9c0 <PORTE_set_port_dir+0x40>
 99a:	82 30       	cpi	r24, 0x02	; 2
 99c:	91 05       	cpc	r25, r1
 99e:	d9 f0       	breq	.+54     	; 0x9d6 <PORTE_set_port_dir+0x56>
 9a0:	89 2b       	or	r24, r25
 9a2:	09 f0       	breq	.+2      	; 0x9a6 <PORTE_set_port_dir+0x26>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
 9a4:	2f c0       	rjmp	.+94     	; 0xa04 <PORTE_set_port_dir+0x84>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
 9a6:	8d e2       	ldi	r24, 0x2D	; 45
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	2d e2       	ldi	r18, 0x2D	; 45
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	f9 01       	movw	r30, r18
 9b0:	20 81       	ld	r18, Z
 9b2:	32 2f       	mov	r19, r18
 9b4:	29 81       	ldd	r18, Y+1	; 0x01
 9b6:	20 95       	com	r18
 9b8:	23 23       	and	r18, r19
 9ba:	fc 01       	movw	r30, r24
 9bc:	20 83       	st	Z, r18
		break;
 9be:	22 c0       	rjmp	.+68     	; 0xa04 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRE |= mask;
 9c0:	8d e2       	ldi	r24, 0x2D	; 45
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	2d e2       	ldi	r18, 0x2D	; 45
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	f9 01       	movw	r30, r18
 9ca:	30 81       	ld	r19, Z
 9cc:	29 81       	ldd	r18, Y+1	; 0x01
 9ce:	23 2b       	or	r18, r19
 9d0:	fc 01       	movw	r30, r24
 9d2:	20 83       	st	Z, r18
		break;
 9d4:	17 c0       	rjmp	.+46     	; 0xa04 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 9d6:	8d e2       	ldi	r24, 0x2D	; 45
 9d8:	90 e0       	ldi	r25, 0x00	; 0
 9da:	2d e2       	ldi	r18, 0x2D	; 45
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	f9 01       	movw	r30, r18
 9e0:	20 81       	ld	r18, Z
 9e2:	32 2f       	mov	r19, r18
 9e4:	29 81       	ldd	r18, Y+1	; 0x01
 9e6:	20 95       	com	r18
 9e8:	23 23       	and	r18, r19
 9ea:	fc 01       	movw	r30, r24
 9ec:	20 83       	st	Z, r18

		PORTE |= mask;
 9ee:	8e e2       	ldi	r24, 0x2E	; 46
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	2e e2       	ldi	r18, 0x2E	; 46
 9f4:	30 e0       	ldi	r19, 0x00	; 0
 9f6:	f9 01       	movw	r30, r18
 9f8:	30 81       	ld	r19, Z
 9fa:	29 81       	ldd	r18, Y+1	; 0x01
 9fc:	23 2b       	or	r18, r19
 9fe:	fc 01       	movw	r30, r24
 a00:	20 83       	st	Z, r18
		break;
 a02:	00 00       	nop
	default:
		break;
	}
}
 a04:	00 00       	nop
 a06:	0f 90       	pop	r0
 a08:	0f 90       	pop	r0
 a0a:	df 91       	pop	r29
 a0c:	cf 91       	pop	r28
 a0e:	08 95       	ret

00000a10 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 a10:	cf 93       	push	r28
 a12:	df 93       	push	r29
 a14:	cd b7       	in	r28, 0x3d	; 61
 a16:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 a18:	40 e0       	ldi	r20, 0x00	; 0
 a1a:	60 e8       	ldi	r22, 0x80	; 128
 a1c:	81 e6       	ldi	r24, 0x61	; 97
 a1e:	90 e0       	ldi	r25, 0x00	; 0
 a20:	0e 94 47 05 	call	0xa8e	; 0xa8e <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 a24:	83 e5       	ldi	r24, 0x53	; 83
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	fc 01       	movw	r30, r24
 a2a:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 a2c:	85 e5       	ldi	r24, 0x55	; 85
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	fc 01       	movw	r30, r24
 a32:	10 82       	st	Z, r1

	return 0;
 a34:	80 e0       	ldi	r24, 0x00	; 0
}
 a36:	df 91       	pop	r29
 a38:	cf 91       	pop	r28
 a3a:	08 95       	ret

00000a3c <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 a3c:	cf 93       	push	r28
 a3e:	df 93       	push	r29
 a40:	cd b7       	in	r28, 0x3d	; 61
 a42:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM0) | (1 << PRCAN) | (1 << PRTIM1) | (1 << PRLIN) | (1 << PRPSC) | (1 << PRADC);
 a44:	84 e6       	ldi	r24, 0x64	; 100
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	2f e7       	ldi	r18, 0x7F	; 127
 a4a:	fc 01       	movw	r30, r24
 a4c:	20 83       	st	Z, r18

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 a4e:	62 e0       	ldi	r22, 0x02	; 2
 a50:	8f ef       	ldi	r24, 0xFF	; 255
 a52:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <PORTB_set_port_dir>
	PORTC_set_port_dir(0xff, PORT_DIR_OFF);
 a56:	62 e0       	ldi	r22, 0x02	; 2
 a58:	8f ef       	ldi	r24, 0xFF	; 255
 a5a:	0e 94 30 04 	call	0x860	; 0x860 <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 a5e:	62 e0       	ldi	r22, 0x02	; 2
 a60:	8f ef       	ldi	r24, 0xFF	; 255
 a62:	0e 94 78 04 	call	0x8f0	; 0x8f0 <PORTD_set_port_dir>
	PORTE_set_port_dir(0x07, PORT_DIR_OFF);
 a66:	62 e0       	ldi	r22, 0x02	; 2
 a68:	87 e0       	ldi	r24, 0x07	; 7
 a6a:	0e 94 c0 04 	call	0x980	; 0x980 <PORTE_set_port_dir>
}
 a6e:	00 00       	nop
 a70:	df 91       	pop	r29
 a72:	cf 91       	pop	r28
 a74:	08 95       	ret

00000a76 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 a76:	cf 93       	push	r28
 a78:	df 93       	push	r29
 a7a:	cd b7       	in	r28, 0x3d	; 61
 a7c:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 a7e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <mcu_init>

	sysctrl_init();
 a82:	0e 94 08 05 	call	0xa10	; 0xa10 <sysctrl_init>
}
 a86:	00 00       	nop
 a88:	df 91       	pop	r29
 a8a:	cf 91       	pop	r28
 a8c:	08 95       	ret

00000a8e <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 a8e:	2f b7       	in	r18, 0x3f	; 63
	cli
 a90:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 a92:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 a94:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 a96:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 a98:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 a9a:	08 95       	ret

00000a9c <_exit>:
 a9c:	f8 94       	cli

00000a9e <__stop_program>:
 a9e:	ff cf       	rjmp	.-2      	; 0xa9e <__stop_program>
