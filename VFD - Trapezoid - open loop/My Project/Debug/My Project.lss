
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000929  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000892  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000926  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000926  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000929  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000095c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000120  00000000  00000000  000009a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001045  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000cbe  00000000  00000000  00001b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a65  00000000  00000000  000027c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002d0  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000073e  00000000  00000000  000034f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000052b  00000000  00000000  00003c36  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000c0  00000000  00000000  00004161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 06 02 	call	0x40c	; 0x40c <main>
  9c:	0c 94 47 04 	jmp	0x88e	; 0x88e <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <adc_select_vref>:
#include <adc.h>
#include <atmel_start.h>


void adc_select_vref(uint8_t reference)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
	//"The user is advised not to write new reference selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
  b0:	8a e7       	ldi	r24, 0x7A	; 122
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2a e7       	ldi	r18, 0x7A	; 122
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	2f 7b       	andi	r18, 0xBF	; 191
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(reference == VREF_EXT_AVCC) {ADMUX = ( (ADMUX & 0b00111111) | (1<<REFS0) ); } //sets ADMUX to b01xxxxxx
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 23       	and	r24, r24
  c6:	51 f4       	brne	.+20     	; 0xdc <adc_select_vref+0x38>
  c8:	8c e7       	ldi	r24, 0x7C	; 124
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2c e7       	ldi	r18, 0x7C	; 124
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	2f 73       	andi	r18, 0x3F	; 63
  d6:	20 64       	ori	r18, 0x40	; 64
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
	if(reference == VREF_INT_2V56) {ADMUX |= ( (1<<REFS0) | (1<<REFS1) ); } //sets ADMUX to b11xxxxxx
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	49 f4       	brne	.+18     	; 0xf4 <adc_select_vref+0x50>
  e2:	8c e7       	ldi	r24, 0x7C	; 124
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2c e7       	ldi	r18, 0x7C	; 124
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	20 6c       	ori	r18, 0xC0	; 192
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
  f4:	00 00       	nop
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <adc_select_channel>:


void adc_select_channel(uint8_t channel)
{
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
	//"The user is advised not to write new channel selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
 10a:	8a e7       	ldi	r24, 0x7A	; 122
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a e7       	ldi	r18, 0x7A	; 122
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	2f 7b       	andi	r18, 0xBF	; 191
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(     channel == ADC_CHANNEL_goalRPM) {ADMUX = ( (ADMUX & 0b11100000) | 0b00000101 ); } //ADC5 (single ended)
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 23       	and	r24, r24
 120:	59 f4       	brne	.+22     	; 0x138 <adc_select_channel+0x3a>
 122:	8c e7       	ldi	r24, 0x7C	; 124
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2c e7       	ldi	r18, 0x7C	; 124
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	20 7e       	andi	r18, 0xE0	; 224
 130:	25 60       	ori	r18, 0x05	; 5
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
	else if(channel == ADC_CHANNEL_VCCDIV4) {ADMUX = ( (ADMUX & 0b11100000) | 0b00001100 ); } //VCC/4 (SE)
	//JTS2do: add other channels here
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
 136:	0d c0       	rjmp	.+26     	; 0x152 <adc_select_channel+0x54>
{
	//"The user is advised not to write new channel selection values during Free Running mode"
	ADCSRA &= ~(1<<ADSC); //disable free running mode
	//while ( !(ADCSRA & (1<<ADIF)) ) {;} //wait for ADC to stop
	if(     channel == ADC_CHANNEL_goalRPM) {ADMUX = ( (ADMUX & 0b11100000) | 0b00000101 ); } //ADC5 (single ended)
	else if(channel == ADC_CHANNEL_VCCDIV4) {ADMUX = ( (ADMUX & 0b11100000) | 0b00001100 ); } //VCC/4 (SE)
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	85 30       	cpi	r24, 0x05	; 5
 13c:	51 f4       	brne	.+20     	; 0x152 <adc_select_channel+0x54>
 13e:	8c e7       	ldi	r24, 0x7C	; 124
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2c e7       	ldi	r18, 0x7C	; 124
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 7e       	andi	r18, 0xE0	; 224
 14c:	2c 60       	ori	r18, 0x0C	; 12
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
	//JTS2do: add other channels here
	//ADCSRA |= (1<<ADSC); //enable free running mode
}
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <adc_init>:


void adc_init()
{	
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
	DIDR0 = (1<<ADC5D);//disable digital logic on adc pin (to reduce power)(see DIDR0/DIDR1)
 164:	8e e7       	ldi	r24, 0x7E	; 126
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 e2       	ldi	r18, 0x20	; 32
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
	PRR &= ~(1<<PRADC); //enable system clock to ADC.  This is default value, but just making sure ADC is on
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	24 e6       	ldi	r18, 0x64	; 100
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	2e 7f       	andi	r18, 0xFE	; 254
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
	ADC_goalRPM_PORT &= ~(1<<ADC_goalRPM_BIT); //disable goalRPM pullup resistor
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e2       	ldi	r18, 0x25	; 37
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2b 7f       	andi	r18, 0xFB	; 251
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18

	ADCSRA = 0; //reset to default values
 192:	8a e7       	ldi	r24, 0x7A	; 122
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADEN); //enable ADC subsystem (but doesn't actually start)
 19a:	8a e7       	ldi	r24, 0x7A	; 122
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a e7       	ldi	r18, 0x7A	; 122
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	20 68       	ori	r18, 0x80	; 128
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
	ADCSRA |= 0b00000110; //ADPS: sets ADC clock to 16E6/64 = 250 kHz (max anecdotal supported is clock = 2 MHz).  Conversion takes 16 clock cycles, so ~15 kS/s.
 1ac:	8a e7       	ldi	r24, 0x7A	; 122
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2a e7       	ldi	r18, 0x7A	; 122
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	26 60       	ori	r18, 0x06	; 6
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADATE); //auto-trigger enable... ADC is just always digitizing.  When we want a value, we just grab the last one acquired
 1be:	8a e7       	ldi	r24, 0x7A	; 122
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2a e7       	ldi	r18, 0x7A	; 122
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	20 62       	ori	r18, 0x20	; 32
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
		
	ADCSRB = 0; //reset to default values
 1d0:	8b e7       	ldi	r24, 0x7B	; 123
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	10 82       	st	Z, r1
	ADCSRB |= (1<<ADHSM); //uncomment to enable high speed mode.  max ADC rate with this line commented out is 200 kHz 
 1d8:	8b e7       	ldi	r24, 0x7B	; 123
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	2b e7       	ldi	r18, 0x7B	; 123
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	20 68       	ori	r18, 0x80	; 128
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
	ADCSRB |= (1<<AREFEN); //connect analog reference to external AREF pin (with capacitor)
 1ea:	8b e7       	ldi	r24, 0x7B	; 123
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	2b e7       	ldi	r18, 0x7B	; 123
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	20 62       	ori	r18, 0x20	; 32
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
						   //We don't want to use 32M1's internal reference because we only care about the ratiometric difference between the VCC and PWM %
						   //In other words, uses a known good reference would actually add more uncertainty (because we lose the ratiometric tie)
	//ADCSRB 3:0 sets auto-trigger source selection bits 0b0000 is "free running mode", which we're using for now

	
	ADMUX = 0; //reset 
 1fc:	8c e7       	ldi	r24, 0x7C	; 124
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	10 82       	st	Z, r1
	adc_select_vref(VREF_EXT_AVCC);  //modifies ADMUX, so needs to happen after "ADMUX=0;"
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_select_vref>
	adc_select_channel(ADC_CHANNEL_goalRPM); // "always select a channel before starting the first conversion"
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_select_channel>
	ADMUX |= (1<<ADLAR); //left adjust ADC result, so that upper 8 bits are in ADCH
 210:	8c e7       	ldi	r24, 0x7C	; 124
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2c e7       	ldi	r18, 0x7C	; 124
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	20 62       	ori	r18, 0x20	; 32
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18


	ADCSRA |= (1<<ADSC); //start ADC conversion (since we're free running, we only need to set bit once)
 222:	8a e7       	ldi	r24, 0x7A	; 122
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	2a e7       	ldi	r18, 0x7A	; 122
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	20 64       	ori	r18, 0x40	; 64
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
}
 234:	00 00       	nop
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <adc_read_latest>:

//returns the latest measurement (8 bits for now)
//As implemented on grBLDC3v1, only the 7 LSBs are used (0:127)(see explanation above) 
uint8_t adc_read_latest()
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
	uint8_t adc_result = 0;
 246:	19 82       	std	Y+1, r1	; 0x01
	adc_result = ADCH; //high byte ADC result
 248:	89 e7       	ldi	r24, 0x79	; 121
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	89 83       	std	Y+1, r24	; 0x01
	return adc_result; //only 8 MSBs returned (2 LSBs in ADCL not read).  Search ADLAR to enable 10b (and note this requires two register reads, etc)
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
	system_init();
 264:	0e 94 34 04 	call	0x868	; 0x868 <system_init>
}
 268:	00 00       	nop
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <hall_init>:
			break;
		
		default:
			break;
	}
}
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
 278:	00 00       	nop
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <timer0_init>:
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
 288:	84 e6       	ldi	r24, 0x64	; 100
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	24 e6       	ldi	r18, 0x64	; 100
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	f9 01       	movw	r30, r18
 292:	20 81       	ld	r18, Z
 294:	27 7f       	andi	r18, 0xF7	; 247
 296:	fc 01       	movw	r30, r24
 298:	20 83       	st	Z, r18
 29a:	84 e4       	ldi	r24, 0x44	; 68
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	22 e8       	ldi	r18, 0x82	; 130
 2a0:	fc 01       	movw	r30, r24
 2a2:	20 83       	st	Z, r18
 2a4:	85 e4       	ldi	r24, 0x45	; 69
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	22 e0       	ldi	r18, 0x02	; 2
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
 2ae:	87 e4       	ldi	r24, 0x47	; 71
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	2f e7       	ldi	r18, 0x7F	; 127
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
 2b8:	00 00       	nop
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <phase_init>:
 2c0:	cf 93       	push	r28
 2c2:	df 93       	push	r29
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	84 e2       	ldi	r24, 0x24	; 36
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	24 e2       	ldi	r18, 0x24	; 36
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	20 81       	ld	r18, Z
 2d4:	20 61       	ori	r18, 0x10	; 16
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
 2da:	85 e2       	ldi	r24, 0x25	; 37
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	25 e2       	ldi	r18, 0x25	; 37
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	f9 01       	movw	r30, r18
 2e4:	20 81       	ld	r18, Z
 2e6:	20 61       	ori	r18, 0x10	; 16
 2e8:	fc 01       	movw	r30, r24
 2ea:	20 83       	st	Z, r18
 2ec:	84 e2       	ldi	r24, 0x24	; 36
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	24 e2       	ldi	r18, 0x24	; 36
 2f2:	30 e0       	ldi	r19, 0x00	; 0
 2f4:	f9 01       	movw	r30, r18
 2f6:	20 81       	ld	r18, Z
 2f8:	23 6c       	ori	r18, 0xC3	; 195
 2fa:	fc 01       	movw	r30, r24
 2fc:	20 83       	st	Z, r18
 2fe:	87 e2       	ldi	r24, 0x27	; 39
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	27 e2       	ldi	r18, 0x27	; 39
 304:	30 e0       	ldi	r19, 0x00	; 0
 306:	f9 01       	movw	r30, r18
 308:	20 81       	ld	r18, Z
 30a:	21 60       	ori	r18, 0x01	; 1
 30c:	fc 01       	movw	r30, r24
 30e:	20 83       	st	Z, r18
 310:	8a e2       	ldi	r24, 0x2A	; 42
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	2a e2       	ldi	r18, 0x2A	; 42
 316:	30 e0       	ldi	r19, 0x00	; 0
 318:	f9 01       	movw	r30, r18
 31a:	20 81       	ld	r18, Z
 31c:	21 60       	ori	r18, 0x01	; 1
 31e:	fc 01       	movw	r30, r24
 320:	20 83       	st	Z, r18
 322:	85 e2       	ldi	r24, 0x25	; 37
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	25 e2       	ldi	r18, 0x25	; 37
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	f9 01       	movw	r30, r18
 32c:	20 81       	ld	r18, Z
 32e:	2c 73       	andi	r18, 0x3C	; 60
 330:	fc 01       	movw	r30, r24
 332:	20 83       	st	Z, r18
 334:	88 e2       	ldi	r24, 0x28	; 40
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	28 e2       	ldi	r18, 0x28	; 40
 33a:	30 e0       	ldi	r19, 0x00	; 0
 33c:	f9 01       	movw	r30, r18
 33e:	20 81       	ld	r18, Z
 340:	2c 73       	andi	r18, 0x3C	; 60
 342:	fc 01       	movw	r30, r24
 344:	20 83       	st	Z, r18
 346:	8b e2       	ldi	r24, 0x2B	; 43
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	2b e2       	ldi	r18, 0x2B	; 43
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	f9 01       	movw	r30, r18
 350:	20 81       	ld	r18, Z
 352:	2c 73       	andi	r18, 0x3C	; 60
 354:	fc 01       	movw	r30, r24
 356:	20 83       	st	Z, r18
 358:	00 00       	nop
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <get_hall_logic>:
 360:	cf 93       	push	r28
 362:	df 93       	push	r29
 364:	1f 92       	push	r1
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	19 82       	std	Y+1, r1	; 0x01
 36c:	89 e2       	ldi	r24, 0x29	; 41
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	fc 01       	movw	r30, r24
 372:	80 81       	ld	r24, Z
 374:	88 2f       	mov	r24, r24
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	82 70       	andi	r24, 0x02	; 2
 37a:	99 27       	eor	r25, r25
 37c:	89 2b       	or	r24, r25
 37e:	19 f0       	breq	.+6      	; 0x386 <get_hall_logic+0x26>
 380:	89 81       	ldd	r24, Y+1	; 0x01
 382:	84 60       	ori	r24, 0x04	; 4
 384:	89 83       	std	Y+1, r24	; 0x01
 386:	86 e2       	ldi	r24, 0x26	; 38
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	fc 01       	movw	r30, r24
 38c:	80 81       	ld	r24, Z
 38e:	88 2f       	mov	r24, r24
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	82 70       	andi	r24, 0x02	; 2
 394:	99 27       	eor	r25, r25
 396:	89 2b       	or	r24, r25
 398:	19 f0       	breq	.+6      	; 0x3a0 <get_hall_logic+0x40>
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	82 60       	ori	r24, 0x02	; 2
 39e:	89 83       	std	Y+1, r24	; 0x01
 3a0:	89 e2       	ldi	r24, 0x29	; 41
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	fc 01       	movw	r30, r24
 3a6:	80 81       	ld	r24, Z
 3a8:	88 2f       	mov	r24, r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	84 70       	andi	r24, 0x04	; 4
 3ae:	99 27       	eor	r25, r25
 3b0:	89 2b       	or	r24, r25
 3b2:	19 f0       	breq	.+6      	; 0x3ba <get_hall_logic+0x5a>
 3b4:	89 81       	ldd	r24, Y+1	; 0x01
 3b6:	81 60       	ori	r24, 0x01	; 1
 3b8:	89 83       	std	Y+1, r24	; 0x01
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	0f 90       	pop	r0
 3be:	df 91       	pop	r29
 3c0:	cf 91       	pop	r28
 3c2:	08 95       	ret

000003c4 <is_direction_clockwise>:
 3c4:	cf 93       	push	r28
 3c6:	df 93       	push	r29
 3c8:	cd b7       	in	r28, 0x3d	; 61
 3ca:	de b7       	in	r29, 0x3e	; 62
 3cc:	83 e2       	ldi	r24, 0x23	; 35
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	fc 01       	movw	r30, r24
 3d2:	80 81       	ld	r24, Z
 3d4:	88 2f       	mov	r24, r24
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	88 70       	andi	r24, 0x08	; 8
 3da:	99 27       	eor	r25, r25
 3dc:	89 2b       	or	r24, r25
 3de:	11 f0       	breq	.+4      	; 0x3e4 <is_direction_clockwise+0x20>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <is_direction_clockwise+0x22>
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <set_all_phases>:


void set_all_phases(char stateA, char stateB, char stateC)
{
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	00 d0       	rcall	.+0      	; 0x3f2 <set_all_phases+0x6>
 3f2:	1f 92       	push	r1
 3f4:	cd b7       	in	r28, 0x3d	; 61
 3f6:	de b7       	in	r29, 0x3e	; 62
 3f8:	89 83       	std	Y+1, r24	; 0x01
 3fa:	6a 83       	std	Y+2, r22	; 0x02
 3fc:	4b 83       	std	Y+3, r20	; 0x03
	//set_phase('A',stateA);
	//set_phase('B',stateB);
	//set_phase('C',stateC);
}
 3fe:	00 00       	nop
 400:	0f 90       	pop	r0
 402:	0f 90       	pop	r0
 404:	0f 90       	pop	r0
 406:	df 91       	pop	r29
 408:	cf 91       	pop	r28
 40a:	08 95       	ret

0000040c <main>:

uint8_t ai_result_delayed = 0;
uint8_t helper_p_control = 0; //controls how quickly rpm changes occur

int main(void)
{
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	00 d0       	rcall	.+0      	; 0x412 <main+0x6>
 412:	cd b7       	in	r28, 0x3d	; 61
 414:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 416:	0e 94 2e 01 	call	0x25c	; 0x25c <atmel_start_init>
	hall_init();
 41a:	0e 94 38 01 	call	0x270	; 0x270 <hall_init>
	phase_init();
 41e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <phase_init>
	adc_init();
 422:	0e 94 ae 00 	call	0x15c	; 0x15c <adc_init>
	timer0_init();
 426:	0e 94 40 01 	call	0x280	; 0x280 <timer0_init>

	
	//adc_select_channel(ADC_CHANNEL_goalRPM); // will need to specify if more than one ADC channel monitored

	while (1) {
		uint8_t ai_result = adc_read_latest();
 42a:	0e 94 1e 01 	call	0x23c	; 0x23c <adc_read_latest>
 42e:	89 83       	std	Y+1, r24	; 0x01
		uint8_t counter_latest = TCNT0 + 1; //count from 1 to 128
 430:	86 e4       	ldi	r24, 0x46	; 70
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	fc 01       	movw	r30, r24
 436:	80 81       	ld	r24, Z
 438:	8f 5f       	subi	r24, 0xFF	; 255
 43a:	8a 83       	std	Y+2, r24	; 0x02
		
		if( ai_result != ai_result_delayed ) { //user changed rpm
 43c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 440:	99 81       	ldd	r25, Y+1	; 0x01
 442:	98 17       	cp	r25, r24
 444:	39 f1       	breq	.+78     	; 0x494 <main+0x88>
			helper_p_control++; //increment helper               
 446:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 44a:	8f 5f       	subi	r24, 0xFF	; 255
 44c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <helper_p_control>
			if( helper_p_control >= 100 ) { //only update rpm every n loop cycles
 450:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 454:	84 36       	cpi	r24, 0x64	; 100
 456:	f0 f0       	brcs	.+60     	; 0x494 <main+0x88>
				helper_p_control = 0; //reset helper
 458:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <helper_p_control>
				if ( (ai_result > ai_result_delayed) && (ai_result_delayed < 128) ) { ai_result_delayed++; } //new rpm greater than old
 45c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 460:	99 81       	ldd	r25, Y+1	; 0x01
 462:	89 17       	cp	r24, r25
 464:	48 f4       	brcc	.+18     	; 0x478 <main+0x6c>
 466:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	88 23       	and	r24, r24
 46c:	2c f0       	brlt	.+10     	; 0x478 <main+0x6c>
 46e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				if ( (ai_result < ai_result_delayed) && (ai_result_delayed > 0  ) ) { ai_result_delayed--; } //new rpm less    than old
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 47c:	99 81       	ldd	r25, Y+1	; 0x01
 47e:	98 17       	cp	r25, r24
 480:	48 f4       	brcc	.+18     	; 0x494 <main+0x88>
 482:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 486:	88 23       	and	r24, r24
 488:	29 f0       	breq	.+10     	; 0x494 <main+0x88>
 48a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48e:	81 50       	subi	r24, 0x01	; 1
 490:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		} 
		
		
		//ai_result_delayed = scale_adc_pwm(ai_result_delayed); //LUT hack to spoof GG2 spindle RPM behavior 
		
		if( counter_latest > ai_result_delayed ) { //if free-running counter value is greater than arduino PWM output, turn off all FETs
 494:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 498:	9a 81       	ldd	r25, Y+2	; 0x02
 49a:	89 17       	cp	r24, r25
 49c:	30 f4       	brcc	.+12     	; 0x4aa <main+0x9e>
			set_all_phases('Z','Z','Z'); //replicate GG2 behavior
 49e:	4a e5       	ldi	r20, 0x5A	; 90
 4a0:	6a e5       	ldi	r22, 0x5A	; 90
 4a2:	8a e5       	ldi	r24, 0x5A	; 90
 4a4:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 4a8:	c0 cf       	rjmp	.-128    	; 0x42a <main+0x1e>
		} else { //always true when 'S8000' sent, true half the time when 'S4000', never true when 'S0'
			if( is_direction_clockwise() == 0 ) //spin CCW
 4aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <is_direction_clockwise>
 4ae:	88 23       	and	r24, r24
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <main+0xa8>
 4b2:	43 c0       	rjmp	.+134    	; 0x53a <main+0x12e>
			{
				//PIND |= (1<<3); //debug... toggle PD3 (X1LIM)
				switch ( get_hall_logic() ) {
 4b4:	0e 94 b0 01 	call	0x360	; 0x360 <get_hall_logic>
 4b8:	88 2f       	mov	r24, r24
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	83 30       	cpi	r24, 0x03	; 3
 4be:	91 05       	cpc	r25, r1
 4c0:	19 f1       	breq	.+70     	; 0x508 <main+0xfc>
 4c2:	84 30       	cpi	r24, 0x04	; 4
 4c4:	91 05       	cpc	r25, r1
 4c6:	34 f4       	brge	.+12     	; 0x4d4 <main+0xc8>
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	91 05       	cpc	r25, r1
 4cc:	49 f1       	breq	.+82     	; 0x520 <main+0x114>
 4ce:	02 97       	sbiw	r24, 0x02	; 2
 4d0:	09 f1       	breq	.+66     	; 0x514 <main+0x108>
 4d2:	2c c0       	rjmp	.+88     	; 0x52c <main+0x120>
 4d4:	85 30       	cpi	r24, 0x05	; 5
 4d6:	91 05       	cpc	r25, r1
 4d8:	59 f0       	breq	.+22     	; 0x4f0 <main+0xe4>
 4da:	85 30       	cpi	r24, 0x05	; 5
 4dc:	91 05       	cpc	r25, r1
 4de:	74 f0       	brlt	.+28     	; 0x4fc <main+0xf0>
 4e0:	06 97       	sbiw	r24, 0x06	; 6
 4e2:	21 f5       	brne	.+72     	; 0x52c <main+0x120>
					case 6: set_all_phases('H','L','Z'); break;
 4e4:	4a e5       	ldi	r20, 0x5A	; 90
 4e6:	6c e4       	ldi	r22, 0x4C	; 76
 4e8:	88 e4       	ldi	r24, 0x48	; 72
 4ea:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 4ee:	68 c0       	rjmp	.+208    	; 0x5c0 <main+0x1b4>
					case 5: set_all_phases('L','Z','H'); break;
 4f0:	48 e4       	ldi	r20, 0x48	; 72
 4f2:	6a e5       	ldi	r22, 0x5A	; 90
 4f4:	8c e4       	ldi	r24, 0x4C	; 76
 4f6:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 4fa:	62 c0       	rjmp	.+196    	; 0x5c0 <main+0x1b4>
					case 4: set_all_phases('Z','L','H'); break;
 4fc:	48 e4       	ldi	r20, 0x48	; 72
 4fe:	6c e4       	ldi	r22, 0x4C	; 76
 500:	8a e5       	ldi	r24, 0x5A	; 90
 502:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 506:	5c c0       	rjmp	.+184    	; 0x5c0 <main+0x1b4>
					case 3: set_all_phases('Z','H','L'); break;
 508:	4c e4       	ldi	r20, 0x4C	; 76
 50a:	68 e4       	ldi	r22, 0x48	; 72
 50c:	8a e5       	ldi	r24, 0x5A	; 90
 50e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 512:	56 c0       	rjmp	.+172    	; 0x5c0 <main+0x1b4>
					case 2: set_all_phases('H','Z','L'); break;
 514:	4c e4       	ldi	r20, 0x4C	; 76
 516:	6a e5       	ldi	r22, 0x5A	; 90
 518:	88 e4       	ldi	r24, 0x48	; 72
 51a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 51e:	50 c0       	rjmp	.+160    	; 0x5c0 <main+0x1b4>
					case 1: set_all_phases('L','H','Z'); break;
 520:	4a e5       	ldi	r20, 0x5A	; 90
 522:	68 e4       	ldi	r22, 0x48	; 72
 524:	8c e4       	ldi	r24, 0x4C	; 76
 526:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 52a:	4a c0       	rjmp	.+148    	; 0x5c0 <main+0x1b4>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 52c:	4a e5       	ldi	r20, 0x5A	; 90
 52e:	6a e5       	ldi	r22, 0x5A	; 90
 530:	8a e5       	ldi	r24, 0x5A	; 90
 532:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
						break;
 536:	00 00       	nop
 538:	43 c0       	rjmp	.+134    	; 0x5c0 <main+0x1b4>
				}		
			} else { //spin CW
				switch ( get_hall_logic() ) {
 53a:	0e 94 b0 01 	call	0x360	; 0x360 <get_hall_logic>
 53e:	88 2f       	mov	r24, r24
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	83 30       	cpi	r24, 0x03	; 3
 544:	91 05       	cpc	r25, r1
 546:	f1 f0       	breq	.+60     	; 0x584 <main+0x178>
 548:	84 30       	cpi	r24, 0x04	; 4
 54a:	91 05       	cpc	r25, r1
 54c:	34 f4       	brge	.+12     	; 0x55a <main+0x14e>
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	91 05       	cpc	r25, r1
 552:	61 f0       	breq	.+24     	; 0x56c <main+0x160>
 554:	02 97       	sbiw	r24, 0x02	; 2
 556:	81 f0       	breq	.+32     	; 0x578 <main+0x16c>
 558:	2d c0       	rjmp	.+90     	; 0x5b4 <main+0x1a8>
 55a:	85 30       	cpi	r24, 0x05	; 5
 55c:	91 05       	cpc	r25, r1
 55e:	f1 f0       	breq	.+60     	; 0x59c <main+0x190>
 560:	85 30       	cpi	r24, 0x05	; 5
 562:	91 05       	cpc	r25, r1
 564:	ac f0       	brlt	.+42     	; 0x590 <main+0x184>
 566:	06 97       	sbiw	r24, 0x06	; 6
 568:	f9 f0       	breq	.+62     	; 0x5a8 <main+0x19c>
 56a:	24 c0       	rjmp	.+72     	; 0x5b4 <main+0x1a8>
					case 1: set_all_phases('H','L','Z'); break;
 56c:	4a e5       	ldi	r20, 0x5A	; 90
 56e:	6c e4       	ldi	r22, 0x4C	; 76
 570:	88 e4       	ldi	r24, 0x48	; 72
 572:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 576:	24 c0       	rjmp	.+72     	; 0x5c0 <main+0x1b4>
					case 2: set_all_phases('L','Z','H'); break;
 578:	48 e4       	ldi	r20, 0x48	; 72
 57a:	6a e5       	ldi	r22, 0x5A	; 90
 57c:	8c e4       	ldi	r24, 0x4C	; 76
 57e:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 582:	1e c0       	rjmp	.+60     	; 0x5c0 <main+0x1b4>
					case 3: set_all_phases('Z','L','H'); break;
 584:	48 e4       	ldi	r20, 0x48	; 72
 586:	6c e4       	ldi	r22, 0x4C	; 76
 588:	8a e5       	ldi	r24, 0x5A	; 90
 58a:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 58e:	18 c0       	rjmp	.+48     	; 0x5c0 <main+0x1b4>
					case 4: set_all_phases('Z','H','L'); break;
 590:	4c e4       	ldi	r20, 0x4C	; 76
 592:	68 e4       	ldi	r22, 0x48	; 72
 594:	8a e5       	ldi	r24, 0x5A	; 90
 596:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 59a:	12 c0       	rjmp	.+36     	; 0x5c0 <main+0x1b4>
					case 5: set_all_phases('H','Z','L'); break;
 59c:	4c e4       	ldi	r20, 0x4C	; 76
 59e:	6a e5       	ldi	r22, 0x5A	; 90
 5a0:	88 e4       	ldi	r24, 0x48	; 72
 5a2:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 5a6:	0c c0       	rjmp	.+24     	; 0x5c0 <main+0x1b4>
					case 6: set_all_phases('L','H','Z'); break;
 5a8:	4a e5       	ldi	r20, 0x5A	; 90
 5aa:	68 e4       	ldi	r22, 0x48	; 72
 5ac:	8c e4       	ldi	r24, 0x4C	; 76
 5ae:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <main+0x1b4>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 5b4:	4a e5       	ldi	r20, 0x5A	; 90
 5b6:	6a e5       	ldi	r22, 0x5A	; 90
 5b8:	8a e5       	ldi	r24, 0x5A	; 90
 5ba:	0e 94 f6 01 	call	0x3ec	; 0x3ec <set_all_phases>
						break;
 5be:	00 00       	nop
				}
			}
		}
	}
 5c0:	34 cf       	rjmp	.-408    	; 0x42a <main+0x1e>

000005c2 <PORTB_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	00 d0       	rcall	.+0      	; 0x5c8 <PORTB_set_port_dir+0x6>
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
 5cc:	89 83       	std	Y+1, r24	; 0x01
 5ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 5d0:	8a 81       	ldd	r24, Y+2	; 0x02
 5d2:	88 2f       	mov	r24, r24
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	81 30       	cpi	r24, 0x01	; 1
 5d8:	91 05       	cpc	r25, r1
 5da:	99 f0       	breq	.+38     	; 0x602 <PORTB_set_port_dir+0x40>
 5dc:	82 30       	cpi	r24, 0x02	; 2
 5de:	91 05       	cpc	r25, r1
 5e0:	d9 f0       	breq	.+54     	; 0x618 <PORTB_set_port_dir+0x56>
 5e2:	89 2b       	or	r24, r25
 5e4:	09 f0       	breq	.+2      	; 0x5e8 <PORTB_set_port_dir+0x26>
		DDRB &= ~mask;

		PORTB |= mask;
		break;
	default:
		break;
 5e6:	2f c0       	rjmp	.+94     	; 0x646 <PORTB_set_port_dir+0x84>
 */
static inline void PORTB_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~mask;
 5e8:	84 e2       	ldi	r24, 0x24	; 36
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	24 e2       	ldi	r18, 0x24	; 36
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	f9 01       	movw	r30, r18
 5f2:	20 81       	ld	r18, Z
 5f4:	32 2f       	mov	r19, r18
 5f6:	29 81       	ldd	r18, Y+1	; 0x01
 5f8:	20 95       	com	r18
 5fa:	23 23       	and	r18, r19
 5fc:	fc 01       	movw	r30, r24
 5fe:	20 83       	st	Z, r18
		break;
 600:	22 c0       	rjmp	.+68     	; 0x646 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRB |= mask;
 602:	84 e2       	ldi	r24, 0x24	; 36
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	24 e2       	ldi	r18, 0x24	; 36
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	30 81       	ld	r19, Z
 60e:	29 81       	ldd	r18, Y+1	; 0x01
 610:	23 2b       	or	r18, r19
 612:	fc 01       	movw	r30, r24
 614:	20 83       	st	Z, r18
		break;
 616:	17 c0       	rjmp	.+46     	; 0x646 <PORTB_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRB &= ~mask;
 618:	84 e2       	ldi	r24, 0x24	; 36
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	24 e2       	ldi	r18, 0x24	; 36
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	f9 01       	movw	r30, r18
 622:	20 81       	ld	r18, Z
 624:	32 2f       	mov	r19, r18
 626:	29 81       	ldd	r18, Y+1	; 0x01
 628:	20 95       	com	r18
 62a:	23 23       	and	r18, r19
 62c:	fc 01       	movw	r30, r24
 62e:	20 83       	st	Z, r18

		PORTB |= mask;
 630:	85 e2       	ldi	r24, 0x25	; 37
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	25 e2       	ldi	r18, 0x25	; 37
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	f9 01       	movw	r30, r18
 63a:	30 81       	ld	r19, Z
 63c:	29 81       	ldd	r18, Y+1	; 0x01
 63e:	23 2b       	or	r18, r19
 640:	fc 01       	movw	r30, r24
 642:	20 83       	st	Z, r18
		break;
 644:	00 00       	nop
	default:
		break;
	}
}
 646:	00 00       	nop
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	df 91       	pop	r29
 64e:	cf 91       	pop	r28
 650:	08 95       	ret

00000652 <PORTC_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 652:	cf 93       	push	r28
 654:	df 93       	push	r29
 656:	00 d0       	rcall	.+0      	; 0x658 <PORTC_set_port_dir+0x6>
 658:	cd b7       	in	r28, 0x3d	; 61
 65a:	de b7       	in	r29, 0x3e	; 62
 65c:	89 83       	std	Y+1, r24	; 0x01
 65e:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 660:	8a 81       	ldd	r24, Y+2	; 0x02
 662:	88 2f       	mov	r24, r24
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	91 05       	cpc	r25, r1
 66a:	99 f0       	breq	.+38     	; 0x692 <PORTC_set_port_dir+0x40>
 66c:	82 30       	cpi	r24, 0x02	; 2
 66e:	91 05       	cpc	r25, r1
 670:	d9 f0       	breq	.+54     	; 0x6a8 <PORTC_set_port_dir+0x56>
 672:	89 2b       	or	r24, r25
 674:	09 f0       	breq	.+2      	; 0x678 <PORTC_set_port_dir+0x26>
		DDRC &= ~mask;

		PORTC |= mask;
		break;
	default:
		break;
 676:	2f c0       	rjmp	.+94     	; 0x6d6 <PORTC_set_port_dir+0x84>
 */
static inline void PORTC_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~mask;
 678:	87 e2       	ldi	r24, 0x27	; 39
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	27 e2       	ldi	r18, 0x27	; 39
 67e:	30 e0       	ldi	r19, 0x00	; 0
 680:	f9 01       	movw	r30, r18
 682:	20 81       	ld	r18, Z
 684:	32 2f       	mov	r19, r18
 686:	29 81       	ldd	r18, Y+1	; 0x01
 688:	20 95       	com	r18
 68a:	23 23       	and	r18, r19
 68c:	fc 01       	movw	r30, r24
 68e:	20 83       	st	Z, r18
		break;
 690:	22 c0       	rjmp	.+68     	; 0x6d6 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRC |= mask;
 692:	87 e2       	ldi	r24, 0x27	; 39
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	27 e2       	ldi	r18, 0x27	; 39
 698:	30 e0       	ldi	r19, 0x00	; 0
 69a:	f9 01       	movw	r30, r18
 69c:	30 81       	ld	r19, Z
 69e:	29 81       	ldd	r18, Y+1	; 0x01
 6a0:	23 2b       	or	r18, r19
 6a2:	fc 01       	movw	r30, r24
 6a4:	20 83       	st	Z, r18
		break;
 6a6:	17 c0       	rjmp	.+46     	; 0x6d6 <PORTC_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRC &= ~mask;
 6a8:	87 e2       	ldi	r24, 0x27	; 39
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	27 e2       	ldi	r18, 0x27	; 39
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	f9 01       	movw	r30, r18
 6b2:	20 81       	ld	r18, Z
 6b4:	32 2f       	mov	r19, r18
 6b6:	29 81       	ldd	r18, Y+1	; 0x01
 6b8:	20 95       	com	r18
 6ba:	23 23       	and	r18, r19
 6bc:	fc 01       	movw	r30, r24
 6be:	20 83       	st	Z, r18

		PORTC |= mask;
 6c0:	88 e2       	ldi	r24, 0x28	; 40
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	28 e2       	ldi	r18, 0x28	; 40
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	f9 01       	movw	r30, r18
 6ca:	30 81       	ld	r19, Z
 6cc:	29 81       	ldd	r18, Y+1	; 0x01
 6ce:	23 2b       	or	r18, r19
 6d0:	fc 01       	movw	r30, r24
 6d2:	20 83       	st	Z, r18
		break;
 6d4:	00 00       	nop
	default:
		break;
	}
}
 6d6:	00 00       	nop
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <PORTD_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 6e2:	cf 93       	push	r28
 6e4:	df 93       	push	r29
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <PORTD_set_port_dir+0x6>
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
 6ec:	89 83       	std	Y+1, r24	; 0x01
 6ee:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 6f0:	8a 81       	ldd	r24, Y+2	; 0x02
 6f2:	88 2f       	mov	r24, r24
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	81 30       	cpi	r24, 0x01	; 1
 6f8:	91 05       	cpc	r25, r1
 6fa:	99 f0       	breq	.+38     	; 0x722 <PORTD_set_port_dir+0x40>
 6fc:	82 30       	cpi	r24, 0x02	; 2
 6fe:	91 05       	cpc	r25, r1
 700:	d9 f0       	breq	.+54     	; 0x738 <PORTD_set_port_dir+0x56>
 702:	89 2b       	or	r24, r25
 704:	09 f0       	breq	.+2      	; 0x708 <PORTD_set_port_dir+0x26>
		DDRD &= ~mask;

		PORTD |= mask;
		break;
	default:
		break;
 706:	2f c0       	rjmp	.+94     	; 0x766 <PORTD_set_port_dir+0x84>
 */
static inline void PORTD_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~mask;
 708:	8a e2       	ldi	r24, 0x2A	; 42
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	2a e2       	ldi	r18, 0x2A	; 42
 70e:	30 e0       	ldi	r19, 0x00	; 0
 710:	f9 01       	movw	r30, r18
 712:	20 81       	ld	r18, Z
 714:	32 2f       	mov	r19, r18
 716:	29 81       	ldd	r18, Y+1	; 0x01
 718:	20 95       	com	r18
 71a:	23 23       	and	r18, r19
 71c:	fc 01       	movw	r30, r24
 71e:	20 83       	st	Z, r18
		break;
 720:	22 c0       	rjmp	.+68     	; 0x766 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRD |= mask;
 722:	8a e2       	ldi	r24, 0x2A	; 42
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	2a e2       	ldi	r18, 0x2A	; 42
 728:	30 e0       	ldi	r19, 0x00	; 0
 72a:	f9 01       	movw	r30, r18
 72c:	30 81       	ld	r19, Z
 72e:	29 81       	ldd	r18, Y+1	; 0x01
 730:	23 2b       	or	r18, r19
 732:	fc 01       	movw	r30, r24
 734:	20 83       	st	Z, r18
		break;
 736:	17 c0       	rjmp	.+46     	; 0x766 <PORTD_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRD &= ~mask;
 738:	8a e2       	ldi	r24, 0x2A	; 42
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	2a e2       	ldi	r18, 0x2A	; 42
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	f9 01       	movw	r30, r18
 742:	20 81       	ld	r18, Z
 744:	32 2f       	mov	r19, r18
 746:	29 81       	ldd	r18, Y+1	; 0x01
 748:	20 95       	com	r18
 74a:	23 23       	and	r18, r19
 74c:	fc 01       	movw	r30, r24
 74e:	20 83       	st	Z, r18

		PORTD |= mask;
 750:	8b e2       	ldi	r24, 0x2B	; 43
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	2b e2       	ldi	r18, 0x2B	; 43
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	f9 01       	movw	r30, r18
 75a:	30 81       	ld	r19, Z
 75c:	29 81       	ldd	r18, Y+1	; 0x01
 75e:	23 2b       	or	r18, r19
 760:	fc 01       	movw	r30, r24
 762:	20 83       	st	Z, r18
		break;
 764:	00 00       	nop
	default:
		break;
	}
}
 766:	00 00       	nop
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	df 91       	pop	r29
 76e:	cf 91       	pop	r28
 770:	08 95       	ret

00000772 <PORTE_set_port_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
 772:	cf 93       	push	r28
 774:	df 93       	push	r29
 776:	00 d0       	rcall	.+0      	; 0x778 <PORTE_set_port_dir+0x6>
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
 77c:	89 83       	std	Y+1, r24	; 0x01
 77e:	6a 83       	std	Y+2, r22	; 0x02
	switch (direction) {
 780:	8a 81       	ldd	r24, Y+2	; 0x02
 782:	88 2f       	mov	r24, r24
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	81 30       	cpi	r24, 0x01	; 1
 788:	91 05       	cpc	r25, r1
 78a:	99 f0       	breq	.+38     	; 0x7b2 <PORTE_set_port_dir+0x40>
 78c:	82 30       	cpi	r24, 0x02	; 2
 78e:	91 05       	cpc	r25, r1
 790:	d9 f0       	breq	.+54     	; 0x7c8 <PORTE_set_port_dir+0x56>
 792:	89 2b       	or	r24, r25
 794:	09 f0       	breq	.+2      	; 0x798 <PORTE_set_port_dir+0x26>
		DDRE &= ~mask;

		PORTE |= mask;
		break;
	default:
		break;
 796:	2f c0       	rjmp	.+94     	; 0x7f6 <PORTE_set_port_dir+0x84>
 */
static inline void PORTE_set_port_dir(const uint8_t mask, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRE &= ~mask;
 798:	8d e2       	ldi	r24, 0x2D	; 45
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	2d e2       	ldi	r18, 0x2D	; 45
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	f9 01       	movw	r30, r18
 7a2:	20 81       	ld	r18, Z
 7a4:	32 2f       	mov	r19, r18
 7a6:	29 81       	ldd	r18, Y+1	; 0x01
 7a8:	20 95       	com	r18
 7aa:	23 23       	and	r18, r19
 7ac:	fc 01       	movw	r30, r24
 7ae:	20 83       	st	Z, r18
		break;
 7b0:	22 c0       	rjmp	.+68     	; 0x7f6 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OUT:
		DDRE |= mask;
 7b2:	8d e2       	ldi	r24, 0x2D	; 45
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	2d e2       	ldi	r18, 0x2D	; 45
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	f9 01       	movw	r30, r18
 7bc:	30 81       	ld	r19, Z
 7be:	29 81       	ldd	r18, Y+1	; 0x01
 7c0:	23 2b       	or	r18, r19
 7c2:	fc 01       	movw	r30, r24
 7c4:	20 83       	st	Z, r18
		break;
 7c6:	17 c0       	rjmp	.+46     	; 0x7f6 <PORTE_set_port_dir+0x84>
	case PORT_DIR_OFF:
		DDRE &= ~mask;
 7c8:	8d e2       	ldi	r24, 0x2D	; 45
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	2d e2       	ldi	r18, 0x2D	; 45
 7ce:	30 e0       	ldi	r19, 0x00	; 0
 7d0:	f9 01       	movw	r30, r18
 7d2:	20 81       	ld	r18, Z
 7d4:	32 2f       	mov	r19, r18
 7d6:	29 81       	ldd	r18, Y+1	; 0x01
 7d8:	20 95       	com	r18
 7da:	23 23       	and	r18, r19
 7dc:	fc 01       	movw	r30, r24
 7de:	20 83       	st	Z, r18

		PORTE |= mask;
 7e0:	8e e2       	ldi	r24, 0x2E	; 46
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	2e e2       	ldi	r18, 0x2E	; 46
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	f9 01       	movw	r30, r18
 7ea:	30 81       	ld	r19, Z
 7ec:	29 81       	ldd	r18, Y+1	; 0x01
 7ee:	23 2b       	or	r18, r19
 7f0:	fc 01       	movw	r30, r24
 7f2:	20 83       	st	Z, r18
		break;
 7f4:	00 00       	nop
	default:
		break;
	}
}
 7f6:	00 00       	nop
 7f8:	0f 90       	pop	r0
 7fa:	0f 90       	pop	r0
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	08 95       	ret

00000802 <sysctrl_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
 802:	cf 93       	push	r28
 804:	df 93       	push	r29
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (0 << CLKPS1) | (0 << CLKPS0));
 80a:	40 e0       	ldi	r20, 0x00	; 0
 80c:	60 e8       	ldi	r22, 0x80	; 128
 80e:	81 e6       	ldi	r24, 0x61	; 97
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	0e 94 40 04 	call	0x880	; 0x880 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
 816:	83 e5       	ldi	r24, 0x53	; 83
 818:	90 e0       	ldi	r25, 0x00	; 0
 81a:	fc 01       	movw	r30, r24
 81c:	10 82       	st	Z, r1
	       (0 << SE);

	MCUCR = (0 << PUD);
 81e:	85 e5       	ldi	r24, 0x55	; 85
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	fc 01       	movw	r30, r24
 824:	10 82       	st	Z, r1

	return 0;
 826:	80 e0       	ldi	r24, 0x00	; 0
}
 828:	df 91       	pop	r29
 82a:	cf 91       	pop	r28
 82c:	08 95       	ret

0000082e <mcu_init>:
#define MCU_RESET_CAUSE_EXT (1 << EXTRF)
#define MCU_RESET_CAUSE_BOR (1 << BORF)
#define MCU_RESET_CAUSE_WDT (1 << WDRF)

static inline void mcu_init(void)
{
 82e:	cf 93       	push	r28
 830:	df 93       	push	r29
 832:	cd b7       	in	r28, 0x3d	; 61
 834:	de b7       	in	r29, 0x3e	; 62
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM0) | (1 << PRCAN) | (1 << PRTIM1) | (1 << PRLIN) | (1 << PRPSC) | (1 << PRADC);
 836:	84 e6       	ldi	r24, 0x64	; 100
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	2f e7       	ldi	r18, 0x7F	; 127
 83c:	fc 01       	movw	r30, r24
 83e:	20 83       	st	Z, r18

	/* Set all pins to low power mode */
	PORTB_set_port_dir(0xff, PORT_DIR_OFF);
 840:	62 e0       	ldi	r22, 0x02	; 2
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <PORTB_set_port_dir>
	PORTC_set_port_dir(0xff, PORT_DIR_OFF);
 848:	62 e0       	ldi	r22, 0x02	; 2
 84a:	8f ef       	ldi	r24, 0xFF	; 255
 84c:	0e 94 29 03 	call	0x652	; 0x652 <PORTC_set_port_dir>
	PORTD_set_port_dir(0xff, PORT_DIR_OFF);
 850:	62 e0       	ldi	r22, 0x02	; 2
 852:	8f ef       	ldi	r24, 0xFF	; 255
 854:	0e 94 71 03 	call	0x6e2	; 0x6e2 <PORTD_set_port_dir>
	PORTE_set_port_dir(0x07, PORT_DIR_OFF);
 858:	62 e0       	ldi	r22, 0x02	; 2
 85a:	87 e0       	ldi	r24, 0x07	; 7
 85c:	0e 94 b9 03 	call	0x772	; 0x772 <PORTE_set_port_dir>
}
 860:	00 00       	nop
 862:	df 91       	pop	r29
 864:	cf 91       	pop	r28
 866:	08 95       	ret

00000868 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
 868:	cf 93       	push	r28
 86a:	df 93       	push	r29
 86c:	cd b7       	in	r28, 0x3d	; 61
 86e:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
 870:	0e 94 17 04 	call	0x82e	; 0x82e <mcu_init>

	sysctrl_init();
 874:	0e 94 01 04 	call	0x802	; 0x802 <sysctrl_init>
}
 878:	00 00       	nop
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 880:	2f b7       	in	r18, 0x3f	; 63
	cli
 882:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 884:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 886:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 888:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 88a:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 88c:	08 95       	ret

0000088e <_exit>:
 88e:	f8 94       	cli

00000890 <__stop_program>:
 890:	ff cf       	rjmp	.-2      	; 0x890 <__stop_program>
