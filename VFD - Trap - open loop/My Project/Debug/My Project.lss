
My Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000b81  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000b7e  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  00000b7e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  00000b81  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000bb4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000130  00000000  00000000  00000bf8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001074  00000000  00000000  00000d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000d01  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ac3  00000000  00000000  00002a9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000310  00000000  00000000  00003560  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000007a8  00000000  00000000  00003870  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000005a1  00000000  00000000  00004018  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d0  00000000  00000000  000045b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  74:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	a2 30       	cpi	r26, 0x02	; 2
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 2e 03 	call	0x65c	; 0x65c <main>
  9c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <adc_select_vref>:
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	1f 92       	push	r1
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	89 83       	std	Y+1, r24	; 0x01
  b0:	8a e7       	ldi	r24, 0x7A	; 122
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	2a e7       	ldi	r18, 0x7A	; 122
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	f9 01       	movw	r30, r18
  ba:	20 81       	ld	r18, Z
  bc:	2f 7b       	andi	r18, 0xBF	; 191
  be:	fc 01       	movw	r30, r24
  c0:	20 83       	st	Z, r18
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 23       	and	r24, r24
  c6:	51 f4       	brne	.+20     	; 0xdc <adc_select_vref+0x38>
  c8:	8c e7       	ldi	r24, 0x7C	; 124
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	2c e7       	ldi	r18, 0x7C	; 124
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	f9 01       	movw	r30, r18
  d2:	20 81       	ld	r18, Z
  d4:	2f 73       	andi	r18, 0x3F	; 63
  d6:	20 64       	ori	r18, 0x40	; 64
  d8:	fc 01       	movw	r30, r24
  da:	20 83       	st	Z, r18
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	49 f4       	brne	.+18     	; 0xf4 <adc_select_vref+0x50>
  e2:	8c e7       	ldi	r24, 0x7C	; 124
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	2c e7       	ldi	r18, 0x7C	; 124
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	f9 01       	movw	r30, r18
  ec:	20 81       	ld	r18, Z
  ee:	20 6c       	ori	r18, 0xC0	; 192
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	00 00       	nop
  f6:	0f 90       	pop	r0
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <adc_select_channel>:
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	1f 92       	push	r1
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	8a e7       	ldi	r24, 0x7A	; 122
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	2a e7       	ldi	r18, 0x7A	; 122
 110:	30 e0       	ldi	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	20 81       	ld	r18, Z
 116:	2f 7b       	andi	r18, 0xBF	; 191
 118:	fc 01       	movw	r30, r24
 11a:	20 83       	st	Z, r18
 11c:	89 81       	ldd	r24, Y+1	; 0x01
 11e:	88 23       	and	r24, r24
 120:	59 f4       	brne	.+22     	; 0x138 <adc_select_channel+0x3a>
 122:	8c e7       	ldi	r24, 0x7C	; 124
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	2c e7       	ldi	r18, 0x7C	; 124
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	20 81       	ld	r18, Z
 12e:	20 7e       	andi	r18, 0xE0	; 224
 130:	25 60       	ori	r18, 0x05	; 5
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	0d c0       	rjmp	.+26     	; 0x152 <adc_select_channel+0x54>
 138:	89 81       	ldd	r24, Y+1	; 0x01
 13a:	85 30       	cpi	r24, 0x05	; 5
 13c:	51 f4       	brne	.+20     	; 0x152 <adc_select_channel+0x54>
 13e:	8c e7       	ldi	r24, 0x7C	; 124
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	2c e7       	ldi	r18, 0x7C	; 124
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	20 7e       	andi	r18, 0xE0	; 224
 14c:	2c 60       	ori	r18, 0x0C	; 12
 14e:	fc 01       	movw	r30, r24
 150:	20 83       	st	Z, r18
 152:	00 00       	nop
 154:	0f 90       	pop	r0
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <adc_init>:
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	cd b7       	in	r28, 0x3d	; 61
 162:	de b7       	in	r29, 0x3e	; 62
 164:	8e e7       	ldi	r24, 0x7E	; 126
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	20 e2       	ldi	r18, 0x20	; 32
 16a:	fc 01       	movw	r30, r24
 16c:	20 83       	st	Z, r18
 16e:	84 e6       	ldi	r24, 0x64	; 100
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	24 e6       	ldi	r18, 0x64	; 100
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	20 81       	ld	r18, Z
 17a:	2e 7f       	andi	r18, 0xFE	; 254
 17c:	fc 01       	movw	r30, r24
 17e:	20 83       	st	Z, r18
 180:	85 e2       	ldi	r24, 0x25	; 37
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	25 e2       	ldi	r18, 0x25	; 37
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	20 81       	ld	r18, Z
 18c:	2b 7f       	andi	r18, 0xFB	; 251
 18e:	fc 01       	movw	r30, r24
 190:	20 83       	st	Z, r18
 192:	8a e7       	ldi	r24, 0x7A	; 122
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	fc 01       	movw	r30, r24
 198:	10 82       	st	Z, r1
 19a:	8a e7       	ldi	r24, 0x7A	; 122
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2a e7       	ldi	r18, 0x7A	; 122
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	20 68       	ori	r18, 0x80	; 128
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
 1ac:	8a e7       	ldi	r24, 0x7A	; 122
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2a e7       	ldi	r18, 0x7A	; 122
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	26 60       	ori	r18, 0x06	; 6
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
 1be:	8a e7       	ldi	r24, 0x7A	; 122
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	2a e7       	ldi	r18, 0x7A	; 122
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	f9 01       	movw	r30, r18
 1c8:	20 81       	ld	r18, Z
 1ca:	20 62       	ori	r18, 0x20	; 32
 1cc:	fc 01       	movw	r30, r24
 1ce:	20 83       	st	Z, r18
 1d0:	8b e7       	ldi	r24, 0x7B	; 123
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	fc 01       	movw	r30, r24
 1d6:	10 82       	st	Z, r1
 1d8:	8b e7       	ldi	r24, 0x7B	; 123
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	2b e7       	ldi	r18, 0x7B	; 123
 1de:	30 e0       	ldi	r19, 0x00	; 0
 1e0:	f9 01       	movw	r30, r18
 1e2:	20 81       	ld	r18, Z
 1e4:	20 68       	ori	r18, 0x80	; 128
 1e6:	fc 01       	movw	r30, r24
 1e8:	20 83       	st	Z, r18
 1ea:	8b e7       	ldi	r24, 0x7B	; 123
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	2b e7       	ldi	r18, 0x7B	; 123
 1f0:	30 e0       	ldi	r19, 0x00	; 0
 1f2:	f9 01       	movw	r30, r18
 1f4:	20 81       	ld	r18, Z
 1f6:	20 62       	ori	r18, 0x20	; 32
 1f8:	fc 01       	movw	r30, r24
 1fa:	20 83       	st	Z, r18
 1fc:	8c e7       	ldi	r24, 0x7C	; 124
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	fc 01       	movw	r30, r24
 202:	10 82       	st	Z, r1
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	0e 94 52 00 	call	0xa4	; 0xa4 <adc_select_vref>
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	0e 94 7f 00 	call	0xfe	; 0xfe <adc_select_channel>
 210:	8c e7       	ldi	r24, 0x7C	; 124
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	2c e7       	ldi	r18, 0x7C	; 124
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	f9 01       	movw	r30, r18
 21a:	20 81       	ld	r18, Z
 21c:	20 62       	ori	r18, 0x20	; 32
 21e:	fc 01       	movw	r30, r24
 220:	20 83       	st	Z, r18
 222:	8a e7       	ldi	r24, 0x7A	; 122
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	2a e7       	ldi	r18, 0x7A	; 122
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	f9 01       	movw	r30, r18
 22c:	20 81       	ld	r18, Z
 22e:	20 64       	ori	r18, 0x40	; 64
 230:	fc 01       	movw	r30, r24
 232:	20 83       	st	Z, r18
 234:	00 00       	nop
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <adc_read_latest>:
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	1f 92       	push	r1
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	19 82       	std	Y+1, r1	; 0x01
 248:	89 e7       	ldi	r24, 0x79	; 121
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	fc 01       	movw	r30, r24
 24e:	80 81       	ld	r24, Z
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	0f 90       	pop	r0
 256:	df 91       	pop	r29
 258:	cf 91       	pop	r28
 25a:	08 95       	ret

0000025c <atmel_start_init>:
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	cd b7       	in	r28, 0x3d	; 61
 262:	de b7       	in	r29, 0x3e	; 62
 264:	0e 94 60 05 	call	0xac0	; 0xac0 <system_init>
 268:	00 00       	nop
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	08 95       	ret

00000270 <setPC3_high>:
#define FET_PORTB_MASK ( (1<<FET_C_HIGH_BIT) | (1<<FET_A_LOW_BIT) | (1<<FET_B_LOW_BIT) | (1<<FET_C_LOW_BIT) )
#define FET_PORTC_MASK (1<<FET_B_HIGH_BIT)
#define FET_PORTD_MASK (1<<FET_A_HIGH_BIT)

void setPC3_high(void)
{
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
 274:	cd b7       	in	r28, 0x3d	; 61
 276:	de b7       	in	r29, 0x3e	; 62
	SLOWDOWN_DDR |= SLOWDOWN_MASK;
 278:	87 e2       	ldi	r24, 0x27	; 39
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	27 e2       	ldi	r18, 0x27	; 39
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	f9 01       	movw	r30, r18
 282:	20 81       	ld	r18, Z
 284:	28 60       	ori	r18, 0x08	; 8
 286:	fc 01       	movw	r30, r24
 288:	20 83       	st	Z, r18
	SLOWDOWN_PORT |= SLOWDOWN_MASK;
 28a:	88 e2       	ldi	r24, 0x28	; 40
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	28 e2       	ldi	r18, 0x28	; 40
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	f9 01       	movw	r30, r18
 294:	20 81       	ld	r18, Z
 296:	28 60       	ori	r18, 0x08	; 8
 298:	fc 01       	movw	r30, r24
 29a:	20 83       	st	Z, r18
}
 29c:	00 00       	nop
 29e:	df 91       	pop	r29
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <setPC3_low>:

void setPC3_low(void)
{
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
	SLOWDOWN_PORT &= ~(SLOWDOWN_MASK);
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	28 e2       	ldi	r18, 0x28	; 40
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	f9 01       	movw	r30, r18
 2b6:	20 81       	ld	r18, Z
 2b8:	27 7f       	andi	r18, 0xF7	; 247
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
}
 2be:	00 00       	nop
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <hall_init>:


void hall_init()
{
 2c6:	cf 93       	push	r28
 2c8:	df 93       	push	r29
 2ca:	cd b7       	in	r28, 0x3d	; 61
 2cc:	de b7       	in	r29, 0x3e	; 62
	//need to set pins to input, no pullup (this is default behavior, so ignoring for now)
}
 2ce:	00 00       	nop
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	08 95       	ret

000002d6 <timer0_init>:

//setup TC0 to continuously count from 0:127 with auto-reload
//This is used to (poorly) control spindle speed
void timer0_init()
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	cd b7       	in	r28, 0x3d	; 61
 2dc:	de b7       	in	r29, 0x3e	; 62
	PRR &= ~(1<<PRTIM0);//enable timer
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	24 e6       	ldi	r18, 0x64	; 100
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	f9 01       	movw	r30, r18
 2e8:	20 81       	ld	r18, Z
 2ea:	27 7f       	andi	r18, 0xF7	; 247
 2ec:	fc 01       	movw	r30, r24
 2ee:	20 83       	st	Z, r18
	TCCR0A = 0b10000010; //set to clear on compare
 2f0:	84 e4       	ldi	r24, 0x44	; 68
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	22 e8       	ldi	r18, 0x82	; 130
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
	//TCCR0B = 0b00000101; //divide 16E6/1024 = 15.6 kHz clock, counter resets @   117  Hz
	//TCCR0B = 0b00000100; //divide 16E6/0256 = 62.5 kHz clock, counter resets @   488  Hz
	//TCCR0B = 0b00000011; //divide 16E6/0064 = 250. kHz clock, counter resets @  1.95 kHz
	TCCR0B = 0b00000010; //divide 16E6/0008 = 02.0 MHz clock, counter resets @ 15.63 kHz
 2fa:	85 e4       	ldi	r24, 0x45	; 69
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	22 e0       	ldi	r18, 0x02	; 2
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
	//TCCR0B = 0b00000001; //divide 16E6/0001 = 16.0 MHz clock, counter resets @   125 kHz
	
	OCR0A = 127; //maximum timer value to count up to (before reset); counter continuously counts up from zero to this value 
 304:	87 e4       	ldi	r24, 0x47	; 71
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	2f e7       	ldi	r18, 0x7F	; 127
 30a:	fc 01       	movw	r30, r24
 30c:	20 83       	st	Z, r18
}
 30e:	00 00       	nop
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret

00000316 <phase_init>:

void phase_init()
{
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
	//Pull enable pin high
	BLDC_ENABLE_DDR |= BLDC_ENABLE_MASK; //configure as output
 31e:	84 e2       	ldi	r24, 0x24	; 36
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	24 e2       	ldi	r18, 0x24	; 36
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	f9 01       	movw	r30, r18
 328:	20 81       	ld	r18, Z
 32a:	20 61       	ori	r18, 0x10	; 16
 32c:	fc 01       	movw	r30, r24
 32e:	20 83       	st	Z, r18
	BLDC_ENABLE_PORT |= BLDC_ENABLE_MASK; //set pin high
 330:	85 e2       	ldi	r24, 0x25	; 37
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	25 e2       	ldi	r18, 0x25	; 37
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	f9 01       	movw	r30, r18
 33a:	20 81       	ld	r18, Z
 33c:	20 61       	ori	r18, 0x10	; 16
 33e:	fc 01       	movw	r30, r24
 340:	20 83       	st	Z, r18
	
	//configure phases as output
	DDRB |= FET_PORTB_MASK;
 342:	84 e2       	ldi	r24, 0x24	; 36
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	24 e2       	ldi	r18, 0x24	; 36
 348:	30 e0       	ldi	r19, 0x00	; 0
 34a:	f9 01       	movw	r30, r18
 34c:	20 81       	ld	r18, Z
 34e:	23 6c       	ori	r18, 0xC3	; 195
 350:	fc 01       	movw	r30, r24
 352:	20 83       	st	Z, r18
	DDRC |= FET_PORTC_MASK;
 354:	87 e2       	ldi	r24, 0x27	; 39
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	27 e2       	ldi	r18, 0x27	; 39
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	f9 01       	movw	r30, r18
 35e:	20 81       	ld	r18, Z
 360:	21 60       	ori	r18, 0x01	; 1
 362:	fc 01       	movw	r30, r24
 364:	20 83       	st	Z, r18
	DDRD |= FET_PORTD_MASK;
 366:	8a e2       	ldi	r24, 0x2A	; 42
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	2a e2       	ldi	r18, 0x2A	; 42
 36c:	30 e0       	ldi	r19, 0x00	; 0
 36e:	f9 01       	movw	r30, r18
 370:	20 81       	ld	r18, Z
 372:	21 60       	ori	r18, 0x01	; 1
 374:	fc 01       	movw	r30, r24
 376:	20 83       	st	Z, r18
	
	//set pins low
	PORTB &= ~(FET_PORTB_MASK);
 378:	85 e2       	ldi	r24, 0x25	; 37
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	25 e2       	ldi	r18, 0x25	; 37
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	f9 01       	movw	r30, r18
 382:	20 81       	ld	r18, Z
 384:	2c 73       	andi	r18, 0x3C	; 60
 386:	fc 01       	movw	r30, r24
 388:	20 83       	st	Z, r18
	PORTC &= ~(FET_PORTB_MASK);
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	28 e2       	ldi	r18, 0x28	; 40
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	f9 01       	movw	r30, r18
 394:	20 81       	ld	r18, Z
 396:	2c 73       	andi	r18, 0x3C	; 60
 398:	fc 01       	movw	r30, r24
 39a:	20 83       	st	Z, r18
	PORTD &= ~(FET_PORTB_MASK);
 39c:	8b e2       	ldi	r24, 0x2B	; 43
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	2b e2       	ldi	r18, 0x2B	; 43
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	f9 01       	movw	r30, r18
 3a6:	20 81       	ld	r18, Z
 3a8:	2c 73       	andi	r18, 0x3C	; 60
 3aa:	fc 01       	movw	r30, r24
 3ac:	20 83       	st	Z, r18
	
	//debug (X1LIMIT)
	//DDRD |= (1<<3); //debug set to output  This MUST BE DISABLED OR X LIMIT SWITCH WON'T WORK
	//PORTD |= (1<<3); //debug set X1LIMIT (PD3) low (so we can toggle when errors)
}
 3ae:	00 00       	nop
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret

000003b6 <get_hall_logic>:

uint8_t get_hall_logic()
{
 3b6:	cf 93       	push	r28
 3b8:	df 93       	push	r29
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62
	
	uint8_t temp = 0; //reset state to zero
 3c0:	19 82       	std	Y+1, r1	; 0x01
	if ( (Hall_A_PIN & Hall_A_MASK) ) { temp |= (1<<HALL_A_LOGIC_BIT); }
 3c2:	89 e2       	ldi	r24, 0x29	; 41
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	fc 01       	movw	r30, r24
 3c8:	80 81       	ld	r24, Z
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	82 70       	andi	r24, 0x02	; 2
 3d0:	99 27       	eor	r25, r25
 3d2:	89 2b       	or	r24, r25
 3d4:	19 f0       	breq	.+6      	; 0x3dc <get_hall_logic+0x26>
 3d6:	89 81       	ldd	r24, Y+1	; 0x01
 3d8:	84 60       	ori	r24, 0x04	; 4
 3da:	89 83       	std	Y+1, r24	; 0x01
	if ( (Hall_B_PIN & Hall_B_MASK) ) { temp |= (1<<HALL_B_LOGIC_BIT); }
 3dc:	86 e2       	ldi	r24, 0x26	; 38
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	fc 01       	movw	r30, r24
 3e2:	80 81       	ld	r24, Z
 3e4:	88 2f       	mov	r24, r24
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	82 70       	andi	r24, 0x02	; 2
 3ea:	99 27       	eor	r25, r25
 3ec:	89 2b       	or	r24, r25
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <get_hall_logic+0x40>
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	82 60       	ori	r24, 0x02	; 2
 3f4:	89 83       	std	Y+1, r24	; 0x01
	if ( (Hall_C_PIN & Hall_C_MASK) ) { temp |= (1<<HALL_C_LOGIC_BIT); }
 3f6:	89 e2       	ldi	r24, 0x29	; 41
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	fc 01       	movw	r30, r24
 3fc:	80 81       	ld	r24, Z
 3fe:	88 2f       	mov	r24, r24
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	84 70       	andi	r24, 0x04	; 4
 404:	99 27       	eor	r25, r25
 406:	89 2b       	or	r24, r25
 408:	19 f0       	breq	.+6      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	81 60       	ori	r24, 0x01	; 1
 40e:	89 83       	std	Y+1, r24	; 0x01
	return temp;
 410:	89 81       	ldd	r24, Y+1	; 0x01
}
 412:	0f 90       	pop	r0
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <is_direction_clockwise>:

uint8_t is_direction_clockwise()
{
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
	if ( BLDC_DIR_PIN & BLDC_DIR_MASK ) { return 1;}  //spin CW 
 422:	83 e2       	ldi	r24, 0x23	; 35
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	fc 01       	movw	r30, r24
 428:	80 81       	ld	r24, Z
 42a:	88 2f       	mov	r24, r24
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	88 70       	andi	r24, 0x08	; 8
 430:	99 27       	eor	r25, r25
 432:	89 2b       	or	r24, r25
 434:	11 f0       	breq	.+4      	; 0x43a <is_direction_clockwise+0x20>
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	01 c0       	rjmp	.+2      	; 0x43c <is_direction_clockwise+0x22>
	else { return 0; } //spin CCW
 43a:	80 e0       	ldi	r24, 0x00	; 0
}
 43c:	df 91       	pop	r29
 43e:	cf 91       	pop	r28
 440:	08 95       	ret

00000442 <set_phase>:

void set_phase(char phase, char set_output_to)
{
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
 446:	00 d0       	rcall	.+0      	; 0x448 <set_phase+0x6>
 448:	cd b7       	in	r28, 0x3d	; 61
 44a:	de b7       	in	r29, 0x3e	; 62
 44c:	89 83       	std	Y+1, r24	; 0x01
 44e:	6a 83       	std	Y+2, r22	; 0x02
	switch (phase) {
 450:	89 81       	ldd	r24, Y+1	; 0x01
 452:	88 2f       	mov	r24, r24
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	82 34       	cpi	r24, 0x42	; 66
 458:	91 05       	cpc	r25, r1
 45a:	09 f4       	brne	.+2      	; 0x45e <set_phase+0x1c>
 45c:	4f c0       	rjmp	.+158    	; 0x4fc <set_phase+0xba>
 45e:	83 34       	cpi	r24, 0x43	; 67
 460:	91 05       	cpc	r25, r1
 462:	09 f4       	brne	.+2      	; 0x466 <set_phase+0x24>
 464:	92 c0       	rjmp	.+292    	; 0x58a <set_phase+0x148>
 466:	81 34       	cpi	r24, 0x41	; 65
 468:	91 05       	cpc	r25, r1
 46a:	09 f0       	breq	.+2      	; 0x46e <set_phase+0x2c>
					break;
			}				
			break;
		
		default:
			break;
 46c:	d5 c0       	rjmp	.+426    	; 0x618 <set_phase+0x1d6>

void set_phase(char phase, char set_output_to)
{
	switch (phase) {
		case 'A':			
			switch (set_output_to) {
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	88 2f       	mov	r24, r24
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	8c 34       	cpi	r24, 0x4C	; 76
 476:	91 05       	cpc	r25, r1
 478:	d1 f0       	breq	.+52     	; 0x4ae <set_phase+0x6c>
 47a:	8a 35       	cpi	r24, 0x5A	; 90
 47c:	91 05       	cpc	r25, r1
 47e:	51 f1       	breq	.+84     	; 0x4d4 <set_phase+0x92>
 480:	88 34       	cpi	r24, 0x48	; 72
 482:	91 05       	cpc	r25, r1
 484:	09 f0       	breq	.+2      	; 0x488 <set_phase+0x46>
				case 'Z':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn both FETs off
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);
					break;
				default: 
					break;
 486:	39 c0       	rjmp	.+114    	; 0x4fa <set_phase+0xb8>
{
	switch (phase) {
		case 'A':			
			switch (set_output_to) {
				case 'H':
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);//turn low FET off
 488:	85 e2       	ldi	r24, 0x25	; 37
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	25 e2       	ldi	r18, 0x25	; 37
 48e:	30 e0       	ldi	r19, 0x00	; 0
 490:	f9 01       	movw	r30, r18
 492:	20 81       	ld	r18, Z
 494:	2f 77       	andi	r18, 0x7F	; 127
 496:	fc 01       	movw	r30, r24
 498:	20 83       	st	Z, r18
					FET_A_HIGH_PORT |= (1<<FET_A_HIGH_BIT);//turn high FET on
 49a:	8b e2       	ldi	r24, 0x2B	; 43
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	2b e2       	ldi	r18, 0x2B	; 43
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f9 01       	movw	r30, r18
 4a4:	20 81       	ld	r18, Z
 4a6:	21 60       	ori	r18, 0x01	; 1
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
					break;
 4ac:	26 c0       	rjmp	.+76     	; 0x4fa <set_phase+0xb8>
				case 'L':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn high FET off
 4ae:	8b e2       	ldi	r24, 0x2B	; 43
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	2b e2       	ldi	r18, 0x2B	; 43
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	20 81       	ld	r18, Z
 4ba:	2e 7f       	andi	r18, 0xFE	; 254
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18
					FET_A_LOW_PORT |= (1<<FET_A_LOW_BIT);//turn low FET on
 4c0:	85 e2       	ldi	r24, 0x25	; 37
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	25 e2       	ldi	r18, 0x25	; 37
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	20 68       	ori	r18, 0x80	; 128
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18
					break;
 4d2:	13 c0       	rjmp	.+38     	; 0x4fa <set_phase+0xb8>
				case 'Z':
					FET_A_HIGH_PORT &= ~(1<<FET_A_HIGH_BIT);//turn both FETs off
 4d4:	8b e2       	ldi	r24, 0x2B	; 43
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	2b e2       	ldi	r18, 0x2B	; 43
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2e 7f       	andi	r18, 0xFE	; 254
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
					FET_A_LOW_PORT &= ~(1<<FET_A_LOW_BIT);
 4e6:	85 e2       	ldi	r24, 0x25	; 37
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	25 e2       	ldi	r18, 0x25	; 37
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	f9 01       	movw	r30, r18
 4f0:	20 81       	ld	r18, Z
 4f2:	2f 77       	andi	r18, 0x7F	; 127
 4f4:	fc 01       	movw	r30, r24
 4f6:	20 83       	st	Z, r18
					break;
 4f8:	00 00       	nop
				default: 
					break;
			}
			break;
 4fa:	8e c0       	rjmp	.+284    	; 0x618 <set_phase+0x1d6>
			
		case 'B':
			switch (set_output_to) {
 4fc:	8a 81       	ldd	r24, Y+2	; 0x02
 4fe:	88 2f       	mov	r24, r24
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	8c 34       	cpi	r24, 0x4C	; 76
 504:	91 05       	cpc	r25, r1
 506:	d1 f0       	breq	.+52     	; 0x53c <set_phase+0xfa>
 508:	8a 35       	cpi	r24, 0x5A	; 90
 50a:	91 05       	cpc	r25, r1
 50c:	51 f1       	breq	.+84     	; 0x562 <set_phase+0x120>
 50e:	88 34       	cpi	r24, 0x48	; 72
 510:	91 05       	cpc	r25, r1
 512:	09 f0       	breq	.+2      	; 0x516 <set_phase+0xd4>
				case 'Z':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn both FETs off
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);
					break;
				default: 
					break;
 514:	39 c0       	rjmp	.+114    	; 0x588 <set_phase+0x146>
			break;
			
		case 'B':
			switch (set_output_to) {
				case 'H':
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);//turn low FET off
 516:	85 e2       	ldi	r24, 0x25	; 37
 518:	90 e0       	ldi	r25, 0x00	; 0
 51a:	25 e2       	ldi	r18, 0x25	; 37
 51c:	30 e0       	ldi	r19, 0x00	; 0
 51e:	f9 01       	movw	r30, r18
 520:	20 81       	ld	r18, Z
 522:	2f 7b       	andi	r18, 0xBF	; 191
 524:	fc 01       	movw	r30, r24
 526:	20 83       	st	Z, r18
					FET_B_HIGH_PORT |= (1<<FET_B_HIGH_BIT);//turn high FET on
 528:	88 e2       	ldi	r24, 0x28	; 40
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	28 e2       	ldi	r18, 0x28	; 40
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	f9 01       	movw	r30, r18
 532:	20 81       	ld	r18, Z
 534:	21 60       	ori	r18, 0x01	; 1
 536:	fc 01       	movw	r30, r24
 538:	20 83       	st	Z, r18
					break;
 53a:	26 c0       	rjmp	.+76     	; 0x588 <set_phase+0x146>
				case 'L':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn high FET off
 53c:	88 e2       	ldi	r24, 0x28	; 40
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	28 e2       	ldi	r18, 0x28	; 40
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	f9 01       	movw	r30, r18
 546:	20 81       	ld	r18, Z
 548:	2e 7f       	andi	r18, 0xFE	; 254
 54a:	fc 01       	movw	r30, r24
 54c:	20 83       	st	Z, r18
					FET_B_LOW_PORT |= (1<<FET_B_LOW_BIT);//turn low FET on
 54e:	85 e2       	ldi	r24, 0x25	; 37
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	25 e2       	ldi	r18, 0x25	; 37
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	f9 01       	movw	r30, r18
 558:	20 81       	ld	r18, Z
 55a:	20 64       	ori	r18, 0x40	; 64
 55c:	fc 01       	movw	r30, r24
 55e:	20 83       	st	Z, r18
					break;
 560:	13 c0       	rjmp	.+38     	; 0x588 <set_phase+0x146>
				case 'Z':
					FET_B_HIGH_PORT &= ~(1<<FET_B_HIGH_BIT);//turn both FETs off
 562:	88 e2       	ldi	r24, 0x28	; 40
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	28 e2       	ldi	r18, 0x28	; 40
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	f9 01       	movw	r30, r18
 56c:	20 81       	ld	r18, Z
 56e:	2e 7f       	andi	r18, 0xFE	; 254
 570:	fc 01       	movw	r30, r24
 572:	20 83       	st	Z, r18
					FET_B_LOW_PORT &= ~(1<<FET_B_LOW_BIT);
 574:	85 e2       	ldi	r24, 0x25	; 37
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	25 e2       	ldi	r18, 0x25	; 37
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	f9 01       	movw	r30, r18
 57e:	20 81       	ld	r18, Z
 580:	2f 7b       	andi	r18, 0xBF	; 191
 582:	fc 01       	movw	r30, r24
 584:	20 83       	st	Z, r18
					break;
 586:	00 00       	nop
				default: 
					break;
			}			
			break;
 588:	47 c0       	rjmp	.+142    	; 0x618 <set_phase+0x1d6>
			
		case 'C':			
			switch (set_output_to) {
 58a:	8a 81       	ldd	r24, Y+2	; 0x02
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	8c 34       	cpi	r24, 0x4C	; 76
 592:	91 05       	cpc	r25, r1
 594:	d1 f0       	breq	.+52     	; 0x5ca <set_phase+0x188>
 596:	8a 35       	cpi	r24, 0x5A	; 90
 598:	91 05       	cpc	r25, r1
 59a:	51 f1       	breq	.+84     	; 0x5f0 <set_phase+0x1ae>
 59c:	88 34       	cpi	r24, 0x48	; 72
 59e:	91 05       	cpc	r25, r1
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <set_phase+0x162>
				case 'Z':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn both FETs off
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);
					break;
				default: 
					break;
 5a2:	39 c0       	rjmp	.+114    	; 0x616 <set_phase+0x1d4>
			break;
			
		case 'C':			
			switch (set_output_to) {
				case 'H':
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);//turn low FET off
 5a4:	85 e2       	ldi	r24, 0x25	; 37
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	25 e2       	ldi	r18, 0x25	; 37
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	f9 01       	movw	r30, r18
 5ae:	20 81       	ld	r18, Z
 5b0:	2d 7f       	andi	r18, 0xFD	; 253
 5b2:	fc 01       	movw	r30, r24
 5b4:	20 83       	st	Z, r18
					FET_C_HIGH_PORT |= (1<<FET_C_HIGH_BIT);//turn high FET on
 5b6:	85 e2       	ldi	r24, 0x25	; 37
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	25 e2       	ldi	r18, 0x25	; 37
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	f9 01       	movw	r30, r18
 5c0:	20 81       	ld	r18, Z
 5c2:	21 60       	ori	r18, 0x01	; 1
 5c4:	fc 01       	movw	r30, r24
 5c6:	20 83       	st	Z, r18
					break;
 5c8:	26 c0       	rjmp	.+76     	; 0x616 <set_phase+0x1d4>
				case 'L':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn high FET off
 5ca:	85 e2       	ldi	r24, 0x25	; 37
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	25 e2       	ldi	r18, 0x25	; 37
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	f9 01       	movw	r30, r18
 5d4:	20 81       	ld	r18, Z
 5d6:	2e 7f       	andi	r18, 0xFE	; 254
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
					FET_C_LOW_PORT |= (1<<FET_C_LOW_BIT);//turn low FET on
 5dc:	85 e2       	ldi	r24, 0x25	; 37
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	25 e2       	ldi	r18, 0x25	; 37
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	f9 01       	movw	r30, r18
 5e6:	20 81       	ld	r18, Z
 5e8:	22 60       	ori	r18, 0x02	; 2
 5ea:	fc 01       	movw	r30, r24
 5ec:	20 83       	st	Z, r18
					break;
 5ee:	13 c0       	rjmp	.+38     	; 0x616 <set_phase+0x1d4>
				case 'Z':
					FET_C_HIGH_PORT &= ~(1<<FET_C_HIGH_BIT);//turn both FETs off
 5f0:	85 e2       	ldi	r24, 0x25	; 37
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	25 e2       	ldi	r18, 0x25	; 37
 5f6:	30 e0       	ldi	r19, 0x00	; 0
 5f8:	f9 01       	movw	r30, r18
 5fa:	20 81       	ld	r18, Z
 5fc:	2e 7f       	andi	r18, 0xFE	; 254
 5fe:	fc 01       	movw	r30, r24
 600:	20 83       	st	Z, r18
					FET_C_LOW_PORT &= ~(1<<FET_C_LOW_BIT);
 602:	85 e2       	ldi	r24, 0x25	; 37
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	25 e2       	ldi	r18, 0x25	; 37
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	f9 01       	movw	r30, r18
 60c:	20 81       	ld	r18, Z
 60e:	2d 7f       	andi	r18, 0xFD	; 253
 610:	fc 01       	movw	r30, r24
 612:	20 83       	st	Z, r18
					break;
 614:	00 00       	nop
				default: 
					break;
			}				
			break;
 616:	00 00       	nop
		
		default:
			break;
	}
}
 618:	00 00       	nop
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	df 91       	pop	r29
 620:	cf 91       	pop	r28
 622:	08 95       	ret

00000624 <set_all_phases>:


void set_all_phases(char stateA, char stateB, char stateC)
{
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	00 d0       	rcall	.+0      	; 0x62a <set_all_phases+0x6>
 62a:	1f 92       	push	r1
 62c:	cd b7       	in	r28, 0x3d	; 61
 62e:	de b7       	in	r29, 0x3e	; 62
 630:	89 83       	std	Y+1, r24	; 0x01
 632:	6a 83       	std	Y+2, r22	; 0x02
 634:	4b 83       	std	Y+3, r20	; 0x03
	set_phase('A',stateA);
 636:	69 81       	ldd	r22, Y+1	; 0x01
 638:	81 e4       	ldi	r24, 0x41	; 65
 63a:	0e 94 21 02 	call	0x442	; 0x442 <set_phase>
	set_phase('B',stateB);
 63e:	6a 81       	ldd	r22, Y+2	; 0x02
 640:	82 e4       	ldi	r24, 0x42	; 66
 642:	0e 94 21 02 	call	0x442	; 0x442 <set_phase>
	set_phase('C',stateC);
 646:	6b 81       	ldd	r22, Y+3	; 0x03
 648:	83 e4       	ldi	r24, 0x43	; 67
 64a:	0e 94 21 02 	call	0x442	; 0x442 <set_phase>
}
 64e:	00 00       	nop
 650:	0f 90       	pop	r0
 652:	0f 90       	pop	r0
 654:	0f 90       	pop	r0
 656:	df 91       	pop	r29
 658:	cf 91       	pop	r28
 65a:	08 95       	ret

0000065c <main>:

uint8_t ai_result_delayed = 0;
uint8_t helper_p_control = 0; //controls how quickly rpm changes occur

int main(void)
{
 65c:	cf 93       	push	r28
 65e:	df 93       	push	r29
 660:	00 d0       	rcall	.+0      	; 0x662 <main+0x6>
 662:	cd b7       	in	r28, 0x3d	; 61
 664:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
 666:	0e 94 2e 01 	call	0x25c	; 0x25c <atmel_start_init>
	hall_init();
 66a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <hall_init>
	phase_init();
 66e:	0e 94 8b 01 	call	0x316	; 0x316 <phase_init>
	adc_init();
 672:	0e 94 ae 00 	call	0x15c	; 0x15c <adc_init>
	timer0_init();
 676:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <timer0_init>

	
	//adc_select_channel(ADC_CHANNEL_goalRPM); // will need to specify if more than one ADC channel monitored

	while (1) {
		setPC3_high();
 67a:	0e 94 38 01 	call	0x270	; 0x270 <setPC3_high>
		
		uint8_t ai_result = adc_read_latest();
 67e:	0e 94 1e 01 	call	0x23c	; 0x23c <adc_read_latest>
 682:	89 83       	std	Y+1, r24	; 0x01
		uint8_t counter_latest = TCNT0 + 1; //count from 1 to 128
 684:	86 e4       	ldi	r24, 0x46	; 70
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	fc 01       	movw	r30, r24
 68a:	80 81       	ld	r24, Z
 68c:	8f 5f       	subi	r24, 0xFF	; 255
 68e:	8a 83       	std	Y+2, r24	; 0x02
		
		if( ai_result != ai_result_delayed ) { //user changed rpm
 690:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 694:	99 81       	ldd	r25, Y+1	; 0x01
 696:	98 17       	cp	r25, r24
 698:	39 f1       	breq	.+78     	; 0x6e8 <main+0x8c>
			helper_p_control++; //increment helper               
 69a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 69e:	8f 5f       	subi	r24, 0xFF	; 255
 6a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <helper_p_control>
			if( helper_p_control >= 100 ) { //only update rpm every n loop cycles
 6a4:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <helper_p_control>
 6a8:	84 36       	cpi	r24, 0x64	; 100
 6aa:	f0 f0       	brcs	.+60     	; 0x6e8 <main+0x8c>
				helper_p_control = 0; //reset helper
 6ac:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <helper_p_control>
				if ( (ai_result > ai_result_delayed) && (ai_result_delayed < 128) ) { ai_result_delayed++; } //new rpm greater than old
 6b0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6b4:	99 81       	ldd	r25, Y+1	; 0x01
 6b6:	89 17       	cp	r24, r25
 6b8:	48 f4       	brcc	.+18     	; 0x6cc <main+0x70>
 6ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6be:	88 23       	and	r24, r24
 6c0:	2c f0       	brlt	.+10     	; 0x6cc <main+0x70>
 6c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6c6:	8f 5f       	subi	r24, 0xFF	; 255
 6c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				if ( (ai_result < ai_result_delayed) && (ai_result_delayed > 0  ) ) { ai_result_delayed--; } //new rpm less    than old
 6cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6d0:	99 81       	ldd	r25, Y+1	; 0x01
 6d2:	98 17       	cp	r25, r24
 6d4:	48 f4       	brcc	.+18     	; 0x6e8 <main+0x8c>
 6d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6da:	88 23       	and	r24, r24
 6dc:	29 f0       	breq	.+10     	; 0x6e8 <main+0x8c>
 6de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6e2:	81 50       	subi	r24, 0x01	; 1
 6e4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			}	
		} 
		
		setPC3_low();
 6e8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <setPC3_low>
		//ai_result_delayed = scale_adc_pwm(ai_result_delayed); //LUT hack to spoof GG2 spindle RPM behavior 
		
		if( counter_latest > ai_result_delayed ) { //if free-running counter value is greater than arduino PWM output, turn off all FETs
 6ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 6f0:	9a 81       	ldd	r25, Y+2	; 0x02
 6f2:	89 17       	cp	r24, r25
 6f4:	30 f4       	brcc	.+12     	; 0x702 <main+0xa6>
			set_all_phases('Z','Z','Z'); //replicate GG2 behavior
 6f6:	4a e5       	ldi	r20, 0x5A	; 90
 6f8:	6a e5       	ldi	r22, 0x5A	; 90
 6fa:	8a e5       	ldi	r24, 0x5A	; 90
 6fc:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 700:	bc cf       	rjmp	.-136    	; 0x67a <main+0x1e>
		} else { //always true when 'S8000' sent, true half the time when 'S4000', never true when 'S0'
			if( is_direction_clockwise() == 0 ) //spin CCW
 702:	0e 94 0d 02 	call	0x41a	; 0x41a <is_direction_clockwise>
 706:	88 23       	and	r24, r24
 708:	09 f0       	breq	.+2      	; 0x70c <main+0xb0>
 70a:	43 c0       	rjmp	.+134    	; 0x792 <main+0x136>
			{
				//PIND |= (1<<3); //debug... toggle PD3 (X1LIM)
				switch ( get_hall_logic() ) {
 70c:	0e 94 db 01 	call	0x3b6	; 0x3b6 <get_hall_logic>
 710:	88 2f       	mov	r24, r24
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	83 30       	cpi	r24, 0x03	; 3
 716:	91 05       	cpc	r25, r1
 718:	19 f1       	breq	.+70     	; 0x760 <main+0x104>
 71a:	84 30       	cpi	r24, 0x04	; 4
 71c:	91 05       	cpc	r25, r1
 71e:	34 f4       	brge	.+12     	; 0x72c <main+0xd0>
 720:	81 30       	cpi	r24, 0x01	; 1
 722:	91 05       	cpc	r25, r1
 724:	49 f1       	breq	.+82     	; 0x778 <main+0x11c>
 726:	02 97       	sbiw	r24, 0x02	; 2
 728:	09 f1       	breq	.+66     	; 0x76c <main+0x110>
 72a:	2c c0       	rjmp	.+88     	; 0x784 <main+0x128>
 72c:	85 30       	cpi	r24, 0x05	; 5
 72e:	91 05       	cpc	r25, r1
 730:	59 f0       	breq	.+22     	; 0x748 <main+0xec>
 732:	85 30       	cpi	r24, 0x05	; 5
 734:	91 05       	cpc	r25, r1
 736:	74 f0       	brlt	.+28     	; 0x754 <main+0xf8>
 738:	06 97       	sbiw	r24, 0x06	; 6
 73a:	21 f5       	brne	.+72     	; 0x784 <main+0x128>
					case 6: set_all_phases('H','L','Z'); break;
 73c:	4a e5       	ldi	r20, 0x5A	; 90
 73e:	6c e4       	ldi	r22, 0x4C	; 76
 740:	88 e4       	ldi	r24, 0x48	; 72
 742:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 746:	68 c0       	rjmp	.+208    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 5: set_all_phases('L','Z','H'); break;
 748:	48 e4       	ldi	r20, 0x48	; 72
 74a:	6a e5       	ldi	r22, 0x5A	; 90
 74c:	8c e4       	ldi	r24, 0x4C	; 76
 74e:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 752:	62 c0       	rjmp	.+196    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 4: set_all_phases('Z','L','H'); break;
 754:	48 e4       	ldi	r20, 0x48	; 72
 756:	6c e4       	ldi	r22, 0x4C	; 76
 758:	8a e5       	ldi	r24, 0x5A	; 90
 75a:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 75e:	5c c0       	rjmp	.+184    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 3: set_all_phases('Z','H','L'); break;
 760:	4c e4       	ldi	r20, 0x4C	; 76
 762:	68 e4       	ldi	r22, 0x48	; 72
 764:	8a e5       	ldi	r24, 0x5A	; 90
 766:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 76a:	56 c0       	rjmp	.+172    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 2: set_all_phases('H','Z','L'); break;
 76c:	4c e4       	ldi	r20, 0x4C	; 76
 76e:	6a e5       	ldi	r22, 0x5A	; 90
 770:	88 e4       	ldi	r24, 0x48	; 72
 772:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 776:	50 c0       	rjmp	.+160    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 1: set_all_phases('L','H','Z'); break;
 778:	4a e5       	ldi	r20, 0x5A	; 90
 77a:	68 e4       	ldi	r22, 0x48	; 72
 77c:	8c e4       	ldi	r24, 0x4C	; 76
 77e:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 782:	4a c0       	rjmp	.+148    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 784:	4a e5       	ldi	r20, 0x5A	; 90
 786:	6a e5       	ldi	r22, 0x5A	; 90
 788:	8a e5       	ldi	r24, 0x5A	; 90
 78a:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
						break;
 78e:	00 00       	nop
 790:	43 c0       	rjmp	.+134    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
				}		
			} else { //spin CW
				switch ( get_hall_logic() ) {
 792:	0e 94 db 01 	call	0x3b6	; 0x3b6 <get_hall_logic>
 796:	88 2f       	mov	r24, r24
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	83 30       	cpi	r24, 0x03	; 3
 79c:	91 05       	cpc	r25, r1
 79e:	f1 f0       	breq	.+60     	; 0x7dc <main+0x180>
 7a0:	84 30       	cpi	r24, 0x04	; 4
 7a2:	91 05       	cpc	r25, r1
 7a4:	34 f4       	brge	.+12     	; 0x7b2 <main+0x156>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	91 05       	cpc	r25, r1
 7aa:	61 f0       	breq	.+24     	; 0x7c4 <main+0x168>
 7ac:	02 97       	sbiw	r24, 0x02	; 2
 7ae:	81 f0       	breq	.+32     	; 0x7d0 <main+0x174>
 7b0:	2d c0       	rjmp	.+90     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 7b2:	85 30       	cpi	r24, 0x05	; 5
 7b4:	91 05       	cpc	r25, r1
 7b6:	f1 f0       	breq	.+60     	; 0x7f4 <main+0x198>
 7b8:	85 30       	cpi	r24, 0x05	; 5
 7ba:	91 05       	cpc	r25, r1
 7bc:	ac f0       	brlt	.+42     	; 0x7e8 <main+0x18c>
 7be:	06 97       	sbiw	r24, 0x06	; 6
 7c0:	f9 f0       	breq	.+62     	; 0x800 <__DATA_REGION_LENGTH__>
 7c2:	24 c0       	rjmp	.+72     	; 0x80c <__DATA_REGION_LENGTH__+0xc>
					case 1: set_all_phases('H','L','Z'); break;
 7c4:	4a e5       	ldi	r20, 0x5A	; 90
 7c6:	6c e4       	ldi	r22, 0x4C	; 76
 7c8:	88 e4       	ldi	r24, 0x48	; 72
 7ca:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 7ce:	24 c0       	rjmp	.+72     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 2: set_all_phases('L','Z','H'); break;
 7d0:	48 e4       	ldi	r20, 0x48	; 72
 7d2:	6a e5       	ldi	r22, 0x5A	; 90
 7d4:	8c e4       	ldi	r24, 0x4C	; 76
 7d6:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 7da:	1e c0       	rjmp	.+60     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 3: set_all_phases('Z','L','H'); break;
 7dc:	48 e4       	ldi	r20, 0x48	; 72
 7de:	6c e4       	ldi	r22, 0x4C	; 76
 7e0:	8a e5       	ldi	r24, 0x5A	; 90
 7e2:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 7e6:	18 c0       	rjmp	.+48     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 4: set_all_phases('Z','H','L'); break;
 7e8:	4c e4       	ldi	r20, 0x4C	; 76
 7ea:	68 e4       	ldi	r22, 0x48	; 72
 7ec:	8a e5       	ldi	r24, 0x5A	; 90
 7ee:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 7f2:	12 c0       	rjmp	.+36     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 5: set_all_phases('H','Z','L'); break;
 7f4:	4c e4       	ldi	r20, 0x4C	; 76
 7f6:	6a e5       	ldi	r22, 0x5A	; 90
 7f8:	88 e4       	ldi	r24, 0x48	; 72
 7fa:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 7fe:	0c c0       	rjmp	.+24     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 6: set_all_phases('L','H','Z'); break;
 800:	4a e5       	ldi	r20, 0x5A	; 90
 802:	68 e4       	ldi	r22, 0x48	; 72
 804:	8c e4       	ldi	r24, 0x4C	; 76
 806:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
 80a:	06 c0       	rjmp	.+12     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
					case 0: //fall through
					case 7: // fall through 0b000 & 0b111 are invalid hall states
					default:
						set_all_phases('Z','Z','Z'); //mainly to catch M5 pulling HallC low (when spindle disabled)
 80c:	4a e5       	ldi	r20, 0x5A	; 90
 80e:	6a e5       	ldi	r22, 0x5A	; 90
 810:	8a e5       	ldi	r24, 0x5A	; 90
 812:	0e 94 12 03 	call	0x624	; 0x624 <set_all_phases>
						break;
 816:	00 00       	nop
				}
			}
		}
	}
 818:	30 cf       	rjmp	.-416    	; 0x67a <main+0x1e>

0000081a <PORTB_set_port_dir>:
 81a:	cf 93       	push	r28
 81c:	df 93       	push	r29
 81e:	00 d0       	rcall	.+0      	; 0x820 <PORTB_set_port_dir+0x6>
 820:	cd b7       	in	r28, 0x3d	; 61
 822:	de b7       	in	r29, 0x3e	; 62
 824:	89 83       	std	Y+1, r24	; 0x01
 826:	6a 83       	std	Y+2, r22	; 0x02
 828:	8a 81       	ldd	r24, Y+2	; 0x02
 82a:	88 2f       	mov	r24, r24
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	81 30       	cpi	r24, 0x01	; 1
 830:	91 05       	cpc	r25, r1
 832:	99 f0       	breq	.+38     	; 0x85a <PORTB_set_port_dir+0x40>
 834:	82 30       	cpi	r24, 0x02	; 2
 836:	91 05       	cpc	r25, r1
 838:	d9 f0       	breq	.+54     	; 0x870 <PORTB_set_port_dir+0x56>
 83a:	89 2b       	or	r24, r25
 83c:	09 f0       	breq	.+2      	; 0x840 <PORTB_set_port_dir+0x26>
 83e:	2f c0       	rjmp	.+94     	; 0x89e <PORTB_set_port_dir+0x84>
 840:	84 e2       	ldi	r24, 0x24	; 36
 842:	90 e0       	ldi	r25, 0x00	; 0
 844:	24 e2       	ldi	r18, 0x24	; 36
 846:	30 e0       	ldi	r19, 0x00	; 0
 848:	f9 01       	movw	r30, r18
 84a:	20 81       	ld	r18, Z
 84c:	32 2f       	mov	r19, r18
 84e:	29 81       	ldd	r18, Y+1	; 0x01
 850:	20 95       	com	r18
 852:	23 23       	and	r18, r19
 854:	fc 01       	movw	r30, r24
 856:	20 83       	st	Z, r18
 858:	22 c0       	rjmp	.+68     	; 0x89e <PORTB_set_port_dir+0x84>
 85a:	84 e2       	ldi	r24, 0x24	; 36
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	24 e2       	ldi	r18, 0x24	; 36
 860:	30 e0       	ldi	r19, 0x00	; 0
 862:	f9 01       	movw	r30, r18
 864:	30 81       	ld	r19, Z
 866:	29 81       	ldd	r18, Y+1	; 0x01
 868:	23 2b       	or	r18, r19
 86a:	fc 01       	movw	r30, r24
 86c:	20 83       	st	Z, r18
 86e:	17 c0       	rjmp	.+46     	; 0x89e <PORTB_set_port_dir+0x84>
 870:	84 e2       	ldi	r24, 0x24	; 36
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	24 e2       	ldi	r18, 0x24	; 36
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	f9 01       	movw	r30, r18
 87a:	20 81       	ld	r18, Z
 87c:	32 2f       	mov	r19, r18
 87e:	29 81       	ldd	r18, Y+1	; 0x01
 880:	20 95       	com	r18
 882:	23 23       	and	r18, r19
 884:	fc 01       	movw	r30, r24
 886:	20 83       	st	Z, r18
 888:	85 e2       	ldi	r24, 0x25	; 37
 88a:	90 e0       	ldi	r25, 0x00	; 0
 88c:	25 e2       	ldi	r18, 0x25	; 37
 88e:	30 e0       	ldi	r19, 0x00	; 0
 890:	f9 01       	movw	r30, r18
 892:	30 81       	ld	r19, Z
 894:	29 81       	ldd	r18, Y+1	; 0x01
 896:	23 2b       	or	r18, r19
 898:	fc 01       	movw	r30, r24
 89a:	20 83       	st	Z, r18
 89c:	00 00       	nop
 89e:	00 00       	nop
 8a0:	0f 90       	pop	r0
 8a2:	0f 90       	pop	r0
 8a4:	df 91       	pop	r29
 8a6:	cf 91       	pop	r28
 8a8:	08 95       	ret

000008aa <PORTC_set_port_dir>:
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <PORTC_set_port_dir+0x6>
 8b0:	cd b7       	in	r28, 0x3d	; 61
 8b2:	de b7       	in	r29, 0x3e	; 62
 8b4:	89 83       	std	Y+1, r24	; 0x01
 8b6:	6a 83       	std	Y+2, r22	; 0x02
 8b8:	8a 81       	ldd	r24, Y+2	; 0x02
 8ba:	88 2f       	mov	r24, r24
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	81 30       	cpi	r24, 0x01	; 1
 8c0:	91 05       	cpc	r25, r1
 8c2:	99 f0       	breq	.+38     	; 0x8ea <PORTC_set_port_dir+0x40>
 8c4:	82 30       	cpi	r24, 0x02	; 2
 8c6:	91 05       	cpc	r25, r1
 8c8:	d9 f0       	breq	.+54     	; 0x900 <__stack+0x1>
 8ca:	89 2b       	or	r24, r25
 8cc:	09 f0       	breq	.+2      	; 0x8d0 <PORTC_set_port_dir+0x26>
 8ce:	2f c0       	rjmp	.+94     	; 0x92e <__stack+0x2f>
 8d0:	87 e2       	ldi	r24, 0x27	; 39
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	27 e2       	ldi	r18, 0x27	; 39
 8d6:	30 e0       	ldi	r19, 0x00	; 0
 8d8:	f9 01       	movw	r30, r18
 8da:	20 81       	ld	r18, Z
 8dc:	32 2f       	mov	r19, r18
 8de:	29 81       	ldd	r18, Y+1	; 0x01
 8e0:	20 95       	com	r18
 8e2:	23 23       	and	r18, r19
 8e4:	fc 01       	movw	r30, r24
 8e6:	20 83       	st	Z, r18
 8e8:	22 c0       	rjmp	.+68     	; 0x92e <__stack+0x2f>
 8ea:	87 e2       	ldi	r24, 0x27	; 39
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	27 e2       	ldi	r18, 0x27	; 39
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	f9 01       	movw	r30, r18
 8f4:	30 81       	ld	r19, Z
 8f6:	29 81       	ldd	r18, Y+1	; 0x01
 8f8:	23 2b       	or	r18, r19
 8fa:	fc 01       	movw	r30, r24
 8fc:	20 83       	st	Z, r18
 8fe:	17 c0       	rjmp	.+46     	; 0x92e <__stack+0x2f>
 900:	87 e2       	ldi	r24, 0x27	; 39
 902:	90 e0       	ldi	r25, 0x00	; 0
 904:	27 e2       	ldi	r18, 0x27	; 39
 906:	30 e0       	ldi	r19, 0x00	; 0
 908:	f9 01       	movw	r30, r18
 90a:	20 81       	ld	r18, Z
 90c:	32 2f       	mov	r19, r18
 90e:	29 81       	ldd	r18, Y+1	; 0x01
 910:	20 95       	com	r18
 912:	23 23       	and	r18, r19
 914:	fc 01       	movw	r30, r24
 916:	20 83       	st	Z, r18
 918:	88 e2       	ldi	r24, 0x28	; 40
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	28 e2       	ldi	r18, 0x28	; 40
 91e:	30 e0       	ldi	r19, 0x00	; 0
 920:	f9 01       	movw	r30, r18
 922:	30 81       	ld	r19, Z
 924:	29 81       	ldd	r18, Y+1	; 0x01
 926:	23 2b       	or	r18, r19
 928:	fc 01       	movw	r30, r24
 92a:	20 83       	st	Z, r18
 92c:	00 00       	nop
 92e:	00 00       	nop
 930:	0f 90       	pop	r0
 932:	0f 90       	pop	r0
 934:	df 91       	pop	r29
 936:	cf 91       	pop	r28
 938:	08 95       	ret

0000093a <PORTD_set_port_dir>:
 93a:	cf 93       	push	r28
 93c:	df 93       	push	r29
 93e:	00 d0       	rcall	.+0      	; 0x940 <PORTD_set_port_dir+0x6>
 940:	cd b7       	in	r28, 0x3d	; 61
 942:	de b7       	in	r29, 0x3e	; 62
 944:	89 83       	std	Y+1, r24	; 0x01
 946:	6a 83       	std	Y+2, r22	; 0x02
 948:	8a 81       	ldd	r24, Y+2	; 0x02
 94a:	88 2f       	mov	r24, r24
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	81 30       	cpi	r24, 0x01	; 1
 950:	91 05       	cpc	r25, r1
 952:	99 f0       	breq	.+38     	; 0x97a <PORTD_set_port_dir+0x40>
 954:	82 30       	cpi	r24, 0x02	; 2
 956:	91 05       	cpc	r25, r1
 958:	d9 f0       	breq	.+54     	; 0x990 <PORTD_set_port_dir+0x56>
 95a:	89 2b       	or	r24, r25
 95c:	09 f0       	breq	.+2      	; 0x960 <PORTD_set_port_dir+0x26>
 95e:	2f c0       	rjmp	.+94     	; 0x9be <PORTD_set_port_dir+0x84>
 960:	8a e2       	ldi	r24, 0x2A	; 42
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	2a e2       	ldi	r18, 0x2A	; 42
 966:	30 e0       	ldi	r19, 0x00	; 0
 968:	f9 01       	movw	r30, r18
 96a:	20 81       	ld	r18, Z
 96c:	32 2f       	mov	r19, r18
 96e:	29 81       	ldd	r18, Y+1	; 0x01
 970:	20 95       	com	r18
 972:	23 23       	and	r18, r19
 974:	fc 01       	movw	r30, r24
 976:	20 83       	st	Z, r18
 978:	22 c0       	rjmp	.+68     	; 0x9be <PORTD_set_port_dir+0x84>
 97a:	8a e2       	ldi	r24, 0x2A	; 42
 97c:	90 e0       	ldi	r25, 0x00	; 0
 97e:	2a e2       	ldi	r18, 0x2A	; 42
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	f9 01       	movw	r30, r18
 984:	30 81       	ld	r19, Z
 986:	29 81       	ldd	r18, Y+1	; 0x01
 988:	23 2b       	or	r18, r19
 98a:	fc 01       	movw	r30, r24
 98c:	20 83       	st	Z, r18
 98e:	17 c0       	rjmp	.+46     	; 0x9be <PORTD_set_port_dir+0x84>
 990:	8a e2       	ldi	r24, 0x2A	; 42
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	2a e2       	ldi	r18, 0x2A	; 42
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	f9 01       	movw	r30, r18
 99a:	20 81       	ld	r18, Z
 99c:	32 2f       	mov	r19, r18
 99e:	29 81       	ldd	r18, Y+1	; 0x01
 9a0:	20 95       	com	r18
 9a2:	23 23       	and	r18, r19
 9a4:	fc 01       	movw	r30, r24
 9a6:	20 83       	st	Z, r18
 9a8:	8b e2       	ldi	r24, 0x2B	; 43
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	2b e2       	ldi	r18, 0x2B	; 43
 9ae:	30 e0       	ldi	r19, 0x00	; 0
 9b0:	f9 01       	movw	r30, r18
 9b2:	30 81       	ld	r19, Z
 9b4:	29 81       	ldd	r18, Y+1	; 0x01
 9b6:	23 2b       	or	r18, r19
 9b8:	fc 01       	movw	r30, r24
 9ba:	20 83       	st	Z, r18
 9bc:	00 00       	nop
 9be:	00 00       	nop
 9c0:	0f 90       	pop	r0
 9c2:	0f 90       	pop	r0
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	08 95       	ret

000009ca <PORTE_set_port_dir>:
 9ca:	cf 93       	push	r28
 9cc:	df 93       	push	r29
 9ce:	00 d0       	rcall	.+0      	; 0x9d0 <PORTE_set_port_dir+0x6>
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
 9d4:	89 83       	std	Y+1, r24	; 0x01
 9d6:	6a 83       	std	Y+2, r22	; 0x02
 9d8:	8a 81       	ldd	r24, Y+2	; 0x02
 9da:	88 2f       	mov	r24, r24
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	81 30       	cpi	r24, 0x01	; 1
 9e0:	91 05       	cpc	r25, r1
 9e2:	99 f0       	breq	.+38     	; 0xa0a <PORTE_set_port_dir+0x40>
 9e4:	82 30       	cpi	r24, 0x02	; 2
 9e6:	91 05       	cpc	r25, r1
 9e8:	d9 f0       	breq	.+54     	; 0xa20 <PORTE_set_port_dir+0x56>
 9ea:	89 2b       	or	r24, r25
 9ec:	09 f0       	breq	.+2      	; 0x9f0 <PORTE_set_port_dir+0x26>
 9ee:	2f c0       	rjmp	.+94     	; 0xa4e <PORTE_set_port_dir+0x84>
 9f0:	8d e2       	ldi	r24, 0x2D	; 45
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	2d e2       	ldi	r18, 0x2D	; 45
 9f6:	30 e0       	ldi	r19, 0x00	; 0
 9f8:	f9 01       	movw	r30, r18
 9fa:	20 81       	ld	r18, Z
 9fc:	32 2f       	mov	r19, r18
 9fe:	29 81       	ldd	r18, Y+1	; 0x01
 a00:	20 95       	com	r18
 a02:	23 23       	and	r18, r19
 a04:	fc 01       	movw	r30, r24
 a06:	20 83       	st	Z, r18
 a08:	22 c0       	rjmp	.+68     	; 0xa4e <PORTE_set_port_dir+0x84>
 a0a:	8d e2       	ldi	r24, 0x2D	; 45
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	2d e2       	ldi	r18, 0x2D	; 45
 a10:	30 e0       	ldi	r19, 0x00	; 0
 a12:	f9 01       	movw	r30, r18
 a14:	30 81       	ld	r19, Z
 a16:	29 81       	ldd	r18, Y+1	; 0x01
 a18:	23 2b       	or	r18, r19
 a1a:	fc 01       	movw	r30, r24
 a1c:	20 83       	st	Z, r18
 a1e:	17 c0       	rjmp	.+46     	; 0xa4e <PORTE_set_port_dir+0x84>
 a20:	8d e2       	ldi	r24, 0x2D	; 45
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	2d e2       	ldi	r18, 0x2D	; 45
 a26:	30 e0       	ldi	r19, 0x00	; 0
 a28:	f9 01       	movw	r30, r18
 a2a:	20 81       	ld	r18, Z
 a2c:	32 2f       	mov	r19, r18
 a2e:	29 81       	ldd	r18, Y+1	; 0x01
 a30:	20 95       	com	r18
 a32:	23 23       	and	r18, r19
 a34:	fc 01       	movw	r30, r24
 a36:	20 83       	st	Z, r18
 a38:	8e e2       	ldi	r24, 0x2E	; 46
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	2e e2       	ldi	r18, 0x2E	; 46
 a3e:	30 e0       	ldi	r19, 0x00	; 0
 a40:	f9 01       	movw	r30, r18
 a42:	30 81       	ld	r19, Z
 a44:	29 81       	ldd	r18, Y+1	; 0x01
 a46:	23 2b       	or	r18, r19
 a48:	fc 01       	movw	r30, r24
 a4a:	20 83       	st	Z, r18
 a4c:	00 00       	nop
 a4e:	00 00       	nop
 a50:	0f 90       	pop	r0
 a52:	0f 90       	pop	r0
 a54:	df 91       	pop	r29
 a56:	cf 91       	pop	r28
 a58:	08 95       	ret

00000a5a <sysctrl_init>:
 a5a:	cf 93       	push	r28
 a5c:	df 93       	push	r29
 a5e:	cd b7       	in	r28, 0x3d	; 61
 a60:	de b7       	in	r29, 0x3e	; 62
 a62:	40 e0       	ldi	r20, 0x00	; 0
 a64:	60 e8       	ldi	r22, 0x80	; 128
 a66:	81 e6       	ldi	r24, 0x61	; 97
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 6c 05 	call	0xad8	; 0xad8 <protected_write_io>
 a6e:	83 e5       	ldi	r24, 0x53	; 83
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	fc 01       	movw	r30, r24
 a74:	10 82       	st	Z, r1
 a76:	85 e5       	ldi	r24, 0x55	; 85
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	fc 01       	movw	r30, r24
 a7c:	10 82       	st	Z, r1
 a7e:	80 e0       	ldi	r24, 0x00	; 0
 a80:	df 91       	pop	r29
 a82:	cf 91       	pop	r28
 a84:	08 95       	ret

00000a86 <mcu_init>:
 a86:	cf 93       	push	r28
 a88:	df 93       	push	r29
 a8a:	cd b7       	in	r28, 0x3d	; 61
 a8c:	de b7       	in	r29, 0x3e	; 62
 a8e:	84 e6       	ldi	r24, 0x64	; 100
 a90:	90 e0       	ldi	r25, 0x00	; 0
 a92:	2f e7       	ldi	r18, 0x7F	; 127
 a94:	fc 01       	movw	r30, r24
 a96:	20 83       	st	Z, r18
 a98:	62 e0       	ldi	r22, 0x02	; 2
 a9a:	8f ef       	ldi	r24, 0xFF	; 255
 a9c:	0e 94 0d 04 	call	0x81a	; 0x81a <PORTB_set_port_dir>
 aa0:	62 e0       	ldi	r22, 0x02	; 2
 aa2:	8f ef       	ldi	r24, 0xFF	; 255
 aa4:	0e 94 55 04 	call	0x8aa	; 0x8aa <PORTC_set_port_dir>
 aa8:	62 e0       	ldi	r22, 0x02	; 2
 aaa:	8f ef       	ldi	r24, 0xFF	; 255
 aac:	0e 94 9d 04 	call	0x93a	; 0x93a <PORTD_set_port_dir>
 ab0:	62 e0       	ldi	r22, 0x02	; 2
 ab2:	87 e0       	ldi	r24, 0x07	; 7
 ab4:	0e 94 e5 04 	call	0x9ca	; 0x9ca <PORTE_set_port_dir>
 ab8:	00 00       	nop
 aba:	df 91       	pop	r29
 abc:	cf 91       	pop	r28
 abe:	08 95       	ret

00000ac0 <system_init>:
 ac0:	cf 93       	push	r28
 ac2:	df 93       	push	r29
 ac4:	cd b7       	in	r28, 0x3d	; 61
 ac6:	de b7       	in	r29, 0x3e	; 62
 ac8:	0e 94 43 05 	call	0xa86	; 0xa86 <mcu_init>
 acc:	0e 94 2d 05 	call	0xa5a	; 0xa5a <sysctrl_init>
 ad0:	00 00       	nop
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	08 95       	ret

00000ad8 <protected_write_io>:
 ad8:	2f b7       	in	r18, 0x3f	; 63
 ada:	f8 94       	cli
 adc:	fc 01       	movw	r30, r24
 ade:	60 83       	st	Z, r22
 ae0:	40 83       	st	Z, r20
 ae2:	2f bf       	out	0x3f, r18	; 63
 ae4:	08 95       	ret

00000ae6 <_exit>:
 ae6:	f8 94       	cli

00000ae8 <__stop_program>:
 ae8:	ff cf       	rjmp	.-2      	; 0xae8 <__stop_program>
