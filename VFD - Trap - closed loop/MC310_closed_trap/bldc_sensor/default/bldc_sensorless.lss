
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000672  00000706  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  00000708  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000738  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001994  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011bf  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e6c  00000000  00000000  0000350b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000047c  00000000  00000000  00004378  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a06  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ac  00000000  00000000  000051fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  000057a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_14>
  3c:	0c 94 f8 02 	jmp	0x5f0	; 0x5f0 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 52 01 	jmp	0x2a4	; 0x2a4 <__vector_23>
  60:	0c 94 2c 01 	jmp	0x258	; 0x258 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e7       	ldi	r30, 0x72	; 114
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	af 30       	cpi	r26, 0x0F	; 15
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 8f 01 	call	0x31e	; 0x31e <main>
  b2:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <a4910_init>:

void a4910_init(void)   { (DDRB |= (1<<DDB4)); } //set pin to output

//////////////////////////////////////////////////////////////////////////////////////////////////

void a4910_disable(void) { (PORTB &= ~(1<<PORTB4)); } //set RESETn pin low
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <a4910_enable>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <__vector_27>:

//Interrupt generated each time ADC conversion finishes
//using an interrupt so we can add other ADC channels later
//with just one channel, we could set the ADC to free running mode (and remove this ISR)
ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	5f 93       	push	r21
  d4:	6f 93       	push	r22
  d6:	7f 93       	push	r23
  d8:	8f 93       	push	r24
  da:	9f 93       	push	r25
  dc:	af 93       	push	r26
  de:	bf 93       	push	r27
  e0:	ef 93       	push	r30
  e2:	ff 93       	push	r31
  unoPinA2_high();
  e4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <unoPinA2_high>

  if(ADC_stateMachine == ADC_MEASURING_GOAL_RPM)
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ADC_stateMachine>
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	b1 f4       	brne	.+44     	; 0x11c <__vector_27+0x5a>
  {
    uint16_t adcResult_counts = Adc_get_10_bits_result(); //~520 counts max (grBLDC goalRPM has DIV2 voltage divider LPF)
  f0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	98 2f       	mov	r25, r24
  fc:	88 27       	eor	r24, r24
  fe:	82 0f       	add	r24, r18
 100:	91 1d       	adc	r25, r1
 102:	4e e0       	ldi	r20, 0x0E	; 14
 104:	48 9f       	mul	r20, r24
 106:	90 01       	movw	r18, r0
 108:	49 9f       	mul	r20, r25
 10a:	30 0d       	add	r19, r0
 10c:	11 24       	eor	r1, r1
 10e:	c9 01       	movw	r24, r18
 110:	80 5b       	subi	r24, 0xB0	; 176
 112:	9a 4f       	sbci	r25, 0xFA	; 250
 114:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <goalSpeed_RPM+0x1>
 118:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <goalSpeed_RPM>
  // else if(ADC_stateMachine == ADC_MEASURING_CURRENT)
  // {
  //   adc_measuredCurrent_integrate(Adc_get_10_bits_result());
  // }
  
  ADC_hardwareStatus = ADCFREE;
 11c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>

  unoPinA2_low();
 120:	0e 94 04 01 	call	0x208	; 0x208 <unoPinA2_low>
}
 124:	ff 91       	pop	r31
 126:	ef 91       	pop	r30
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <adc_init>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_init(void)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
  //disable digital input circuitry on all pins used as analog inputs.
  //reduces power consumption, particularly when an analog signal is near Vcc/2.
  DIDR1 |= (1<<ADC9D)|(1<<ADC8D); //CUR_C & CUR_B ADC inputs
 14a:	ef e7       	ldi	r30, 0x7F	; 127
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	80 81       	ld	r24, Z
 150:	83 60       	ori	r24, 0x03	; 3
 152:	80 83       	st	Z, r24
  DIDR0 |= (1<<ADC6D)|(1<<ADC5D); //CUR_A & goalRPM ADC inputs
 154:	ee e7       	ldi	r30, 0x7E	; 126
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	80 66       	ori	r24, 0x60	; 96
 15c:	80 83       	st	Z, r24
  //CUR_A   is Pin PB5/ADC6
  //CUR_B   is Pin PC5/ADC9
  //CUR_C   is Pin PC4/ADC8
  //goalRPM is PIN PB2/ADC5

  Adc_enable();
 15e:	ea e7       	ldi	r30, 0x7A	; 122
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	80 68       	ori	r24, 0x80	; 128
 166:	80 83       	st	Z, r24
  Adc_set_prescaler(ADC_DIV_CLOCK_BY_4);
 168:	80 81       	ld	r24, Z
 16a:	88 7f       	andi	r24, 0xF8	; 248
 16c:	80 83       	st	Z, r24
 16e:	80 81       	ld	r24, Z
 170:	82 60       	ori	r24, 0x02	; 2
 172:	80 83       	st	Z, r24

  Adc_enable_vcc_vref();
 174:	ac e7       	ldi	r26, 0x7C	; 124
 176:	b0 e0       	ldi	r27, 0x00	; 0
 178:	8c 91       	ld	r24, X
 17a:	8f 77       	andi	r24, 0x7F	; 127
 17c:	8c 93       	st	X, r24
 17e:	8c 91       	ld	r24, X
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8c 93       	st	X, r24
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 184:	cb e7       	ldi	r28, 0x7B	; 123
 186:	d0 e0       	ldi	r29, 0x00	; 0
 188:	88 81       	ld	r24, Y
 18a:	80 62       	ori	r24, 0x20	; 32
 18c:	88 83       	st	Y, r24
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 18e:	88 81       	ld	r24, Y
 190:	8f 7b       	andi	r24, 0xBF	; 191
 192:	88 83       	st	Y, r24

  Adc_select_channel(ADC_INPUT_ADC5);  //goalRPM
 194:	8c 91       	ld	r24, X
 196:	80 7e       	andi	r24, 0xE0	; 224
 198:	85 60       	ori	r24, 0x05	; 5
 19a:	8c 93       	st	X, r24

  Adc_right_adjust_result(); //0b------xx xxxxxxxx
 19c:	8c 91       	ld	r24, X
 19e:	8f 7d       	andi	r24, 0xDF	; 223
 1a0:	8c 93       	st	X, r24
  Adc_enable_high_speed_mode();
 1a2:	88 81       	ld	r24, Y
 1a4:	80 68       	ori	r24, 0x80	; 128
 1a6:	88 83       	st	Y, r24
  adc_generateInterruptAfterConversion(); 
 1a8:	80 81       	ld	r24, Z
 1aa:	88 60       	ori	r24, 0x08	; 8
 1ac:	80 83       	st	Z, r24
}
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	08 95       	ret

000001b4 <adc_Scheduler>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_Scheduler(void)
{  
  switch(ADC_stateMachine)
 1b4:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ADC_stateMachine>
 1b8:	91 30       	cpi	r25, 0x01	; 1
 1ba:	99 f4       	brne	.+38     	; 0x1e2 <adc_Scheduler+0x2e>
  {
    case ADC_MEASURING_GOAL_RPM:
    if(ADC_hardwareStatus == ADCFREE)
 1bc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c0:	81 11       	cpse	r24, r1
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <adc_Scheduler+0x2e>
    {
      ADC_hardwareStatus = ADCBUSY;
 1c4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
      Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 1c8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1cc:	80 7e       	andi	r24, 0xE0	; 224
 1ce:	85 60       	ori	r24, 0x05	; 5
 1d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1d4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1d8:	80 64       	ori	r24, 0x40	; 64
 1da:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURING_GOAL_RPM; //right now this is the only case
 1de:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <ADC_stateMachine>
 1e2:	08 95       	ret

000001e4 <adc_goalRPM_get>:

// void adc_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }

////////////////////////////////////////////////////////////////////////////////////////

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }
 1e4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <goalSpeed_RPM>
 1e8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <goalSpeed_RPM+0x1>
 1ec:	08 95       	ret

000001ee <adc_goalRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
 1ee:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <goalSpeed_RPM+0x1>
 1f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <goalSpeed_RPM>
 1f6:	08 95       	ret

000001f8 <unoPinA4_high>:
#include "grBLDC.h"

void unoPinA4_high(void) { SLOWDOWN_DDR |= SLOWDOWN_MASK; SLOWDOWN_PORT |= SLOWDOWN_MASK; }
 1f8:	3b 9a       	sbi	0x07, 3	; 7
 1fa:	43 9a       	sbi	0x08, 3	; 8
 1fc:	08 95       	ret

000001fe <unoPinA2_high>:
void unoPinA2_high(void) {      PD3_DDR |=      PD3_MASK;      PD3_PORT |=      PD3_MASK; }
 1fe:	53 9a       	sbi	0x0a, 3	; 10
 200:	5b 9a       	sbi	0x0b, 3	; 11
 202:	08 95       	ret

00000204 <unoPinA4_low>:

void unoPinA4_low(void) { SLOWDOWN_PORT &= ~(SLOWDOWN_MASK); }
 204:	43 98       	cbi	0x08, 3	; 8
 206:	08 95       	ret

00000208 <unoPinA2_low>:
 208:	5b 98       	cbi	0x0b, 3	; 11
 20a:	08 95       	ret

0000020c <hall_init>:

void hall_init(void)
{
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 212:	92 e0       	ldi	r25, 0x02	; 2
 214:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 218:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 21c:	08 95       	ret

0000021e <hall_getPosition>:
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 21e:	99 b1       	in	r25, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
 220:	86 b1       	in	r24, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
 222:	29 b1       	in	r18, 0x09	; 9
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 224:	38 2f       	mov	r19, r24
 226:	32 70       	andi	r19, 0x02	; 2
 228:	82 2f       	mov	r24, r18
 22a:	84 70       	andi	r24, 0x04	; 4
 22c:	83 2b       	or	r24, r19
 22e:	96 95       	lsr	r25
 230:	91 70       	andi	r25, 0x01	; 1
 232:	89 2b       	or	r24, r25
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 234:	11 f0       	breq	.+4      	; 0x23a <hall_getPosition+0x1c>
 236:	87 30       	cpi	r24, 0x07	; 7
 238:	51 f4       	brne	.+20     	; 0x24e <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
 23a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <numConsecutiveInvalidStates.2064>
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 23e:	9a 30       	cpi	r25, 0x0A	; 10
 240:	30 f4       	brcc	.+12     	; 0x24e <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
  {
	  //hall states in transition
	  state = state_previous;
 242:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state_previous.2063>
	  numConsecutiveInvalidStates++;
 246:	9f 5f       	subi	r25, 0xFF	; 255
 248:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <numConsecutiveInvalidStates.2064>
 24c:	08 95       	ret
  } 
  else //valid Hall state (or motor is stalled)
  {
	  state_previous = state; //store for next iteration
 24e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state_previous.2063>
	  numConsecutiveInvalidStates = 0;
 252:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <numConsecutiveInvalidStates.2064>
  } 
	  
  return state;
}
 256:	08 95       	ret

00000258 <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC_vect )  //Hall_A & Hall_C share the same interrupt vector byte
{
 258:	1f 92       	push	r1
 25a:	0f 92       	push	r0
 25c:	0f b6       	in	r0, 0x3f	; 63
 25e:	0f 92       	push	r0
 260:	11 24       	eor	r1, r1
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	ef 93       	push	r30
 278:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 27a:	0e 94 0f 01 	call	0x21e	; 0x21e <hall_getPosition>
 27e:	0e 94 c9 01 	call	0x392	; 0x392 <mosfet_commutate>
}
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0f be       	out	0x3f, r0	; 63
 29e:	0f 90       	pop	r0
 2a0:	1f 90       	pop	r1
 2a2:	18 95       	reti

000002a4 <__vector_23>:

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B_vect )
{
 2a4:	1f 92       	push	r1
 2a6:	0f 92       	push	r0
 2a8:	0f b6       	in	r0, 0x3f	; 63
 2aa:	0f 92       	push	r0
 2ac:	11 24       	eor	r1, r1
 2ae:	2f 93       	push	r18
 2b0:	3f 93       	push	r19
 2b2:	4f 93       	push	r20
 2b4:	5f 93       	push	r21
 2b6:	6f 93       	push	r22
 2b8:	7f 93       	push	r23
 2ba:	8f 93       	push	r24
 2bc:	9f 93       	push	r25
 2be:	af 93       	push	r26
 2c0:	bf 93       	push	r27
 2c2:	ef 93       	push	r30
 2c4:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 2c6:	0e 94 0f 01 	call	0x21e	; 0x21e <hall_getPosition>
 2ca:	0e 94 c9 01 	call	0x392	; 0x392 <mosfet_commutate>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 2ce:	31 99       	sbic	0x06, 1	; 6
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <__vector_23+0x4e>

  if(hallB_state == HALL_B_HIGH)
  {
    if(hallB_state_previous == HALL_B_LOW) 
 2d6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <hallB_state_previous.2077>
 2da:	81 11       	cpse	r24, r1
 2dc:	09 c0       	rjmp	.+18     	; 0x2f0 <__vector_23+0x4c>
    {
      //rising edge just occurred on Hall B
      timing_calculateRPM();
 2de:	0e 94 22 03 	call	0x644	; 0x644 <timing_calculateRPM>

      if( timing_measuredRPM_get() > 6000 ) { unoPinA4_high(); }
 2e2:	0e 94 2d 03 	call	0x65a	; 0x65a <timing_measuredRPM_get>
 2e6:	81 37       	cpi	r24, 0x71	; 113
 2e8:	97 41       	sbci	r25, 0x17	; 23
 2ea:	b0 f0       	brcs	.+44     	; 0x318 <__vector_23+0x74>
 2ec:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <unoPinA4_high>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 2f0:	81 e0       	ldi	r24, 0x01	; 1
      if( timing_measuredRPM_get() > 6000 ) { unoPinA4_high(); }
      else                                  { unoPinA4_low();  } //debug
    }
  }

  hallB_state_previous = hallB_state;
 2f2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <hallB_state_previous.2077>
}
 2f6:	ff 91       	pop	r31
 2f8:	ef 91       	pop	r30
 2fa:	bf 91       	pop	r27
 2fc:	af 91       	pop	r26
 2fe:	9f 91       	pop	r25
 300:	8f 91       	pop	r24
 302:	7f 91       	pop	r23
 304:	6f 91       	pop	r22
 306:	5f 91       	pop	r21
 308:	4f 91       	pop	r20
 30a:	3f 91       	pop	r19
 30c:	2f 91       	pop	r18
 30e:	0f 90       	pop	r0
 310:	0f be       	out	0x3f, r0	; 63
 312:	0f 90       	pop	r0
 314:	1f 90       	pop	r1
 316:	18 95       	reti
    {
      //rising edge just occurred on Hall B
      timing_calculateRPM();

      if( timing_measuredRPM_get() > 6000 ) { unoPinA4_high(); }
      else                                  { unoPinA4_low();  } //debug
 318:	0e 94 02 01 	call	0x204	; 0x204 <unoPinA4_low>
 31c:	e9 cf       	rjmp	.-46     	; 0x2f0 <__vector_23+0x4c>

0000031e <main>:
#include "grBLDC.h"

int main(void)
{
  psc_init();
 31e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <psc_init>
  adc_init();
 322:	0e 94 a3 00 	call	0x146	; 0x146 <adc_init>
  motor_init();
 326:	0e 94 08 02 	call	0x410	; 0x410 <motor_init>
  hall_init();
 32a:	0e 94 06 01 	call	0x20c	; 0x20c <hall_init>
  mosfet_init();
 32e:	0e 94 b6 01 	call	0x36c	; 0x36c <mosfet_init>
  a4910_init(); //configure pin to digital output
 332:	0e 94 5d 00 	call	0xba	; 0xba <a4910_init>
  timing_timer0_init();
 336:	0e 94 ef 02 	call	0x5de	; 0x5de <timing_timer0_init>
  timing_timer1_init();
 33a:	0e 94 07 03 	call	0x60e	; 0x60e <timing_timer1_init>

  Start_pll_64_mega(); // Start the 64 MHz PLL
 33e:	86 e0       	ldi	r24, 0x06	; 6
 340:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 342:	09 b4       	in	r0, 0x29	; 41
 344:	00 fe       	sbrs	r0, 0
 346:	fd cf       	rjmp	.-6      	; 0x342 <main+0x24>
  
  a4910_enable(); //enable MOSFET driver
 348:	0e 94 5f 00 	call	0xbe	; 0xbe <a4910_enable>
  motor_run();
 34c:	0e 94 15 02 	call	0x42a	; 0x42a <motor_run>

  sei(); //enable interrupts
 350:	78 94       	sei

  while(1)
  {	  	  
    if (timing_runControlLoop_get() == TRUE)
 352:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <timing_runControlLoop_get>
 356:	81 30       	cpi	r24, 0x01	; 1
 358:	e1 f7       	brne	.-8      	; 0x352 <main+0x34>
    {	
      timing_runControlLoop_set(FALSE); //prevent control loop from running again until timer interrupt occurs
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <timing_runControlLoop_set>
      
      adc_Scheduler(); // Get Current or potentiometer value
 360:	0e 94 da 00 	call	0x1b4	; 0x1b4 <adc_Scheduler>
      //   pid_dutyCycle_calculate();
      //   g_regulation_period = 0;
      // }

      //psc_setDutyCycle( pid_dutyCycle_get() );
      psc_setDutyCycle(255); //debug
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	0e 94 bd 02 	call	0x57a	; 0x57a <psc_setDutyCycle>
 36a:	f3 cf       	rjmp	.-26     	; 0x352 <main+0x34>

0000036c <mosfet_init>:
	// PD0 => UH     PB7 => UL
	// PC0 => VH     PB6 => VL
	// PB0 => WH     PB1 => WL

	// Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
	PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 36c:	85 b1       	in	r24, 0x05	; 5
 36e:	8c 73       	andi	r24, 0x3C	; 60
 370:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<PORTC0);
 372:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~(1<<PORTD0);
 374:	58 98       	cbi	0x0b, 0	; 11

	// Configure FET pins to output
	DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 376:	83 ec       	ldi	r24, 0xC3	; 195
 378:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0);
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0);
 37e:	8a b9       	out	0x0a, r24	; 10
 380:	08 95       	ret

00000382 <mosfet_turnOffAll>:
//////////////////////////////////////////////////////////////////////////////////////////////////

void mosfet_turnOffAll(void)
{
  //POC: PSC output configuration
  POC = ( (0<<POEN0A)|(0<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 382:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |  //0:disconnect PSC outputs 1A & 1B from I/O pins //1:connect PSC output
          (0<<POEN2A)|(0<<POEN2B) ); //0:disconnect PSC outputs 2A & 2B from I/O pins //1:connect PSC output

  PORTB &= ( ~((1<<PORTB7)|(1<<PORTB6)|(1<<PORTB0)|(1<<PORTB1)) ); //Turn off Q2/Q4/Q5/Q6, respectively
 386:	85 b1       	in	r24, 0x05	; 5
 388:	8c 73       	andi	r24, 0x3C	; 60
 38a:	85 b9       	out	0x05, r24	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 38c:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) ); //turn off Q1
 38e:	58 98       	cbi	0x0b, 0	; 11
 390:	08 95       	ret

00000392 <mosfet_commutate>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mosfet_commutate(uint8_t hallState)
{
 392:	cf 93       	push	r28
 394:	c8 2f       	mov	r28, r24
    if ( motor_state_get() == STOPPED ) { mosfet_turnOffAll(); }
 396:	0e 94 05 02 	call	0x40a	; 0x40a <motor_state_get>
 39a:	88 23       	and	r24, r24
 39c:	99 f1       	breq	.+102    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 39e:	0e 94 28 02 	call	0x450	; 0x450 <pid_dutyCycle_get>
 3a2:	0e 94 bd 02 	call	0x57a	; 0x57a <psc_setDutyCycle>

      if(motor_direction_get() == CCW) //JTS2doNow: Sample direction pin (PB3) to determine spindle direction
 3a6:	0e 94 25 02 	call	0x44a	; 0x44a <motor_direction_get>
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	71 f4       	brne	.+28     	; 0x3ca <mosfet_commutate+0x38>
      {
          switch(hallState)
 3ae:	c3 30       	cpi	r28, 0x03	; 3
 3b0:	01 f1       	breq	.+64     	; 0x3f2 <mosfet_commutate+0x60>
 3b2:	28 f4       	brcc	.+10     	; 0x3be <mosfet_commutate+0x2c>
 3b4:	c1 30       	cpi	r28, 0x01	; 1
 3b6:	09 f1       	breq	.+66     	; 0x3fa <mosfet_commutate+0x68>
 3b8:	c2 30       	cpi	r28, 0x02	; 2
 3ba:	e9 f0       	breq	.+58     	; 0x3f6 <mosfet_commutate+0x64>
 3bc:	23 c0       	rjmp	.+70     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3be:	c5 30       	cpi	r28, 0x05	; 5
 3c0:	a1 f0       	breq	.+40     	; 0x3ea <mosfet_commutate+0x58>
 3c2:	a8 f0       	brcs	.+42     	; 0x3ee <mosfet_commutate+0x5c>
 3c4:	c6 30       	cpi	r28, 0x06	; 6
 3c6:	79 f0       	breq	.+30     	; 0x3e6 <mosfet_commutate+0x54>
 3c8:	1d c0       	rjmp	.+58     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
              default: mosfet_turnOffAll(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 3ca:	c3 30       	cpi	r28, 0x03	; 3
 3cc:	81 f0       	breq	.+32     	; 0x3ee <mosfet_commutate+0x5c>
 3ce:	28 f4       	brcc	.+10     	; 0x3da <mosfet_commutate+0x48>
 3d0:	c1 30       	cpi	r28, 0x01	; 1
 3d2:	49 f0       	breq	.+18     	; 0x3e6 <mosfet_commutate+0x54>
 3d4:	c2 30       	cpi	r28, 0x02	; 2
 3d6:	49 f0       	breq	.+18     	; 0x3ea <mosfet_commutate+0x58>
 3d8:	15 c0       	rjmp	.+42     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3da:	c5 30       	cpi	r28, 0x05	; 5
 3dc:	61 f0       	breq	.+24     	; 0x3f6 <mosfet_commutate+0x64>
 3de:	48 f0       	brcs	.+18     	; 0x3f2 <mosfet_commutate+0x60>
 3e0:	c6 30       	cpi	r28, 0x06	; 6
 3e2:	59 f0       	breq	.+22     	; 0x3fa <mosfet_commutate+0x68>
 3e4:	0f c0       	rjmp	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
          {
              case 1: Set_Q1Q6(); break;
 3e6:	81 e2       	ldi	r24, 0x21	; 33
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <mosfet_commutate+0x6a>
              case 2: Set_Q3Q2(); break;
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <mosfet_commutate+0x6a>
              case 3: Set_Q3Q6(); break;
 3ee:	84 e2       	ldi	r24, 0x24	; 36
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <mosfet_commutate+0x6a>
              case 4: Set_Q5Q4(); break;
 3f2:	88 e1       	ldi	r24, 0x18	; 24
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <mosfet_commutate+0x6a>
              case 5: Set_Q1Q4(); break;
 3f6:	89 e0       	ldi	r24, 0x09	; 9
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <mosfet_commutate+0x6a>
              case 6: Set_Q5Q2(); break;
 3fa:	82 e1       	ldi	r24, 0x12	; 18
 3fc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: mosfet_turnOffAll(); break;
          }
      }
    }
}
 400:	cf 91       	pop	r28
 402:	08 95       	ret
 404:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: mosfet_turnOffAll(); break;
 406:	0c 94 c1 01 	jmp	0x382	; 0x382 <mosfet_turnOffAll>

0000040a <motor_state_get>:

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void    motor_direction_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 40a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <motorStatus>
 40e:	08 95       	ret

00000410 <motor_init>:
 410:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <motorStatus>
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <motorDirection>
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <adc_goalRPM_set>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0c 94 32 03 	jmp	0x664	; 0x664 <timing_measuredRPM_set>

0000042a <motor_run>:
 42a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 42e:	80 ff       	sbrs	r24, 0
 430:	0e 94 7f 02 	call	0x4fe	; 0x4fe <psc_init>
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <motorStatus>
 43a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <pid_dutyCycle_calculate>
 43e:	0e 94 bd 02 	call	0x57a	; 0x57a <psc_setDutyCycle>
 442:	0e 94 0f 01 	call	0x21e	; 0x21e <hall_getPosition>
 446:	0c 94 c9 01 	jmp	0x392	; 0x392 <mosfet_commutate>

0000044a <motor_direction_get>:
 44a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorDirection>
 44e:	08 95       	ret

00000450 <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 450:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle>
 454:	08 95       	ret

00000456 <pid_calculate_integral>:
 456:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <speed_integrator.2066>
 45a:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 45e:	82 0f       	add	r24, r18
 460:	93 1f       	adc	r25, r19
 462:	8f 3f       	cpi	r24, 0xFF	; 255
 464:	91 05       	cpc	r25, r1
 466:	19 f0       	breq	.+6      	; 0x46e <pid_calculate_integral+0x18>
 468:	14 f0       	brlt	.+4      	; 0x46e <pid_calculate_integral+0x18>
 46a:	8f ef       	ldi	r24, 0xFF	; 255
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <speed_integrator.2066+0x1>
 472:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <speed_integrator.2066>
 476:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <speed_integrator.2066>
 47a:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	9f 4f       	sbci	r25, 0xFF	; 255
 482:	34 f4       	brge	.+12     	; 0x490 <pid_calculate_integral+0x3a>
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	9f ef       	ldi	r25, 0xFF	; 255
 488:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <speed_integrator.2066+0x1>
 48c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <speed_integrator.2066>
 490:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <speed_integrator.2066>
 494:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 498:	2e e1       	ldi	r18, 0x1E	; 30
 49a:	ac 01       	movw	r20, r24
 49c:	24 9f       	mul	r18, r20
 49e:	c0 01       	movw	r24, r0
 4a0:	25 9f       	mul	r18, r21
 4a2:	90 0d       	add	r25, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	08 95       	ret

000004a8 <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
  int16_t summedPID = 0;
  int16_t speedError = adc_goalRPM_get() - timing_measuredRPM_get();
 4ac:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <adc_goalRPM_get>
 4b0:	ec 01       	movw	r28, r24
 4b2:	0e 94 2d 03 	call	0x65a	; 0x65a <timing_measuredRPM_get>
 4b6:	c8 1b       	sub	r28, r24
 4b8:	d9 0b       	sbc	r29, r25

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 4ba:	ce 01       	movw	r24, r28
 4bc:	0e 94 2b 02 	call	0x456	; 0x456 <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
  summedPID = summedPID >> K_SPEED_SCALAR;
 4c0:	4e e1       	ldi	r20, 0x1E	; 30
 4c2:	4c 9f       	mul	r20, r28
 4c4:	90 01       	movw	r18, r0
 4c6:	4d 9f       	mul	r20, r29
 4c8:	30 0d       	add	r19, r0
 4ca:	11 24       	eor	r1, r1
 4cc:	82 0f       	add	r24, r18
 4ce:	93 1f       	adc	r25, r19
 4d0:	24 e0       	ldi	r18, 0x04	; 4
 4d2:	95 95       	asr	r25
 4d4:	87 95       	ror	r24
 4d6:	2a 95       	dec	r18
 4d8:	e1 f7       	brne	.-8      	; 0x4d2 <pid_dutyCycle_calculate+0x2a>

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 4da:	8f 3f       	cpi	r24, 0xFF	; 255
 4dc:	91 05       	cpc	r25, r1
 4de:	14 f0       	brlt	.+4      	; 0x4e4 <pid_dutyCycle_calculate+0x3c>
 4e0:	8f ef       	ldi	r24, 0xFF	; 255
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <pid_dutyCycle_calculate+0x48>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 4e4:	18 16       	cp	r1, r24
 4e6:	19 06       	cpc	r1, r25
 4e8:	1c f0       	brlt	.+6      	; 0x4f0 <pid_dutyCycle_calculate+0x48>
 4ea:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dutyCycle>
 4ee:	02 c0       	rjmp	.+4      	; 0x4f4 <pid_dutyCycle_calculate+0x4c>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 4f0:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <dutyCycle>

  return dutyCycle;
 4f4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle>
 4f8:	df 91       	pop	r29
 4fa:	cf 91       	pop	r28
 4fc:	08 95       	ret

000004fe <psc_init>:
   //SA_VAL: When PSC counter is less    than this value, high FET is enabled
   //SB_VAL: When PSC counter is greater than this value, low  FET is enabled
   //The difference between SA and SB sets the dead time between phases 
   //RA_VAL: Not used in centered mode //can be used to synchronize ADC
   //RB_VAL: Not used in centered mode 
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 4fe:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 502:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 506:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 510:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 514:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 518:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 51c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 520:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 524:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 528:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 52c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 530:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 534:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 538:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 53c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 540:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 544:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL); //max value 12b free-running PSC counter counts up to
 548:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 54c:	8e ef       	ldi	r24, 0xFE	; 254
 54e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 552:	84 e1       	ldi	r24, 0x14	; 20
 554:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 558:	88 ed       	ldi	r24, 0xD8	; 216
 55a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION); //PSC input is ignored

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 55e:	98 ef       	ldi	r25, 0xF8	; 248
 560:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 564:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP); //PSC interrupt flag register
 568:	8f e0       	ldi	r24, 0x0F	; 15
 56a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

   PIM = (0<<PEVE1)|(0<<PEVE1)|(0<<PEVE2)|(0<<PEOPE); //PSC interrupt mask register
 56e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
                         //PEVE0 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE1 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE2 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEOPE high: PSC generates interrupt when end of cycle reached //low: no interrupt

   Psc_run();
 572:	81 e2       	ldi	r24, 0x21	; 33
 574:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 578:	08 95       	ret

0000057a <psc_setDutyCycle>:
  #if(CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 57a:	e5 eb       	ldi	r30, 0xB5	; 181
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	94 e3       	ldi	r25, 0x34	; 52
 580:	90 83       	st	Z, r25
  
  //Psc_set_module_n(A_SA_VAL, A_RA_VAL, A_SB_VAL);

  //while all six PSC phases are chopping simultaneously, only two phases are routed to output pins at the same time //see mosfet_commutate()
  #if (CURRENT_DECAY == FAST_DECAY)
    Psc_set_module_A(duty,A_RA_VAL,duty);
 582:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 586:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 58a:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 594:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 598:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,duty);
 59c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 5a0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 5a4:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 5a8:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 5ac:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 5b0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,duty);
 5b4:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 5b8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 5bc:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 5c0:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 5c4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 5c8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    Psc_set_module_A(duty,A_RA_VAL,0);
    Psc_set_module_B(duty,B_RA_VAL,0);
    Psc_set_module_C(duty,C_RA_VAL,0);
  #endif
   
  Psc_unlock();
 5cc:	84 e1       	ldi	r24, 0x14	; 20
 5ce:	80 83       	st	Z, r24
 5d0:	08 95       	ret

000005d2 <timing_runControlLoop_get>:

uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
 5d2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <runControlLoop>
 5d6:	08 95       	ret

000005d8 <timing_runControlLoop_set>:
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 5d8:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <runControlLoop>
 5dc:	08 95       	ret

000005de <timing_timer0_init>:
//Configure 8b Timer0
//counter increments every 4 microseconds
//interrupt occurs when timer value hit OCR0A
void timing_timer0_init(void)
{
  TCCR0A = (1<<WGM01); //set timer mode=CTC, don't connect timer to any output pins
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1<<CS01)|(1<<CS00); //CPU/64 prescaler
 5e2:	93 e0       	ldi	r25, 0x03	; 3
 5e4:	95 bd       	out	0x25, r25	; 37
  OCR0A  = 7; // f_interrupt = 1/(16MHz/64DIV)*(OCR0A+1) //OCR0A=7: 32us tick (512 clocks @ 16 MHz)
 5e6:	97 e0       	ldi	r25, 0x07	; 7
 5e8:	97 bd       	out	0x27, r25	; 39
  TIMSK0 = (1<<OCIE0A); // Output compare A Match interrupt Enable
 5ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 5ee:	08 95       	ret

000005f0 <__vector_15>:

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 5f0:	1f 92       	push	r1
 5f2:	0f 92       	push	r0
 5f4:	0f b6       	in	r0, 0x3f	; 63
 5f6:	0f 92       	push	r0
 5f8:	11 24       	eor	r1, r1
 5fa:	8f 93       	push	r24
uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <runControlLoop>

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 602:	8f 91       	pop	r24
 604:	0f 90       	pop	r0
 606:	0f be       	out	0x3f, r0	; 63
 608:	0f 90       	pop	r0
 60a:	1f 90       	pop	r1
 60c:	18 95       	reti

0000060e <timing_timer1_init>:
//configure 16b Timer1
//counter increments every 4 microseconds
//used to calculate RPM
void timing_timer1_init(void)
{
  TCCR1A = 0; //set timer mode=normal, don't connect timer to any output pins
 60e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = (0<<CS12)|(1<<CS11)|(1<<CS10); // prescale Timer0 clock to CPU/64 prescaler
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TIMSK1 = (1<<TOIE1); //generate interrupt each time an overflow occurs (every 4.096 ms, unless the hall state has changed)
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 61e:	08 95       	ret

00000620 <__vector_14>:
//used to determine actual spindle RPM
//Timer1 increments every 4us ( 1/[16MHz/64] )
//Timer1 overflow interrupt occurs if no HallB rising edge occurs after ~262 milliseconds (2^16 * 4us) //HallB interrupt resets TCNT1 to zero)
//The value on Timer1 is the time between each Hall_B rising edge
ISR(TIMER1_OVF_vect)
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
  //timer1 timed out
  TCNT1=0x00; //set Timer1 value to 0
 62a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 62e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 632:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <motorRPM_measured+0x1>
 636:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <motorRPM_measured>
{
  //timer1 timed out
  TCNT1=0x00; //set Timer1 value to 0
  
  timing_measuredRPM_set(0); //motor isn't spinning
}
 63a:	0f 90       	pop	r0
 63c:	0f be       	out	0x3f, r0	; 63
 63e:	0f 90       	pop	r0
 640:	1f 90       	pop	r1
 642:	18 95       	reti

00000644 <timing_calculateRPM>:

////////////////////////////////////////////////////////////////////////////////////////

inline void timing_calculateRPM(void)
{
  uint16_t timerCount = TCNT1; //retrive 16b timer value
 644:	e4 e8       	ldi	r30, 0x84	; 132
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	91 81       	ldd	r25, Z+1	; 0x01
  TCNT1 = 0x00; //reset Timer 1 ASAP (to minimize jitter)
 64c:	11 82       	std	Z+1, r1	; 0x01
 64e:	10 82       	st	Z, r1

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 650:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <motorRPM_measured+0x1>
 654:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <motorRPM_measured>
 658:	08 95       	ret

0000065a <timing_measuredRPM_get>:
  #endif
}

////////////////////////////////////////////////////////////////////////////////////////

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }
 65a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorRPM_measured>
 65e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <motorRPM_measured+0x1>
 662:	08 95       	ret

00000664 <timing_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 664:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <motorRPM_measured+0x1>
 668:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <motorRPM_measured>
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
