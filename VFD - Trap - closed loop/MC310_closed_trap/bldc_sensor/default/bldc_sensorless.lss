
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800102  00800102  00000716  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000716  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000250  00000000  00000000  00000788  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197d  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011b1  00000000  00000000  00002355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea7  00000000  00000000  00003506  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000049c  00000000  00000000  000043b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a19  00000000  00000000  0000484c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c1  00000000  00000000  00005265  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005826  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 08 03 	jmp	0x610	; 0x610 <__vector_14>
  3c:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <__vector_23>
  60:	0c 94 31 01 	jmp	0x262	; 0x262 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 bb 00 	jmp	0x176	; 0x176 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e8       	ldi	r30, 0x80	; 128
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 31       	cpi	r26, 0x12	; 18
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 84 01 	call	0x308	; 0x308 <main>
  b2:	0c 94 3e 03 	jmp	0x67c	; 0x67c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <a4910_init>:

void a4910_init(void)   { (DDRB |= (1<<DDB4)); } //set pin to output

//////////////////////////////////////////////////////////////////////////////////////////////////

void a4910_disable(void) { (PORTB &= ~(1<<PORTB4)); } //set RESETn pin low
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <a4910_enable>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <adc_init>:
}

//////////////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: We shouldn't be integrating inside these functions... do it wherever they're called
uint16_t adc_measuredCurrent_get(void) { return (mci_measured_current >> 6); } //mci_measured_current/64
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 68       	ori	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	cc e7       	ldi	r28, 0x7C	; 124
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	88 81       	ld	r24, Y
  e2:	80 62       	ori	r24, 0x20	; 32
  e4:	88 83       	st	Y, r24
  e6:	ab e7       	ldi	r26, 0x7B	; 123
  e8:	b0 e0       	ldi	r27, 0x00	; 0
  ea:	8c 91       	ld	r24, X
  ec:	80 68       	ori	r24, 0x80	; 128
  ee:	8c 93       	st	X, r24
  f0:	80 81       	ld	r24, Z
  f2:	88 60       	ori	r24, 0x08	; 8
  f4:	80 83       	st	Z, r24
  f6:	8c 91       	ld	r24, X
  f8:	8f 7b       	andi	r24, 0xBF	; 191
  fa:	8c 93       	st	X, r24
  fc:	8c 91       	ld	r24, X
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	8c 93       	st	X, r24
 102:	88 81       	ld	r24, Y
 104:	8f 73       	andi	r24, 0x3F	; 63
 106:	88 83       	st	Y, r24
 108:	80 ec       	ldi	r24, 0xC0	; 192
 10a:	88 83       	st	Y, r24
 10c:	8a e8       	ldi	r24, 0x8A	; 138
 10e:	80 83       	st	Z, r24
 110:	80 e8       	ldi	r24, 0x80	; 128
 112:	8c 93       	st	X, r24
 114:	80 81       	ld	r24, Z
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	80 83       	st	Z, r24
 11a:	80 81       	ld	r24, Z
 11c:	82 60       	ori	r24, 0x02	; 2
 11e:	80 83       	st	Z, r24
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <adc_measuredCurrent_integrate>:

void adc_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }
 126:	fc 01       	movw	r30, r24
 128:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <mci_measured_current>
 12c:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <mci_measured_current+0x1>
 130:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <mci_measured_current+0x2>
 134:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <mci_measured_current+0x3>
 138:	af e3       	ldi	r26, 0x3F	; 63
 13a:	b0 e0       	ldi	r27, 0x00	; 0
 13c:	0e 94 24 03 	call	0x648	; 0x648 <__muluhisi3>
 140:	26 e0       	ldi	r18, 0x06	; 6
 142:	ee 0f       	add	r30, r30
 144:	ff 1f       	adc	r31, r31
 146:	2a 95       	dec	r18
 148:	e1 f7       	brne	.-8      	; 0x142 <adc_measuredCurrent_integrate+0x1c>
 14a:	dc 01       	movw	r26, r24
 14c:	cb 01       	movw	r24, r22
 14e:	8e 0f       	add	r24, r30
 150:	9f 1f       	adc	r25, r31
 152:	a1 1d       	adc	r26, r1
 154:	b1 1d       	adc	r27, r1
 156:	36 e0       	ldi	r19, 0x06	; 6
 158:	b6 95       	lsr	r27
 15a:	a7 95       	ror	r26
 15c:	97 95       	ror	r25
 15e:	87 95       	ror	r24
 160:	3a 95       	dec	r19
 162:	d1 f7       	brne	.-12     	; 0x158 <adc_measuredCurrent_integrate+0x32>
 164:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <mci_measured_current>
 168:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <mci_measured_current+0x1>
 16c:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <mci_measured_current+0x2>
 170:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <mci_measured_current+0x3>
 174:	08 95       	ret

00000176 <__vector_27>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Interrupt generated each time ADC conversion finishes
ISR(ADC_vect)
{
 176:	1f 92       	push	r1
 178:	0f 92       	push	r0
 17a:	0f b6       	in	r0, 0x3f	; 63
 17c:	0f 92       	push	r0
 17e:	11 24       	eor	r1, r1
 180:	2f 93       	push	r18
 182:	3f 93       	push	r19
 184:	4f 93       	push	r20
 186:	5f 93       	push	r21
 188:	6f 93       	push	r22
 18a:	7f 93       	push	r23
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	af 93       	push	r26
 192:	bf 93       	push	r27
 194:	ef 93       	push	r30
 196:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
 198:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 19c:	80 7e       	andi	r24, 0xE0	; 224
 19e:	82 61       	ori	r24, 0x12	; 18
 1a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  if(ADC_stateMachine == ADC_MEASURE_REQUESTED_RPM) { adc_goalRPM_set(Adc_get_8_bits_result()); }
 1a4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ADC_stateMachine>
 1a8:	81 30       	cpi	r24, 0x01	; 1
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <__vector_27+0x40>
 1ac:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
void adc_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }

////////////////////////////////////////////////////////////////////////////////////////

uint8_t adc_goalRPM_get(void) { return goalRPM_ADC_value; }
void    adc_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }
 1b0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <goalRPM_ADC_value>
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <__vector_27+0x5a>
//Interrupt generated each time ADC conversion finishes
ISR(ADC_vect)
{
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
  if(ADC_stateMachine == ADC_MEASURE_REQUESTED_RPM) { adc_goalRPM_set(Adc_get_8_bits_result()); }
  if(ADC_stateMachine == ADC_MEASURE_CURRENT) { adc_measuredCurrent_integrate(Adc_get_10_bits_result()); }
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	59 f4       	brne	.+22     	; 0x1d0 <__vector_27+0x5a>
 1ba:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 1be:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	98 2f       	mov	r25, r24
 1c6:	88 27       	eor	r24, r24
 1c8:	82 0f       	add	r24, r18
 1ca:	91 1d       	adc	r25, r1
 1cc:	0e 94 93 00 	call	0x126	; 0x126 <adc_measuredCurrent_integrate>
  ADC_hardwareStatus = ADCFREE;
 1d0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <adc_goalRPM_get>:

void adc_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }

////////////////////////////////////////////////////////////////////////////////////////

uint8_t adc_goalRPM_get(void) { return goalRPM_ADC_value; }
 1f6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <goalRPM_ADC_value>
 1fa:	08 95       	ret

000001fc <adc_goalRPM_set>:
void    adc_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }
 1fc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <goalRPM_ADC_value>
 200:	08 95       	ret

00000202 <unoPinA4_high>:
#include "grBLDC.h"

void unoPinA4_high(void) { SLOWDOWN_DDR |= SLOWDOWN_MASK; SLOWDOWN_PORT |= SLOWDOWN_MASK; }
 202:	3b 9a       	sbi	0x07, 3	; 7
 204:	43 9a       	sbi	0x08, 3	; 8
 206:	08 95       	ret

00000208 <unoPinA2_high>:
void unoPinA2_high(void) {      PD3_DDR |=      PD3_MASK;      PD3_PORT |=      PD3_MASK; }
 208:	53 9a       	sbi	0x0a, 3	; 10
 20a:	5b 9a       	sbi	0x0b, 3	; 11
 20c:	08 95       	ret

0000020e <unoPinA4_low>:

void unoPinA4_low(void) { SLOWDOWN_PORT &= ~(SLOWDOWN_MASK); }
 20e:	43 98       	cbi	0x08, 3	; 8
 210:	08 95       	ret

00000212 <unoPinA2_low>:
 212:	5b 98       	cbi	0x0b, 3	; 11
 214:	08 95       	ret

00000216 <hall_init>:

void hall_init(void)
{
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 21c:	92 e0       	ldi	r25, 0x02	; 2
 21e:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 222:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 226:	08 95       	ret

00000228 <hall_getPosition>:
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 228:	99 b1       	in	r25, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
 22a:	86 b1       	in	r24, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
 22c:	29 b1       	in	r18, 0x09	; 9
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 22e:	38 2f       	mov	r19, r24
 230:	32 70       	andi	r19, 0x02	; 2
 232:	82 2f       	mov	r24, r18
 234:	84 70       	andi	r24, 0x04	; 4
 236:	83 2b       	or	r24, r19
 238:	96 95       	lsr	r25
 23a:	91 70       	andi	r25, 0x01	; 1
 23c:	89 2b       	or	r24, r25
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 23e:	11 f0       	breq	.+4      	; 0x244 <hall_getPosition+0x1c>
 240:	87 30       	cpi	r24, 0x07	; 7
 242:	51 f4       	brne	.+20     	; 0x258 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
 244:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <numConsecutiveInvalidStates.2068>
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 248:	9a 30       	cpi	r25, 0x0A	; 10
 24a:	30 f4       	brcc	.+12     	; 0x258 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
  {
	  //hall states in transition
	  state = state_previous;
 24c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state_previous.2067>
	  numConsecutiveInvalidStates++;
 250:	9f 5f       	subi	r25, 0xFF	; 255
 252:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <numConsecutiveInvalidStates.2068>
 256:	08 95       	ret
  } 
  else //valid Hall state (or motor is stalled)
  {
	  state_previous = state; //store for next iteration
 258:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_previous.2067>
	  numConsecutiveInvalidStates = 0;
 25c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <numConsecutiveInvalidStates.2068>
  } 
	  
  return state;
}
 260:	08 95       	ret

00000262 <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC_vect )  //Hall_A & Hall_C share the same interrupt vector byte
{
 262:	1f 92       	push	r1
 264:	0f 92       	push	r0
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	0f 92       	push	r0
 26a:	11 24       	eor	r1, r1
 26c:	2f 93       	push	r18
 26e:	3f 93       	push	r19
 270:	4f 93       	push	r20
 272:	5f 93       	push	r21
 274:	6f 93       	push	r22
 276:	7f 93       	push	r23
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
 27c:	af 93       	push	r26
 27e:	bf 93       	push	r27
 280:	ef 93       	push	r30
 282:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 284:	0e 94 14 01 	call	0x228	; 0x228 <hall_getPosition>
 288:	0e 94 c1 01 	call	0x382	; 0x382 <mosfet_commutate>
}
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	bf 91       	pop	r27
 292:	af 91       	pop	r26
 294:	9f 91       	pop	r25
 296:	8f 91       	pop	r24
 298:	7f 91       	pop	r23
 29a:	6f 91       	pop	r22
 29c:	5f 91       	pop	r21
 29e:	4f 91       	pop	r20
 2a0:	3f 91       	pop	r19
 2a2:	2f 91       	pop	r18
 2a4:	0f 90       	pop	r0
 2a6:	0f be       	out	0x3f, r0	; 63
 2a8:	0f 90       	pop	r0
 2aa:	1f 90       	pop	r1
 2ac:	18 95       	reti

000002ae <__vector_23>:

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B_vect )
{
 2ae:	1f 92       	push	r1
 2b0:	0f 92       	push	r0
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	2f 93       	push	r18
 2ba:	3f 93       	push	r19
 2bc:	4f 93       	push	r20
 2be:	5f 93       	push	r21
 2c0:	6f 93       	push	r22
 2c2:	7f 93       	push	r23
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	af 93       	push	r26
 2ca:	bf 93       	push	r27
 2cc:	ef 93       	push	r30
 2ce:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 2d0:	0e 94 14 01 	call	0x228	; 0x228 <hall_getPosition>
 2d4:	0e 94 c1 01 	call	0x382	; 0x382 <mosfet_commutate>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 2d8:	31 9b       	sbis	0x06, 1	; 6
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <__vector_23+0x34>
  else                    { hallB_state = HALL_B_LOW;  }

  if(hallB_state == HALL_B_HIGH)
  {
    unoPinA4_high();
 2dc:	0e 94 01 01 	call	0x202	; 0x202 <unoPinA4_high>
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__vector_23+0x38>
    }
  }

  else //hallB_state == HALL_B_LOW
  {
    unoPinA4_low();
 2e2:	0e 94 07 01 	call	0x20e	; 0x20e <unoPinA4_low>
  }

  hallB_state_previous = hallB_state;
}
 2e6:	ff 91       	pop	r31
 2e8:	ef 91       	pop	r30
 2ea:	bf 91       	pop	r27
 2ec:	af 91       	pop	r26
 2ee:	9f 91       	pop	r25
 2f0:	8f 91       	pop	r24
 2f2:	7f 91       	pop	r23
 2f4:	6f 91       	pop	r22
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <main>:
#include "grBLDC.h"

int main(void)
{
  psc_init();
 308:	0e 94 77 02 	call	0x4ee	; 0x4ee <psc_init>
  adc_init();
 30c:	0e 94 61 00 	call	0xc2	; 0xc2 <adc_init>
  motor_init();
 310:	0e 94 00 02 	call	0x400	; 0x400 <motor_init>
  hall_init();
 314:	0e 94 0b 01 	call	0x216	; 0x216 <hall_init>
  mosfet_init();
 318:	0e 94 ae 01 	call	0x35c	; 0x35c <mosfet_init>
  a4910_init(); //configure pin to digital output
 31c:	0e 94 5d 00 	call	0xba	; 0xba <a4910_init>
  timing_timer0_init();
 320:	0e 94 e7 02 	call	0x5ce	; 0x5ce <timing_timer0_init>
  timing_timer1_init();
 324:	0e 94 ff 02 	call	0x5fe	; 0x5fe <timing_timer1_init>

  Start_pll_64_mega(); // Start the 64 MHz PLL
 328:	86 e0       	ldi	r24, 0x06	; 6
 32a:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 32c:	09 b4       	in	r0, 0x29	; 41
 32e:	00 fe       	sbrs	r0, 0
 330:	fd cf       	rjmp	.-6      	; 0x32c <main+0x24>
  
  a4910_enable(); //enable MOSFET driver
 332:	0e 94 5f 00 	call	0xbe	; 0xbe <a4910_enable>
  motor_run();
 336:	0e 94 0c 02 	call	0x418	; 0x418 <motor_run>

  sei(); //enable interrupts
 33a:	78 94       	sei
  
  //adc_goalRPM_set(255); //debug

  while(1)
  {	  	  
    if (timing_runControlLoop_get() == TRUE)
 33c:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <timing_runControlLoop_get>
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	49 f4       	brne	.+18     	; 0x356 <main+0x4e>
    {	
      unoPinA2_high();
 344:	0e 94 04 01 	call	0x208	; 0x208 <unoPinA2_high>
      timing_runControlLoop_set(FALSE); //prevent control loop from running again until timer interrupt occurs
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <timing_runControlLoop_set>
      //   pid_dutyCycle_calculate();
      //   g_regulation_period = 0;
      // }

      //psc_setDutyCycle( pid_dutyCycle_get() );
	  psc_setDutyCycle(255); //debug
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	0e 94 b5 02 	call	0x56a	; 0x56a <psc_setDutyCycle>
 354:	f3 cf       	rjmp	.-26     	; 0x33c <main+0x34>
	  
      //mc_inrush_task();       // manage the inrush current
    }
    else
    {
      unoPinA2_low();
 356:	0e 94 09 01 	call	0x212	; 0x212 <unoPinA2_low>
 35a:	f0 cf       	rjmp	.-32     	; 0x33c <main+0x34>

0000035c <mosfet_init>:
	// PD0 => UH     PB7 => UL
	// PC0 => VH     PB6 => VL
	// PB0 => WH     PB1 => WL

	// Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
	PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 35c:	85 b1       	in	r24, 0x05	; 5
 35e:	8c 73       	andi	r24, 0x3C	; 60
 360:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<PORTC0);
 362:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~(1<<PORTD0);
 364:	58 98       	cbi	0x0b, 0	; 11

	// Configure FET pins to output
	DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 366:	83 ec       	ldi	r24, 0xC3	; 195
 368:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0);
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0);
 36e:	8a b9       	out	0x0a, r24	; 10
 370:	08 95       	ret

00000372 <mosfet_turnOffAll>:
//////////////////////////////////////////////////////////////////////////////////////////////////

void mosfet_turnOffAll(void)
{
  //POC: PSC output configuration
  POC = ( (0<<POEN0A)|(0<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 372:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |  //0:disconnect PSC outputs 1A & 1B from I/O pins //1:connect PSC output
          (0<<POEN2A)|(0<<POEN2B) ); //0:disconnect PSC outputs 2A & 2B from I/O pins //1:connect PSC output

  PORTB &= ( ~((1<<PORTB7)|(1<<PORTB6)|(1<<PORTB0)|(1<<PORTB1)) ); //Turn off Q2/Q4/Q5/Q6, respectively
 376:	85 b1       	in	r24, 0x05	; 5
 378:	8c 73       	andi	r24, 0x3C	; 60
 37a:	85 b9       	out	0x05, r24	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 37c:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) ); //turn off Q1
 37e:	58 98       	cbi	0x0b, 0	; 11
 380:	08 95       	ret

00000382 <mosfet_commutate>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mosfet_commutate(uint8_t hallState)
{
 382:	cf 93       	push	r28
 384:	c8 2f       	mov	r28, r24
    if ( motor_state_get() == STOPPED ) { mosfet_turnOffAll(); }
 386:	0e 94 fd 01 	call	0x3fa	; 0x3fa <motor_state_get>
 38a:	88 23       	and	r24, r24
 38c:	99 f1       	breq	.+102    	; 0x3f4 <mosfet_commutate+0x72>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 38e:	0e 94 1f 02 	call	0x43e	; 0x43e <pid_dutyCycle_get>
 392:	0e 94 b5 02 	call	0x56a	; 0x56a <psc_setDutyCycle>

      if(motor_direction_get() == CCW) //JTS2doNow: Sample direction pin (PB3) to determine spindle direction
 396:	0e 94 1c 02 	call	0x438	; 0x438 <motor_direction_get>
 39a:	81 30       	cpi	r24, 0x01	; 1
 39c:	71 f4       	brne	.+28     	; 0x3ba <mosfet_commutate+0x38>
      {
          switch(hallState)
 39e:	c3 30       	cpi	r28, 0x03	; 3
 3a0:	01 f1       	breq	.+64     	; 0x3e2 <mosfet_commutate+0x60>
 3a2:	28 f4       	brcc	.+10     	; 0x3ae <mosfet_commutate+0x2c>
 3a4:	c1 30       	cpi	r28, 0x01	; 1
 3a6:	09 f1       	breq	.+66     	; 0x3ea <mosfet_commutate+0x68>
 3a8:	c2 30       	cpi	r28, 0x02	; 2
 3aa:	e9 f0       	breq	.+58     	; 0x3e6 <mosfet_commutate+0x64>
 3ac:	23 c0       	rjmp	.+70     	; 0x3f4 <mosfet_commutate+0x72>
 3ae:	c5 30       	cpi	r28, 0x05	; 5
 3b0:	a1 f0       	breq	.+40     	; 0x3da <mosfet_commutate+0x58>
 3b2:	a8 f0       	brcs	.+42     	; 0x3de <mosfet_commutate+0x5c>
 3b4:	c6 30       	cpi	r28, 0x06	; 6
 3b6:	79 f0       	breq	.+30     	; 0x3d6 <mosfet_commutate+0x54>
 3b8:	1d c0       	rjmp	.+58     	; 0x3f4 <mosfet_commutate+0x72>
              default: mosfet_turnOffAll(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 3ba:	c3 30       	cpi	r28, 0x03	; 3
 3bc:	81 f0       	breq	.+32     	; 0x3de <mosfet_commutate+0x5c>
 3be:	28 f4       	brcc	.+10     	; 0x3ca <mosfet_commutate+0x48>
 3c0:	c1 30       	cpi	r28, 0x01	; 1
 3c2:	49 f0       	breq	.+18     	; 0x3d6 <mosfet_commutate+0x54>
 3c4:	c2 30       	cpi	r28, 0x02	; 2
 3c6:	49 f0       	breq	.+18     	; 0x3da <mosfet_commutate+0x58>
 3c8:	15 c0       	rjmp	.+42     	; 0x3f4 <mosfet_commutate+0x72>
 3ca:	c5 30       	cpi	r28, 0x05	; 5
 3cc:	61 f0       	breq	.+24     	; 0x3e6 <mosfet_commutate+0x64>
 3ce:	48 f0       	brcs	.+18     	; 0x3e2 <mosfet_commutate+0x60>
 3d0:	c6 30       	cpi	r28, 0x06	; 6
 3d2:	59 f0       	breq	.+22     	; 0x3ea <mosfet_commutate+0x68>
 3d4:	0f c0       	rjmp	.+30     	; 0x3f4 <mosfet_commutate+0x72>
          {
              case 1: Set_Q1Q6(); break;
 3d6:	81 e2       	ldi	r24, 0x21	; 33
 3d8:	09 c0       	rjmp	.+18     	; 0x3ec <mosfet_commutate+0x6a>
              case 2: Set_Q3Q2(); break;
 3da:	86 e0       	ldi	r24, 0x06	; 6
 3dc:	07 c0       	rjmp	.+14     	; 0x3ec <mosfet_commutate+0x6a>
              case 3: Set_Q3Q6(); break;
 3de:	84 e2       	ldi	r24, 0x24	; 36
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <mosfet_commutate+0x6a>
              case 4: Set_Q5Q4(); break;
 3e2:	88 e1       	ldi	r24, 0x18	; 24
 3e4:	03 c0       	rjmp	.+6      	; 0x3ec <mosfet_commutate+0x6a>
              case 5: Set_Q1Q4(); break;
 3e6:	89 e0       	ldi	r24, 0x09	; 9
 3e8:	01 c0       	rjmp	.+2      	; 0x3ec <mosfet_commutate+0x6a>
              case 6: Set_Q5Q2(); break;
 3ea:	82 e1       	ldi	r24, 0x12	; 18
 3ec:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: mosfet_turnOffAll(); break;
          }
      }
    }
}
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret
 3f4:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: mosfet_turnOffAll(); break;
 3f6:	0c 94 b9 01 	jmp	0x372	; 0x372 <mosfet_turnOffAll>

000003fa <motor_state_get>:

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void    motor_direction_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 3fa:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <motorStatus>
 3fe:	08 95       	ret

00000400 <motor_init>:
 400:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <motorStatus>
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <adc_goalRPM_set>
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	0c 94 1a 03 	jmp	0x634	; 0x634 <timing_measuredRPM_set>

00000418 <motor_run>:
 418:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 41c:	80 ff       	sbrs	r24, 0
 41e:	0e 94 77 02 	call	0x4ee	; 0x4ee <psc_init>
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <motorStatus>
 428:	0e 94 4b 02 	call	0x496	; 0x496 <pid_dutyCycle_calculate>
 42c:	0e 94 b5 02 	call	0x56a	; 0x56a <psc_setDutyCycle>
 430:	0e 94 14 01 	call	0x228	; 0x228 <hall_getPosition>
 434:	0c 94 c1 01 	jmp	0x382	; 0x382 <mosfet_commutate>

00000438 <motor_direction_get>:
 438:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 43c:	08 95       	ret

0000043e <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 43e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dutyCycle>
 442:	08 95       	ret

00000444 <pid_calculate_integral>:
 444:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <speed_integrator.2070>
 448:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <speed_integrator.2070+0x1>
 44c:	82 0f       	add	r24, r18
 44e:	93 1f       	adc	r25, r19
 450:	8f 3f       	cpi	r24, 0xFF	; 255
 452:	91 05       	cpc	r25, r1
 454:	19 f0       	breq	.+6      	; 0x45c <pid_calculate_integral+0x18>
 456:	14 f0       	brlt	.+4      	; 0x45c <pid_calculate_integral+0x18>
 458:	8f ef       	ldi	r24, 0xFF	; 255
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <speed_integrator.2070+0x1>
 460:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <speed_integrator.2070>
 464:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <speed_integrator.2070>
 468:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <speed_integrator.2070+0x1>
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	9f 4f       	sbci	r25, 0xFF	; 255
 470:	34 f4       	brge	.+12     	; 0x47e <pid_calculate_integral+0x3a>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	9f ef       	ldi	r25, 0xFF	; 255
 476:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <speed_integrator.2070+0x1>
 47a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <speed_integrator.2070>
 47e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <speed_integrator.2070>
 482:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <speed_integrator.2070+0x1>
 486:	2e e1       	ldi	r18, 0x1E	; 30
 488:	ac 01       	movw	r20, r24
 48a:	24 9f       	mul	r18, r20
 48c:	c0 01       	movw	r24, r0
 48e:	25 9f       	mul	r18, r21
 490:	90 0d       	add	r25, r0
 492:	11 24       	eor	r1, r1
 494:	08 95       	ret

00000496 <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
  int16_t summedPID = 0;
  int16_t speedError = adc_goalRPM_get() - timing_measuredRPM_get();
 49a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <adc_goalRPM_get>
 49e:	c8 2f       	mov	r28, r24
 4a0:	0e 94 1f 03 	call	0x63e	; 0x63e <timing_measuredRPM_get>
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	c8 1b       	sub	r28, r24
 4a8:	d9 0b       	sbc	r29, r25

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 4aa:	ce 01       	movw	r24, r28
 4ac:	0e 94 22 02 	call	0x444	; 0x444 <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
  summedPID = summedPID >> K_SPEED_SCALAR;
 4b0:	4e e1       	ldi	r20, 0x1E	; 30
 4b2:	4c 9f       	mul	r20, r28
 4b4:	90 01       	movw	r18, r0
 4b6:	4d 9f       	mul	r20, r29
 4b8:	30 0d       	add	r19, r0
 4ba:	11 24       	eor	r1, r1
 4bc:	82 0f       	add	r24, r18
 4be:	93 1f       	adc	r25, r19
 4c0:	24 e0       	ldi	r18, 0x04	; 4
 4c2:	95 95       	asr	r25
 4c4:	87 95       	ror	r24
 4c6:	2a 95       	dec	r18
 4c8:	e1 f7       	brne	.-8      	; 0x4c2 <pid_dutyCycle_calculate+0x2c>

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 4ca:	8f 3f       	cpi	r24, 0xFF	; 255
 4cc:	91 05       	cpc	r25, r1
 4ce:	14 f0       	brlt	.+4      	; 0x4d4 <pid_dutyCycle_calculate+0x3e>
 4d0:	8f ef       	ldi	r24, 0xFF	; 255
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <pid_dutyCycle_calculate+0x4a>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 4d4:	18 16       	cp	r1, r24
 4d6:	19 06       	cpc	r1, r25
 4d8:	1c f0       	brlt	.+6      	; 0x4e0 <pid_dutyCycle_calculate+0x4a>
 4da:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <dutyCycle>
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <pid_dutyCycle_calculate+0x4e>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 4e0:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <dutyCycle>

  return dutyCycle;
 4e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <dutyCycle>
 4e8:	df 91       	pop	r29
 4ea:	cf 91       	pop	r28
 4ec:	08 95       	ret

000004ee <psc_init>:
   //SA_VAL: When PSC counter is less    than this value, high FET is enabled
   //SB_VAL: When PSC counter is greater than this value, low  FET is enabled
   //The difference between SA and SB sets the dead time between phases 
   //RA_VAL: Not used in centered mode //can be used to synchronize ADC
   //RB_VAL: Not used in centered mode 
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 4ee:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 4f2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 4f6:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 500:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 504:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 508:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 50c:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 510:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 514:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 518:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 51c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 520:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 524:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 528:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 52c:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 530:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 534:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL); //max value 12b free-running PSC counter counts up to
 538:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 53c:	8e ef       	ldi	r24, 0xFE	; 254
 53e:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 542:	84 e1       	ldi	r24, 0x14	; 20
 544:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 548:	88 ed       	ldi	r24, 0xD8	; 216
 54a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION); //PSC input is ignored

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 54e:	98 ef       	ldi	r25, 0xF8	; 248
 550:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 554:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP); //PSC interrupt flag register
 558:	8f e0       	ldi	r24, 0x0F	; 15
 55a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

   PIM = (0<<PEVE1)|(0<<PEVE1)|(0<<PEVE2)|(0<<PEOPE); //PSC interrupt mask register
 55e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
                         //PEVE0 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE1 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE2 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEOPE high: PSC generates interrupt when end of cycle reached //low: no interrupt

   Psc_run();
 562:	83 e2       	ldi	r24, 0x23	; 35
 564:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 568:	08 95       	ret

0000056a <psc_setDutyCycle>:
  #if(CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 56a:	e5 eb       	ldi	r30, 0xB5	; 181
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	94 e3       	ldi	r25, 0x34	; 52
 570:	90 83       	st	Z, r25
  
  //Psc_set_module_n(A_SA_VAL, A_RA_VAL, A_SB_VAL);

  //while all six PSC phases are chopping simultaneously, only two phases are routed to output pins at the same time //see mosfet_commutate()
  #if (CURRENT_DECAY == FAST_DECAY)
    Psc_set_module_A(duty,A_RA_VAL,duty);
 572:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 576:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 57a:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 584:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 588:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,duty);
 58c:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 590:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 594:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 598:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 59c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 5a0:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,duty);
 5a4:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 5a8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 5ac:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 5b0:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 5b4:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 5b8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    Psc_set_module_A(duty,A_RA_VAL,0);
    Psc_set_module_B(duty,B_RA_VAL,0);
    Psc_set_module_C(duty,C_RA_VAL,0);
  #endif
   
  Psc_unlock();
 5bc:	84 e1       	ldi	r24, 0x14	; 20
 5be:	80 83       	st	Z, r24
 5c0:	08 95       	ret

000005c2 <timing_runControlLoop_get>:
  #else
    // else get the real speed
  timing_measuredRPM_set(new_measured_speed); 
  #endif

  TCNT1 = 0x00; // Reset Timer 1 value to zero
 5c2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <runControlLoop>
 5c6:	08 95       	ret

000005c8 <timing_runControlLoop_set>:
 5c8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <runControlLoop>
 5cc:	08 95       	ret

000005ce <timing_timer0_init>:
 5ce:	82 e0       	ldi	r24, 0x02	; 2
 5d0:	84 bd       	out	0x24, r24	; 36
 5d2:	93 e0       	ldi	r25, 0x03	; 3
 5d4:	95 bd       	out	0x25, r25	; 37
 5d6:	97 e0       	ldi	r25, 0x07	; 7
 5d8:	97 bd       	out	0x27, r25	; 39
 5da:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 5de:	08 95       	ret

000005e0 <__vector_15>:
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1
 5ea:	8f 93       	push	r24
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <runControlLoop>
 5f2:	8f 91       	pop	r24
 5f4:	0f 90       	pop	r0
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	0f 90       	pop	r0
 5fa:	1f 90       	pop	r1
 5fc:	18 95       	reti

000005fe <timing_timer1_init>:
 5fe:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 602:	84 e0       	ldi	r24, 0x04	; 4
 604:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 608:	81 e0       	ldi	r24, 0x01	; 1
 60a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 60e:	08 95       	ret

00000610 <__vector_14>:
 610:	1f 92       	push	r1
 612:	0f 92       	push	r0
 614:	0f b6       	in	r0, 0x3f	; 63
 616:	0f 92       	push	r0
 618:	11 24       	eor	r1, r1
 61a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 61e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 622:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <motorRPM_measured+0x1>
 626:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <motorRPM_measured>
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <timing_measuredRPM_set>:
}

////////////////////////////////////////////////////////////////////////////////////////

void     timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 634:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <motorRPM_measured+0x1>
 638:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <motorRPM_measured>
 63c:	08 95       	ret

0000063e <timing_measuredRPM_get>:
 63e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <motorRPM_measured>
 642:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <motorRPM_measured+0x1>
 646:	08 95       	ret

00000648 <__muluhisi3>:
 648:	0e 94 2f 03 	call	0x65e	; 0x65e <__umulhisi3>
 64c:	a5 9f       	mul	r26, r21
 64e:	90 0d       	add	r25, r0
 650:	b4 9f       	mul	r27, r20
 652:	90 0d       	add	r25, r0
 654:	a4 9f       	mul	r26, r20
 656:	80 0d       	add	r24, r0
 658:	91 1d       	adc	r25, r1
 65a:	11 24       	eor	r1, r1
 65c:	08 95       	ret

0000065e <__umulhisi3>:
 65e:	a2 9f       	mul	r26, r18
 660:	b0 01       	movw	r22, r0
 662:	b3 9f       	mul	r27, r19
 664:	c0 01       	movw	r24, r0
 666:	a3 9f       	mul	r26, r19
 668:	70 0d       	add	r23, r0
 66a:	81 1d       	adc	r24, r1
 66c:	11 24       	eor	r1, r1
 66e:	91 1d       	adc	r25, r1
 670:	b2 9f       	mul	r27, r18
 672:	70 0d       	add	r23, r0
 674:	81 1d       	adc	r24, r1
 676:	11 24       	eor	r1, r1
 678:	91 1d       	adc	r25, r1
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
