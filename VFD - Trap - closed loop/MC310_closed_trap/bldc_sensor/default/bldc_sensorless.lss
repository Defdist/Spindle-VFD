
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000820  000008b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  00800102  00800102  000008b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001988  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000117a  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e2c  00000000  00000000  0000365a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00004488  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000abf  00000000  00000000  00004914  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b4  00000000  00000000  000053d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  00005987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 14 01 	jmp	0x228	; 0x228 <__vector_17>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 da 00 	jmp	0x1b4	; 0x1b4 <__vector_23>
  60:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 e2       	ldi	r30, 0x20	; 32
  90:	f8 e0       	ldi	r31, 0x08	; 8
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2d 01 	call	0x25a	; 0x25a <main>
  b2:	0c 94 0e 04 	jmp	0x81c	; 0x81c <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <A4910pinPB4_reset_Init>:
void A4910pinPB4_reset_Init(void)   { (DDRB |= (1<<DDB4));     }
void A4910pinPB4_reset_Toggle(void) { (PINB |= (1<<PINB4));    }
void A4910pinPB4_reset_Set(void)    { (PORTB |= (1<<PORTB4));  }
void A4910pinPB4_reset_Clear(void)  { (PORTB &= ~(1<<PORTB4)); }

void A4910_Disable(void) { A4910pinPB4_reset_Clear(); }
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <A4910pinPB4_reset_Set>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <A4910_Enable>:
  c2:	0c 94 5f 00 	jmp	0xbe	; 0xbe <A4910pinPB4_reset_Set>

000000c6 <init_adc>:
//! Take care that you have to select the ports which will be converted as
//! analog inputs thanks to the DIDR0 and DIDR1 registers.
//!
void init_adc(void)
{
	Adc_enable();
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	Adc_left_adjust_result();
  d0:	ac e7       	ldi	r26, 0x7C	; 124
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8c 91       	ld	r24, X
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8c 93       	st	X, r24
	Adc_enable_high_speed_mode();
  da:	ab e7       	ldi	r26, 0x7B	; 123
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	8c 91       	ld	r24, X
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8c 93       	st	X, r24
	adc_generateInterruptAfterConversion();
  e4:	80 81       	ld	r24, Z
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	80 83       	st	Z, r24
	#elif (ADC_PRESCALER == 16)
		Adc_set_prescaler(4);
	#elif (ADC_PRESCALER ==  8)
		Adc_set_prescaler( 3);
	#elif (ADC_PRESCALER ==  4)
		Adc_set_prescaler( 2);
  ea:	80 81       	ld	r24, Z
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	80 83       	st	Z, r24
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <hall_goalRPM_get>:

uint8_t motorSpeed_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
  f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <goalRPM_ADC_value>
  fc:	08 95       	ret

000000fe <hall_goalRPM_set>:
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }
  fe:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <goalRPM_ADC_value>
 102:	08 95       	ret

00000104 <hall_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
 104:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <motorSpeed_measured>
 108:	08 95       	ret

0000010a <hall_measuredRPM_get>:
uint8_t hall_measuredRPM_get(void) { return motorSpeed_measured; }
 10a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <motorSpeed_measured>
 10e:	08 95       	ret

00000110 <hall_getPosition>:
////////////////////////////////////////////////////////////////////////////////////////

inline uint8_t hall_getPosition(void)
{
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 110:	89 b1       	in	r24, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
 112:	26 b1       	in	r18, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
 114:	99 b1       	in	r25, 0x09	; 9

    return state;
 116:	22 70       	andi	r18, 0x02	; 2
 118:	94 70       	andi	r25, 0x04	; 4
 11a:	92 2b       	or	r25, r18
 11c:	86 95       	lsr	r24
 11e:	81 70       	andi	r24, 0x01	; 1
}
 120:	89 2b       	or	r24, r25
 122:	08 95       	ret

00000124 <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC() )  //Hall_A & Hall_C share the same interrupt vector byte
{
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 146:	0e 94 88 00 	call	0x110	; 0x110 <hall_getPosition>
 14a:	0e 94 bc 02 	call	0x578	; 0x578 <mc_commutateFETs>
}
 14e:	ff 91       	pop	r31
 150:	ef 91       	pop	r30
 152:	bf 91       	pop	r27
 154:	af 91       	pop	r26
 156:	9f 91       	pop	r25
 158:	8f 91       	pop	r24
 15a:	7f 91       	pop	r23
 15c:	6f 91       	pop	r22
 15e:	5f 91       	pop	r21
 160:	4f 91       	pop	r20
 162:	3f 91       	pop	r19
 164:	2f 91       	pop	r18
 166:	0f 90       	pop	r0
 168:	0f be       	out	0x3f, r0	; 63
 16a:	0f 90       	pop	r0
 16c:	1f 90       	pop	r1
 16e:	18 95       	reti

00000170 <hall_calculateRPM>:

  uint16_t timer_value;
  uint32_t new_measured_speed;

  // Two 8 bits variables are use to simulate a 16 bits timers
  timer_value = (ovf_timer<<8) + TCNT0;
 170:	86 b5       	in	r24, 0x26	; 38
 172:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <ovf_timer>
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	32 2f       	mov	r19, r18
 17a:	22 27       	eor	r18, r18
 17c:	28 0f       	add	r18, r24
 17e:	31 1d       	adc	r19, r1

  if (timer_value == 0) {timer_value += 1 ;} // prevent DIV by 0 in next line
 180:	21 15       	cp	r18, r1
 182:	31 05       	cpc	r19, r1
 184:	11 f4       	brne	.+4      	; 0x18a <hall_calculateRPM+0x1a>
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	30 e0       	ldi	r19, 0x00	; 0
  
  new_measured_speed = K_SPEED / timer_value;
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	50 e0       	ldi	r21, 0x00	; 0
 18e:	65 e8       	ldi	r22, 0x85	; 133
 190:	7f ec       	ldi	r23, 0xCF	; 207
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 b3 03 	call	0x766	; 0x766 <__divmodsi4>
  
  if(new_measured_speed > 255) new_measured_speed = 255; // Variable saturation
 19a:	2f 3f       	cpi	r18, 0xFF	; 255
 19c:	31 05       	cpc	r19, r1
 19e:	41 05       	cpc	r20, r1
 1a0:	51 05       	cpc	r21, r1
 1a2:	11 f0       	breq	.+4      	; 0x1a8 <hall_calculateRPM+0x38>
 1a4:	0c f0       	brlt	.+2      	; 0x1a8 <hall_calculateRPM+0x38>
 1a6:	2f ef       	ldi	r18, 0xFF	; 255
uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
 1a8:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <motorSpeed_measured>
    // else get the real speed
    hall_measuredRPM_set(new_measured_speed);
  #endif

  // Reset Timer 0 register and variables
  TCNT0=0x00;
 1ac:	16 bc       	out	0x26, r1	; 38
  ovf_timer = 0;
 1ae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ovf_timer>
 1b2:	08 95       	ret

000001b4 <__vector_23>:
}

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B() )
{
 1b4:	1f 92       	push	r1
 1b6:	0f 92       	push	r0
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	0f 92       	push	r0
 1bc:	11 24       	eor	r1, r1
 1be:	2f 93       	push	r18
 1c0:	3f 93       	push	r19
 1c2:	4f 93       	push	r20
 1c4:	5f 93       	push	r21
 1c6:	6f 93       	push	r22
 1c8:	7f 93       	push	r23
 1ca:	8f 93       	push	r24
 1cc:	9f 93       	push	r25
 1ce:	af 93       	push	r26
 1d0:	bf 93       	push	r27
 1d2:	ef 93       	push	r30
 1d4:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 1d6:	0e 94 88 00 	call	0x110	; 0x110 <hall_getPosition>
 1da:	0e 94 bc 02 	call	0x578	; 0x578 <mc_commutateFETs>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 1de:	31 99       	sbic	0x06, 1	; 6
 1e0:	02 c0       	rjmp	.+4      	; 0x1e6 <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <__vector_23+0x40>

  if ( (hallB_state          == HALL_B_HIGH ) &&
 1e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1ea:	81 11       	cpse	r24, r1
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <__vector_23+0x3e>
       (hallB_state_previous == HALL_B_LOW  )  )
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
 1ee:	0e 94 b8 00 	call	0x170	; 0x170 <hall_calculateRPM>
  mc_commutateFETs( hall_getPosition() );

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 1f2:	81 e0       	ldi	r24, 0x01	; 1
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
  }

  hallB_state_previous = hallB_state;
 1f4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	4f 91       	pop	r20
 20c:	3f 91       	pop	r19
 20e:	2f 91       	pop	r18
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <hall_init_rpm_timer0>:
 * @pre None
 * @post Timer0 initialized.
*/
void hall_init_rpm_timer0(void)
{
  TCCR0A = 0;
 21a:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 226:	08 95       	ret

00000228 <__vector_17>:
  * @brief Timer0 Overflow for speed measurement
  * @pre configuration of timer 0
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
 228:	1f 92       	push	r1
 22a:	0f 92       	push	r0
 22c:	0f b6       	in	r0, 0x3f	; 63
 22e:	0f 92       	push	r0
 230:	11 24       	eor	r1, r1
 232:	8f 93       	push	r24
  TCNT0=0x00;
 234:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
 236:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ovf_timer>
 23a:	8f 5f       	subi	r24, 0xFF	; 255
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
 23c:	84 36       	cpi	r24, 0x64	; 100
 23e:	18 f4       	brcc	.+6      	; 0x246 <__vector_17+0x1e>
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
  TCNT0=0x00;
  ovf_timer++;
 240:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ovf_timer>
 244:	04 c0       	rjmp	.+8      	; 0x24e <__vector_17+0x26>
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
 246:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <ovf_timer>
uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
 24a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <motorSpeed_measured>
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
    hall_measuredRPM_set(0);
  }
 24e:	8f 91       	pop	r24
 250:	0f 90       	pop	r0
 252:	0f be       	out	0x3f, r0	; 63
 254:	0f 90       	pop	r0
 256:	1f 90       	pop	r1
 258:	18 95       	reti

0000025a <main>:
uint16_t g_regulation_period = 0;  //sampling period
extern uint8_t overcurrent;

int main(void)
{
  mc_motor_init();
 25a:	0e 94 38 03 	call	0x670	; 0x670 <mc_motor_init>
  
  mci_motor_run();
 25e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <mci_motor_run>
  
  hall_goalRPM_set(255); //debug
 262:	8f ef       	ldi	r24, 0xFF	; 255
 264:	0e 94 7f 00 	call	0xfe	; 0xfe <hall_goalRPM_set>
  
  while(1)
  {	  	  
    if (mc_drv_g_tick_get() == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
 268:	0e 94 54 01 	call	0x2a8	; 0x2a8 <mc_drv_g_tick_get>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0xe>
    {		
      mc_drv_g_tick_set(FALSE);
 270:	80 e0       	ldi	r24, 0x00	; 0
 272:	0e 94 57 01 	call	0x2ae	; 0x2ae <mc_drv_g_tick_set>
      mc_ADC_Scheduler(); // Get Current or potentiometer value
 276:	0e 94 71 02 	call	0x4e2	; 0x4e2 <mc_ADC_Scheduler>
      g_regulation_period += 1;
 27a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <g_regulation_period>
 27e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <g_regulation_period+0x1>
 282:	01 96       	adiw	r24, 0x01	; 1
	    
      if(g_regulation_period >= 40) //n * 256us = Te
 284:	88 32       	cpi	r24, 0x28	; 40
 286:	91 05       	cpc	r25, r1
 288:	28 f4       	brcc	.+10     	; 0x294 <main+0x3a>
  {	  	  
    if (mc_drv_g_tick_get() == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
    {		
      mc_drv_g_tick_set(FALSE);
      mc_ADC_Scheduler(); // Get Current or potentiometer value
      g_regulation_period += 1;
 28a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <g_regulation_period+0x1>
 28e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <g_regulation_period>
 292:	06 c0       	rjmp	.+12     	; 0x2a0 <main+0x46>
	    
      if(g_regulation_period >= 40) //n * 256us = Te
      {
        g_regulation_period = 0;
 294:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_regulation_period+0x1>
 298:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <g_regulation_period>

        pid_dutyCycle_calculate();
 29c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <pid_dutyCycle_calculate>
	  //else                           { setPC3_high(); }
		  
	  

      //psc_setDutyCycle( pid_dutyCycle_get() );
      psc_setDutyCycle(255); //debug
 2a0:	8f ef       	ldi	r24, 0xFF	; 255
 2a2:	0e 94 99 01 	call	0x332	; 0x332 <psc_setDutyCycle>
 2a6:	e0 cf       	rjmp	.-64     	; 0x268 <main+0xe>

000002a8 <mc_drv_g_tick_get>:
static char ADC_stateMachine = ADC_UNITIALIZED;
static char ADC_hardwareStatus = FREE;  // ADC State //running = BUSY //not running = FREE

////////////////////////////////////////////////////////////////////////////////////////

uint8_t mc_drv_g_tick_get(void) { return g_tick; }
 2a8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <g_tick>
 2ac:	08 95       	ret

000002ae <mc_drv_g_tick_set>:
void mc_drv_g_tick_set(uint8_t state) { g_tick = state; }
 2ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <g_tick>
 2b2:	08 95       	ret

000002b4 <PSC_Init>:
////////////////////////////////////////////////////////////////////////////////////////

//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 2b4:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 2b8:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 2bc:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 2c6:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 2ca:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 2ce:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 2d2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 2d6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 2da:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 2de:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 2e2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 2e6:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 2ea:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 2ee:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 2f2:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 2f6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 2fa:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL);
 2fe:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 302:	8f ef       	ldi	r24, 0xFF	; 255
 304:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 308:	8c e1       	ldi	r24, 0x1C	; 28
 30a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 30e:	88 e9       	ldi	r24, 0x98	; 152
 310:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 314:	98 ef       	ldi	r25, 0xF8	; 248
 316:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 31a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
 31e:	8f e0       	ldi	r24, 0x0F	; 15
 320:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   PIM = (1<<PEVE1);
 324:	84 e0       	ldi	r24, 0x04	; 4
 326:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

   Psc_run();
 32a:	81 e2       	ldi	r24, 0x21	; 33
 32c:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 330:	08 95       	ret

00000332 <psc_setDutyCycle>:
  #if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 332:	e5 eb       	ldi	r30, 0xB5	; 181
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	9c e3       	ldi	r25, 0x3C	; 60
 338:	90 83       	st	Z, r25
  #if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
    Psc_set_module_A(duty,A_RA_VAL,dutydt);
    Psc_set_module_B(duty,B_RA_VAL,dutydt);
    Psc_set_module_C(duty,C_RA_VAL,dutydt);
  #else
    Psc_set_module_A(duty,A_RA_VAL,0);
 33a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 33e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 342:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 346:	91 e0       	ldi	r25, 0x01	; 1
 348:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 34c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 350:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,0);
 354:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 358:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 35c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 360:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 364:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 368:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,0);
 36c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 370:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 374:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 378:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 37c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 380:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  #endif
#endif
   
  Psc_unlock();
 384:	8c e1       	ldi	r24, 0x1C	; 28
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <mc_motor_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_motor_init_timer1(void)  //JTS2doNow: swap with counter 0, which uses software 16 bit.
{
  TCCR1A = 0; //Normal port operation + Mode CTC
 38a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + clock prescaler=64
 38e:	8b e0       	ldi	r24, 0x0B	; 11
 390:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TCCR1C = 0;
 394:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  OCR1AH = 0; //output compare register high byte
 398:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  OCR1AL = 63; // f ocra = 1/(16MHz/64)*(63+1) = 256 us tick
 39c:	8f e3       	ldi	r24, 0x3F	; 63
 39e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3a8:	08 95       	ret

000003aa <mc_motor_init_HW>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 3aa:	85 b1       	in	r24, 0x05	; 5
 3ac:	8c 73       	andi	r24, 0x3C	; 60
 3ae:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
 3b0:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
 3b2:	58 98       	cbi	0x0b, 0	; 11

  // Set PSC MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 3b4:	83 ec       	ldi	r24, 0xC3	; 195
 3b6:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	87 b9       	out	0x07, r24	; 7
  DDRD = (1<<DDD0);
 3bc:	8a b9       	out	0x0a, r24	; 10
  
  //Enable A4910 (FET driver IC)
  A4910pinPB4_reset_Init(); //configure pin to digital output
 3be:	0e 94 5d 00 	call	0xba	; 0xba <A4910pinPB4_reset_Init>
  A4910_Enable(); //enable MOSFET driver
 3c2:	0e 94 61 00 	call	0xc2	; 0xc2 <A4910_Enable>

  // Set to disable digital input circuitry on all pins used as analog inputs.
  // This reduces power consumption, particularly when an analog signal is near Vcc/2.
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D); //CUR_B & CUR_C ADC inputs
 3c6:	83 e0       	ldi	r24, 0x03	; 3
 3c8:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
  DIDR0 = (1<<ADC5D)|(1<<ADC6D); //CUR_A ADC input
 3cc:	80 e6       	ldi	r24, 0x60	; 96
 3ce:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  
  //vref_source(); // Select the Vref Source
  //JTS2doLater: need to use 2.56 internal reference when measuring phase currents (absolute accuracy)
  //JTS2doLater: need to use VCC when measuring PWM from 328p (ratiometric)
  //The first ADC measurement after each switch should be discarded
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 3d2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 3d6:	8f 7b       	andi	r24, 0xBF	; 191
 3d8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 3dc:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 3e0:	80 62       	ori	r24, 0x20	; 32
 3e2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  
  //Select the Vref Source
  Adc_enable_external_vref();
 3e6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 3ea:	8f 73       	andi	r24, 0x3F	; 63
 3ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

  init_adc();
 3f0:	0e 94 63 00 	call	0xc6	; 0xc6 <init_adc>
  Adc_config();
 3f4:	80 ec       	ldi	r24, 0xC0	; 192
 3f6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 3fa:	8a e8       	ldi	r24, 0x8A	; 138
 3fc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 400:	80 e8       	ldi	r24, 0x80	; 128
 402:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  //JTS2doLater: I've disconnected the DAC register from the pin, but right now no overcurrent.
  //Dac_config();
  /* set the overcurrent level */
  //Dac_set_8_bits(IMAX);
    
  hall_init_rpm_timer0();
 406:	0e 94 0d 01 	call	0x21a	; 0x21a <hall_init_rpm_timer0>
  mc_motor_init_timer1();
 40a:	0e 94 c5 01 	call	0x38a	; 0x38a <mc_motor_init_timer1>

  //JTS2doLater: We'll eventually use these to throttle back current, using 1V1 bandgap 
  Comp_0_config();
 40e:	84 ec       	ldi	r24, 0xC4	; 196
 410:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
  Comp_1_config();
 414:	95 e8       	ldi	r25, 0x85	; 133
 416:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
  Comp_2_config();
 41a:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
  
  //JTS rewrote
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 41e:	86 e0       	ldi	r24, 0x06	; 6
 420:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 424:	92 e0       	ldi	r25, 0x02	; 2
 426:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 42a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
 42e:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 430:	09 b4       	in	r0, 0x29	; 41
 432:	00 fe       	sbrs	r0, 0
 434:	fd cf       	rjmp	.-6      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>

  PSC_Init();
 436:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <PSC_Init>

0000043a <__vector_12>:
  * @brief Launch the regulation loop (see main.c) .
  * @pre configuration of timer 1 registers
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_motor_init_timer1()
{
 43a:	1f 92       	push	r1
 43c:	0f 92       	push	r0
 43e:	0f b6       	in	r0, 0x3f	; 63
 440:	0f 92       	push	r0
 442:	11 24       	eor	r1, r1
 444:	8f 93       	push	r24
static char ADC_hardwareStatus = FREE;  // ADC State //running = BUSY //not running = FREE

////////////////////////////////////////////////////////////////////////////////////////

uint8_t mc_drv_g_tick_get(void) { return g_tick; }
void mc_drv_g_tick_set(uint8_t state) { g_tick = state; }
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <g_tick>
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_motor_init_timer1()
{
  mc_drv_g_tick_set(TRUE);
}
 44c:	8f 91       	pop	r24
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <__vector_27>:
//! @brief Launch the sampling procedure to get current value
//! @pre amplifier and IT initialization
//! @post Set the End Of Conversion flag

ISR(ADC_vect)
{
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	4f 93       	push	r20
 468:	5f 93       	push	r21
 46a:	6f 93       	push	r22
 46c:	7f 93       	push	r23
 46e:	8f 93       	push	r24
 470:	9f 93       	push	r25
 472:	af 93       	push	r26
 474:	bf 93       	push	r27
 476:	ef 93       	push	r30
 478:	ff 93       	push	r31
  setPC3_high();
 47a:	0e 94 a9 03 	call	0x752	; 0x752 <setPC3_high>
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
 47e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 482:	80 7e       	andi	r24, 0xE0	; 224
 484:	82 61       	ori	r24, 0x12	; 18
 486:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  if(ADC_stateMachine == ADC_MEASURE_REQUESTED_RPM) { hall_goalRPM_set(Adc_get_8_bits_result()); }
 48a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_stateMachine>
 48e:	81 30       	cpi	r24, 0x01	; 1
 490:	21 f4       	brne	.+8      	; 0x49a <__vector_27+0x42>
 492:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 496:	0e 94 7f 00 	call	0xfe	; 0xfe <hall_goalRPM_set>
  if(ADC_stateMachine == ADC_MEASURE_CURRENT) { mci_motor_measuredCurrent_integrate(Adc_get_10_bits_result()); }
 49a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_stateMachine>
 49e:	82 30       	cpi	r24, 0x02	; 2
 4a0:	59 f4       	brne	.+22     	; 0x4b8 <__vector_27+0x60>
 4a2:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4a6:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	98 2f       	mov	r25, r24
 4ae:	88 27       	eor	r24, r24
 4b0:	82 0f       	add	r24, r18
 4b2:	91 1d       	adc	r25, r1
 4b4:	0e 94 10 03 	call	0x620	; 0x620 <mci_motor_measuredCurrent_integrate>
  ADC_hardwareStatus = FREE;
 4b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ADC_hardwareStatus>
  	setPC3_low();
 4bc:	0e 94 ac 03 	call	0x758	; 0x758 <setPC3_low>
}
 4c0:	ff 91       	pop	r31
 4c2:	ef 91       	pop	r30
 4c4:	bf 91       	pop	r27
 4c6:	af 91       	pop	r26
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	7f 91       	pop	r23
 4ce:	6f 91       	pop	r22
 4d0:	5f 91       	pop	r21
 4d2:	4f 91       	pop	r20
 4d4:	3f 91       	pop	r19
 4d6:	2f 91       	pop	r18
 4d8:	0f 90       	pop	r0
 4da:	0f be       	out	0x3f, r0	; 63
 4dc:	0f 90       	pop	r0
 4de:	1f 90       	pop	r1
 4e0:	18 95       	reti

000004e2 <mc_ADC_Scheduler>:
////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Move to adc.c
void mc_ADC_Scheduler(void)
{
  setPD3_high();
 4e2:	0e 94 ae 03 	call	0x75c	; 0x75c <setPD3_high>
  	
  switch(ADC_stateMachine)
 4e6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_stateMachine>
 4ea:	81 30       	cpi	r24, 0x01	; 1
 4ec:	09 f1       	breq	.+66     	; 0x530 <mc_ADC_Scheduler+0x4e>
 4ee:	18 f0       	brcs	.+6      	; 0x4f6 <mc_ADC_Scheduler+0x14>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	21 f0       	breq	.+8      	; 0x4fc <mc_ADC_Scheduler+0x1a>
 4f4:	36 c0       	rjmp	.+108    	; 0x562 <mc_ADC_Scheduler+0x80>
  {
  case ADC_UNITIALIZED:
    ADC_hardwareStatus = FREE;
 4f6:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ADC_hardwareStatus>
 4fa:	30 c0       	rjmp	.+96     	; 0x55c <mc_ADC_Scheduler+0x7a>
    break;

  //JTS2doNow: Confusing... case doesn't match ADC action
  case ADC_MEASURE_CURRENT:
    //ADC just finished measuring current... now we need to configure the ADC to measure desired RPM
    if(ADC_hardwareStatus == FREE)
 4fc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ADC_hardwareStatus>
 500:	81 11       	cpse	r24, r1
 502:	2f c0       	rjmp	.+94     	; 0x562 <mc_ADC_Scheduler+0x80>
    {
      ADC_hardwareStatus = BUSY;
 504:	91 e0       	ldi	r25, 0x01	; 1
 506:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <ADC_hardwareStatus>
      Adc_left_adjust_result();
 50a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 50e:	80 62       	ori	r24, 0x20	; 32
 510:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 514:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 518:	80 7e       	andi	r24, 0xE0	; 224
 51a:	85 60       	ori	r24, 0x05	; 5
 51c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 520:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 524:	80 64       	ori	r24, 0x40	; 64
 526:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_REQUESTED_RPM;
 52a:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_stateMachine>
 52e:	19 c0       	rjmp	.+50     	; 0x562 <mc_ADC_Scheduler+0x80>
    }
    break;

  case ADC_MEASURE_REQUESTED_RPM:
    //ADC just finished measuring goal RPM... now we need to configure the ADC to measure current
    if(ADC_hardwareStatus == FREE)
 530:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <ADC_hardwareStatus>
 534:	91 11       	cpse	r25, r1
 536:	15 c0       	rjmp	.+42     	; 0x562 <mc_ADC_Scheduler+0x80>
    {
      ADC_hardwareStatus = BUSY;
 538:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ADC_hardwareStatus>
      Adc_right_adjust_result();
 53c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 540:	8f 7d       	andi	r24, 0xDF	; 223
 542:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
 546:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 54a:	80 7e       	andi	r24, 0xE0	; 224
 54c:	8f 60       	ori	r24, 0x0F	; 15
 54e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 552:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 556:	80 64       	ori	r24, 0x40	; 64
 558:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_CURRENT; //this case gets current sensor
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_stateMachine>
    }
    break;
  }
  setPD3_low();
 562:	0c 94 b1 03 	jmp	0x762	; 0x762 <setPD3_low>

00000566 <turnOffAllFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void turnOffAllFETs(void)
{
  POC = ( (0<<POEN0A)|(0<<POEN0B) |
 566:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |
          (0<<POEN2A)|(0<<POEN2B) );

  PORTB &= ( ~(1<<PORTB7) ); //turn off Q2
 56a:	2f 98       	cbi	0x05, 7	; 5
  PORTB &= ( ~(1<<PORTB6) ); //turn off Q4
 56c:	2e 98       	cbi	0x05, 6	; 5
  PORTB &= ( ~(1<<PORTB0) ); //turn off Q5
 56e:	28 98       	cbi	0x05, 0	; 5
  PORTB &= ( ~(1<<PORTB1) ); //turn off Q6
 570:	29 98       	cbi	0x05, 1	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 572:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) );  //turn off Q1
 574:	58 98       	cbi	0x0b, 0	; 11
 576:	08 95       	ret

00000578 <mc_commutateFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mc_commutateFETs(uint8_t hallState)
{
 578:	cf 93       	push	r28
 57a:	c8 2f       	mov	r28, r24
    if ( mci_motorState_get() == STOPPED ) { turnOffAllFETs(); }
 57c:	0e 94 0a 03 	call	0x614	; 0x614 <mci_motorState_get>
 580:	88 23       	and	r24, r24
 582:	99 f1       	breq	.+102    	; 0x5ea <mc_commutateFETs+0x72>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 584:	0e 94 46 03 	call	0x68c	; 0x68c <pid_dutyCycle_get>
 588:	0e 94 99 01 	call	0x332	; 0x332 <psc_setDutyCycle>

      if(mci_motorDirection_get() == CCW)
 58c:	0e 94 0d 03 	call	0x61a	; 0x61a <mci_motorDirection_get>
 590:	81 30       	cpi	r24, 0x01	; 1
 592:	71 f4       	brne	.+28     	; 0x5b0 <mc_commutateFETs+0x38>
      {
          switch(hallState)
 594:	c3 30       	cpi	r28, 0x03	; 3
 596:	01 f1       	breq	.+64     	; 0x5d8 <mc_commutateFETs+0x60>
 598:	28 f4       	brcc	.+10     	; 0x5a4 <mc_commutateFETs+0x2c>
 59a:	c1 30       	cpi	r28, 0x01	; 1
 59c:	09 f1       	breq	.+66     	; 0x5e0 <mc_commutateFETs+0x68>
 59e:	c2 30       	cpi	r28, 0x02	; 2
 5a0:	e9 f0       	breq	.+58     	; 0x5dc <mc_commutateFETs+0x64>
 5a2:	23 c0       	rjmp	.+70     	; 0x5ea <mc_commutateFETs+0x72>
 5a4:	c5 30       	cpi	r28, 0x05	; 5
 5a6:	a1 f0       	breq	.+40     	; 0x5d0 <mc_commutateFETs+0x58>
 5a8:	a8 f0       	brcs	.+42     	; 0x5d4 <mc_commutateFETs+0x5c>
 5aa:	c6 30       	cpi	r28, 0x06	; 6
 5ac:	79 f0       	breq	.+30     	; 0x5cc <mc_commutateFETs+0x54>
 5ae:	1d c0       	rjmp	.+58     	; 0x5ea <mc_commutateFETs+0x72>
              default: turnOffAllFETs(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 5b0:	c3 30       	cpi	r28, 0x03	; 3
 5b2:	81 f0       	breq	.+32     	; 0x5d4 <mc_commutateFETs+0x5c>
 5b4:	28 f4       	brcc	.+10     	; 0x5c0 <mc_commutateFETs+0x48>
 5b6:	c1 30       	cpi	r28, 0x01	; 1
 5b8:	49 f0       	breq	.+18     	; 0x5cc <mc_commutateFETs+0x54>
 5ba:	c2 30       	cpi	r28, 0x02	; 2
 5bc:	49 f0       	breq	.+18     	; 0x5d0 <mc_commutateFETs+0x58>
 5be:	15 c0       	rjmp	.+42     	; 0x5ea <mc_commutateFETs+0x72>
 5c0:	c5 30       	cpi	r28, 0x05	; 5
 5c2:	61 f0       	breq	.+24     	; 0x5dc <mc_commutateFETs+0x64>
 5c4:	48 f0       	brcs	.+18     	; 0x5d8 <mc_commutateFETs+0x60>
 5c6:	c6 30       	cpi	r28, 0x06	; 6
 5c8:	59 f0       	breq	.+22     	; 0x5e0 <mc_commutateFETs+0x68>
 5ca:	0f c0       	rjmp	.+30     	; 0x5ea <mc_commutateFETs+0x72>
          {
              case 1: Set_Q1Q6(); break;
 5cc:	81 e2       	ldi	r24, 0x21	; 33
 5ce:	09 c0       	rjmp	.+18     	; 0x5e2 <mc_commutateFETs+0x6a>
              case 2: Set_Q3Q2(); break;
 5d0:	86 e0       	ldi	r24, 0x06	; 6
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <mc_commutateFETs+0x6a>
              case 3: Set_Q3Q6(); break;
 5d4:	84 e2       	ldi	r24, 0x24	; 36
 5d6:	05 c0       	rjmp	.+10     	; 0x5e2 <mc_commutateFETs+0x6a>
              case 4: Set_Q5Q4(); break;
 5d8:	88 e1       	ldi	r24, 0x18	; 24
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <mc_commutateFETs+0x6a>
              case 5: Set_Q1Q4(); break;
 5dc:	89 e0       	ldi	r24, 0x09	; 9
 5de:	01 c0       	rjmp	.+2      	; 0x5e2 <mc_commutateFETs+0x6a>
              case 6: Set_Q5Q2(); break;
 5e0:	82 e1       	ldi	r24, 0x12	; 18
 5e2:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: turnOffAllFETs(); break;
          }
      }
    }
}
 5e6:	cf 91       	pop	r28
 5e8:	08 95       	ret
 5ea:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: turnOffAllFETs(); break;
 5ec:	0c 94 b3 02 	jmp	0x566	; 0x566 <turnOffAllFETs>

000005f0 <mci_motor_run>:
uint8_t mci_motorDirection_get(void) { return motorDirection; }

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: We shouldn't be integrating inside these functions... do it wherever they're called
uint16_t mci_motor_measuredCurrent_get(void) { return (mci_measured_current >> 6); } //mci_measured_current/64
 5f0:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 5f4:	80 ff       	sbrs	r24, 0
 5f6:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <PSC_Init>
 5fa:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <overcurrent>
 5fe:	81 e0       	ldi	r24, 0x01	; 1
 600:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <motorStatus>
 604:	0e 94 72 03 	call	0x6e4	; 0x6e4 <pid_dutyCycle_calculate>
 608:	0e 94 99 01 	call	0x332	; 0x332 <psc_setDutyCycle>
 60c:	0e 94 88 00 	call	0x110	; 0x110 <hall_getPosition>
 610:	0c 94 bc 02 	jmp	0x578	; 0x578 <mc_commutateFETs>

00000614 <mci_motorState_get>:
 614:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <motorStatus>
 618:	08 95       	ret

0000061a <mci_motorDirection_get>:
 61a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 61e:	08 95       	ret

00000620 <mci_motor_measuredCurrent_integrate>:

void mci_motor_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }
 620:	fc 01       	movw	r30, r24
 622:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <mci_measured_current>
 626:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <mci_measured_current+0x1>
 62a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <mci_measured_current+0x2>
 62e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <mci_measured_current+0x3>
 632:	af e3       	ldi	r26, 0x3F	; 63
 634:	b0 e0       	ldi	r27, 0x00	; 0
 636:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <__muluhisi3>
 63a:	26 e0       	ldi	r18, 0x06	; 6
 63c:	ee 0f       	add	r30, r30
 63e:	ff 1f       	adc	r31, r31
 640:	2a 95       	dec	r18
 642:	e1 f7       	brne	.-8      	; 0x63c <mci_motor_measuredCurrent_integrate+0x1c>
 644:	dc 01       	movw	r26, r24
 646:	cb 01       	movw	r24, r22
 648:	8e 0f       	add	r24, r30
 64a:	9f 1f       	adc	r25, r31
 64c:	a1 1d       	adc	r26, r1
 64e:	b1 1d       	adc	r27, r1
 650:	36 e0       	ldi	r19, 0x06	; 6
 652:	b6 95       	lsr	r27
 654:	a7 95       	ror	r26
 656:	97 95       	ror	r25
 658:	87 95       	ror	r24
 65a:	3a 95       	dec	r19
 65c:	d1 f7       	brne	.-12     	; 0x652 <mci_motor_measuredCurrent_integrate+0x32>
 65e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <mci_measured_current>
 662:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <mci_measured_current+0x1>
 666:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <mci_measured_current+0x2>
 66a:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <mci_measured_current+0x3>
 66e:	08 95       	ret

00000670 <mc_motor_init>:

////////////////////////////////////////////////////////////////////////////////////////

void mc_motor_init()
{
  mc_motor_init_HW();
 670:	0e 94 d5 01 	call	0x3aa	; 0x3aa <mc_motor_init_HW>
  sei(); //enable interrupts
 674:	78 94       	sei

uint8_t mci_motorState_get(void) { return motorStatus; }

////////////////////////////////////////////////////////////////////////////////////////

void mci_motor_stop(void) { motorStatus = STOPPED; }
 676:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <motorStatus>

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void mci_motorDirection_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  mc_motor_init_HW();
  sei(); //enable interrupts

  mci_motor_stop();
  mci_motorDirection_set(CW);
  hall_goalRPM_set(0);
 680:	80 e0       	ldi	r24, 0x00	; 0
 682:	0e 94 7f 00 	call	0xfe	; 0xfe <hall_goalRPM_set>
  hall_measuredRPM_set(0);
 686:	80 e0       	ldi	r24, 0x00	; 0
 688:	0c 94 82 00 	jmp	0x104	; 0x104 <hall_measuredRPM_set>

0000068c <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 68c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dutyCycle>
 690:	08 95       	ret

00000692 <pid_calculate_integral>:
 692:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <speed_integrator.2076>
 696:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <speed_integrator.2076+0x1>
 69a:	82 0f       	add	r24, r18
 69c:	93 1f       	adc	r25, r19
 69e:	8f 3f       	cpi	r24, 0xFF	; 255
 6a0:	91 05       	cpc	r25, r1
 6a2:	19 f0       	breq	.+6      	; 0x6aa <pid_calculate_integral+0x18>
 6a4:	14 f0       	brlt	.+4      	; 0x6aa <pid_calculate_integral+0x18>
 6a6:	8f ef       	ldi	r24, 0xFF	; 255
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <speed_integrator.2076+0x1>
 6ae:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <speed_integrator.2076>
 6b2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <speed_integrator.2076>
 6b6:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <speed_integrator.2076+0x1>
 6ba:	81 30       	cpi	r24, 0x01	; 1
 6bc:	9f 4f       	sbci	r25, 0xFF	; 255
 6be:	34 f4       	brge	.+12     	; 0x6cc <pid_calculate_integral+0x3a>
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	9f ef       	ldi	r25, 0xFF	; 255
 6c4:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <speed_integrator.2076+0x1>
 6c8:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <speed_integrator.2076>
 6cc:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <speed_integrator.2076>
 6d0:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <speed_integrator.2076+0x1>
 6d4:	2e e1       	ldi	r18, 0x1E	; 30
 6d6:	ac 01       	movw	r20, r24
 6d8:	24 9f       	mul	r18, r20
 6da:	c0 01       	movw	r24, r0
 6dc:	25 9f       	mul	r18, r21
 6de:	90 0d       	add	r25, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	08 95       	ret

000006e4 <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 6e4:	cf 93       	push	r28
 6e6:	df 93       	push	r29
  int32_t summedPID = 0;

  uint8_t desiredSpeed = 2 * hall_goalRPM_get();
 6e8:	0e 94 7c 00 	call	0xf8	; 0xf8 <hall_goalRPM_get>
 6ec:	c8 2f       	mov	r28, r24

  int16_t speedError = desiredSpeed - hall_measuredRPM_get();// value -255 <=> 255
 6ee:	0e 94 85 00 	call	0x10a	; 0x10a <hall_measuredRPM_get>
 6f2:	cc 0f       	add	r28, r28
 6f4:	d0 e0       	ldi	r29, 0x00	; 0
 6f6:	c8 1b       	sub	r28, r24
 6f8:	d1 09       	sbc	r29, r1

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 6fa:	ce 01       	movw	r24, r28
 6fc:	0e 94 49 03 	call	0x692	; 0x692 <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
 700:	4e e1       	ldi	r20, 0x1E	; 30
 702:	4c 9f       	mul	r20, r28
 704:	90 01       	movw	r18, r0
 706:	4d 9f       	mul	r20, r29
 708:	30 0d       	add	r19, r0
 70a:	11 24       	eor	r1, r1
 70c:	82 0f       	add	r24, r18
 70e:	93 1f       	adc	r25, r19
 710:	09 2e       	mov	r0, r25
 712:	00 0c       	add	r0, r0
 714:	aa 0b       	sbc	r26, r26
 716:	bb 0b       	sbc	r27, r27
  summedPID = summedPID >> K_SPEED_SCALAR;
 718:	24 e0       	ldi	r18, 0x04	; 4
 71a:	b5 95       	asr	r27
 71c:	a7 95       	ror	r26
 71e:	97 95       	ror	r25
 720:	87 95       	ror	r24
 722:	2a 95       	dec	r18
 724:	d1 f7       	brne	.-12     	; 0x71a <pid_dutyCycle_calculate+0x36>

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 726:	8f 3f       	cpi	r24, 0xFF	; 255
 728:	91 05       	cpc	r25, r1
 72a:	a1 05       	cpc	r26, r1
 72c:	b1 05       	cpc	r27, r1
 72e:	14 f0       	brlt	.+4      	; 0x734 <pid_dutyCycle_calculate+0x50>
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	08 c0       	rjmp	.+16     	; 0x744 <pid_dutyCycle_calculate+0x60>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 734:	18 16       	cp	r1, r24
 736:	19 06       	cpc	r1, r25
 738:	1a 06       	cpc	r1, r26
 73a:	1b 06       	cpc	r1, r27
 73c:	1c f0       	brlt	.+6      	; 0x744 <pid_dutyCycle_calculate+0x60>
 73e:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <dutyCycle>
 742:	02 c0       	rjmp	.+4      	; 0x748 <pid_dutyCycle_calculate+0x64>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 744:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <dutyCycle>

  return dutyCycle;
 748:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <dutyCycle>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28
 750:	08 95       	ret

00000752 <setPC3_high>:
#include "grBLDC.h"

void setPC3_high(void)
{
	SLOWDOWN_DDR |= SLOWDOWN_MASK;
 752:	3b 9a       	sbi	0x07, 3	; 7
	SLOWDOWN_PORT |= SLOWDOWN_MASK;
 754:	43 9a       	sbi	0x08, 3	; 8
 756:	08 95       	ret

00000758 <setPC3_low>:
}

void setPC3_low(void)
{
	SLOWDOWN_PORT &= ~(SLOWDOWN_MASK);
 758:	43 98       	cbi	0x08, 3	; 8
 75a:	08 95       	ret

0000075c <setPD3_high>:
}

void setPD3_high(void)
{
	PD3_DDR |= PD3_MASK;
 75c:	53 9a       	sbi	0x0a, 3	; 10
	PD3_PORT |= PD3_MASK; 
 75e:	5b 9a       	sbi	0x0b, 3	; 11
 760:	08 95       	ret

00000762 <setPD3_low>:
}

void setPD3_low(void)
{
	PD3_PORT &= ~(PD3_MASK);
 762:	5b 98       	cbi	0x0b, 3	; 11
 764:	08 95       	ret

00000766 <__divmodsi4>:
 766:	05 2e       	mov	r0, r21
 768:	97 fb       	bst	r25, 7
 76a:	1e f4       	brtc	.+6      	; 0x772 <__divmodsi4+0xc>
 76c:	00 94       	com	r0
 76e:	0e 94 ca 03 	call	0x794	; 0x794 <__negsi2>
 772:	57 fd       	sbrc	r21, 7
 774:	07 d0       	rcall	.+14     	; 0x784 <__divmodsi4_neg2>
 776:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__udivmodsi4>
 77a:	07 fc       	sbrc	r0, 7
 77c:	03 d0       	rcall	.+6      	; 0x784 <__divmodsi4_neg2>
 77e:	4e f4       	brtc	.+18     	; 0x792 <__divmodsi4_exit>
 780:	0c 94 ca 03 	jmp	0x794	; 0x794 <__negsi2>

00000784 <__divmodsi4_neg2>:
 784:	50 95       	com	r21
 786:	40 95       	com	r20
 788:	30 95       	com	r19
 78a:	21 95       	neg	r18
 78c:	3f 4f       	sbci	r19, 0xFF	; 255
 78e:	4f 4f       	sbci	r20, 0xFF	; 255
 790:	5f 4f       	sbci	r21, 0xFF	; 255

00000792 <__divmodsi4_exit>:
 792:	08 95       	ret

00000794 <__negsi2>:
 794:	90 95       	com	r25
 796:	80 95       	com	r24
 798:	70 95       	com	r23
 79a:	61 95       	neg	r22
 79c:	7f 4f       	sbci	r23, 0xFF	; 255
 79e:	8f 4f       	sbci	r24, 0xFF	; 255
 7a0:	9f 4f       	sbci	r25, 0xFF	; 255
 7a2:	08 95       	ret

000007a4 <__muluhisi3>:
 7a4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__umulhisi3>
 7a8:	a5 9f       	mul	r26, r21
 7aa:	90 0d       	add	r25, r0
 7ac:	b4 9f       	mul	r27, r20
 7ae:	90 0d       	add	r25, r0
 7b0:	a4 9f       	mul	r26, r20
 7b2:	80 0d       	add	r24, r0
 7b4:	91 1d       	adc	r25, r1
 7b6:	11 24       	eor	r1, r1
 7b8:	08 95       	ret

000007ba <__udivmodsi4>:
 7ba:	a1 e2       	ldi	r26, 0x21	; 33
 7bc:	1a 2e       	mov	r1, r26
 7be:	aa 1b       	sub	r26, r26
 7c0:	bb 1b       	sub	r27, r27
 7c2:	fd 01       	movw	r30, r26
 7c4:	0d c0       	rjmp	.+26     	; 0x7e0 <__udivmodsi4_ep>

000007c6 <__udivmodsi4_loop>:
 7c6:	aa 1f       	adc	r26, r26
 7c8:	bb 1f       	adc	r27, r27
 7ca:	ee 1f       	adc	r30, r30
 7cc:	ff 1f       	adc	r31, r31
 7ce:	a2 17       	cp	r26, r18
 7d0:	b3 07       	cpc	r27, r19
 7d2:	e4 07       	cpc	r30, r20
 7d4:	f5 07       	cpc	r31, r21
 7d6:	20 f0       	brcs	.+8      	; 0x7e0 <__udivmodsi4_ep>
 7d8:	a2 1b       	sub	r26, r18
 7da:	b3 0b       	sbc	r27, r19
 7dc:	e4 0b       	sbc	r30, r20
 7de:	f5 0b       	sbc	r31, r21

000007e0 <__udivmodsi4_ep>:
 7e0:	66 1f       	adc	r22, r22
 7e2:	77 1f       	adc	r23, r23
 7e4:	88 1f       	adc	r24, r24
 7e6:	99 1f       	adc	r25, r25
 7e8:	1a 94       	dec	r1
 7ea:	69 f7       	brne	.-38     	; 0x7c6 <__udivmodsi4_loop>
 7ec:	60 95       	com	r22
 7ee:	70 95       	com	r23
 7f0:	80 95       	com	r24
 7f2:	90 95       	com	r25
 7f4:	9b 01       	movw	r18, r22
 7f6:	ac 01       	movw	r20, r24
 7f8:	bd 01       	movw	r22, r26
 7fa:	cf 01       	movw	r24, r30
 7fc:	08 95       	ret

000007fe <__umulhisi3>:
 7fe:	a2 9f       	mul	r26, r18
 800:	b0 01       	movw	r22, r0
 802:	b3 9f       	mul	r27, r19
 804:	c0 01       	movw	r24, r0
 806:	a3 9f       	mul	r26, r19
 808:	70 0d       	add	r23, r0
 80a:	81 1d       	adc	r24, r1
 80c:	11 24       	eor	r1, r1
 80e:	91 1d       	adc	r25, r1
 810:	b2 9f       	mul	r27, r18
 812:	70 0d       	add	r23, r0
 814:	81 1d       	adc	r24, r1
 816:	11 24       	eor	r1, r1
 818:	91 1d       	adc	r25, r1
 81a:	08 95       	ret

0000081c <_exit>:
 81c:	f8 94       	cli

0000081e <__stop_program>:
 81e:	ff cf       	rjmp	.-2      	; 0x81e <__stop_program>
