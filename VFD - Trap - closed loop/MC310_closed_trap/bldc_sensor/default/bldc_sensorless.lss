
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000942  000009f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000942  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000030  00800104  00800104  000009fa  2**0
                  ALLOC
  3 .fuse         00000003  00820000  00820000  000009fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000009fd  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000240  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b99  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012ae  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000102a  00000000  00000000  00003af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000004c0  00000000  00000000  00004b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000b1d  00000000  00000000  00004fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000066c  00000000  00000000  00005b01  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001b0  00000000  00000000  0000616d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__vector_14>
  3c:	0c 94 3a 04 	jmp	0x874	; 0x874 <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 c5 01 	jmp	0x38a	; 0x38a <__vector_22>
  5c:	0c 94 87 01 	jmp	0x30e	; 0x30e <__vector_23>
  60:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e4       	ldi	r30, 0x42	; 66
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 33       	cpi	r26, 0x34	; 52
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 23 02 	call	0x446	; 0x446 <main>
  b2:	0c 94 9f 04 	jmp	0x93e	; 0x93e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <a4910_init>:
	//RESETn (pin PB4): pull high to enable A4910
	//DIAG   (pin PC7): A4910 outputs fault conditions on this line

#include "grBLDC.h"

void a4910_init(void)   { (DDRB |= (1<<DDB4)); } //set A4910 reset pin to output
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <a4910_disable>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void a4910_disable(void) { (PORTB &= ~(1<<PORTB4)); } //set RESETn pin low
  be:	2c 98       	cbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <a4910_enable>:
  c2:	2c 9a       	sbi	0x05, 4	; 5
  c4:	08 95       	ret

000000c6 <filteredValue_counts>:

    static uint16_t lastN_samples[NUM_ADC_SAMPLES_TO_AVERAGE] = {0};

    static uint8_t index_latestSample = 0;

    lastN_samples[index_latestSample] = latest10bSample; //store latest sample
  c6:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <index_latestSample.2068>
  ca:	e2 2f       	mov	r30, r18
  cc:	f0 e0       	ldi	r31, 0x00	; 0
  ce:	ee 0f       	add	r30, r30
  d0:	ff 1f       	adc	r31, r31
  d2:	ec 5f       	subi	r30, 0xFC	; 252
  d4:	fe 4f       	sbci	r31, 0xFE	; 254
  d6:	91 83       	std	Z+1, r25	; 0x01
  d8:	80 83       	st	Z, r24
    if(++index_latestSample == NUM_ADC_SAMPLES_TO_AVERAGE) { index_latestSample = 0; } //circular buffer rollover
  da:	2f 5f       	subi	r18, 0xFF	; 255
  dc:	20 31       	cpi	r18, 0x10	; 16
  de:	19 f0       	breq	.+6      	; 0xe6 <filteredValue_counts+0x20>
  e0:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <index_latestSample.2068>
  e4:	02 c0       	rjmp	.+4      	; 0xea <filteredValue_counts+0x24>
  e6:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <index_latestSample.2068>
  ea:	e4 e0       	ldi	r30, 0x04	; 4
  ec:	f1 e0       	ldi	r31, 0x01	; 1

    uint16_t sumOfArrayElements = 0;
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0

    for(uint8_t ii=0; ii<NUM_ADC_SAMPLES_TO_AVERAGE; ii++) { sumOfArrayElements += lastN_samples[ii]; }
  f2:	21 91       	ld	r18, Z+
  f4:	31 91       	ld	r19, Z+
  f6:	82 0f       	add	r24, r18
  f8:	93 1f       	adc	r25, r19
  fa:	21 e0       	ldi	r18, 0x01	; 1
  fc:	e4 32       	cpi	r30, 0x24	; 36
  fe:	f2 07       	cpc	r31, r18
 100:	c1 f7       	brne	.-16     	; 0xf2 <filteredValue_counts+0x2c>

    return (sumOfArrayElements>>POWER_OF__NUM_ADC_SAMPLES_TO_AVERAGE);
#else
	return latest10bSample;
#endif
}
 102:	24 e0       	ldi	r18, 0x04	; 4
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	2a 95       	dec	r18
 10a:	e1 f7       	brne	.-8      	; 0x104 <filteredValue_counts+0x3e>
 10c:	08 95       	ret

0000010e <__vector_27>:

//Interrupt generated each time ADC conversion finishes
//using an interrupt so we can add other ADC channels later
//with just one channel, we could set the ADC to free running mode (and remove this ISR)
ISR(ADC_vect)
{
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	2f 93       	push	r18
 11a:	3f 93       	push	r19
 11c:	4f 93       	push	r20
 11e:	5f 93       	push	r21
 120:	6f 93       	push	r22
 122:	7f 93       	push	r23
 124:	8f 93       	push	r24
 126:	9f 93       	push	r25
 128:	af 93       	push	r26
 12a:	bf 93       	push	r27
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	ef 93       	push	r30
 132:	ff 93       	push	r31
  if(ADC_stateMachine == ADC_MEASURING_GOAL_RPM)
 134:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	11 f5       	brne	.+68     	; 0x180 <__vector_27+0x72>
  {
	uint16_t adcResult_counts = Adc_get_10_bits_result(); //~520 counts max (grBLDC goalRPM has DIV2 voltage divider LPF)
 13c:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 140:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	98 2f       	mov	r25, r24
 148:	88 27       	eor	r24, r24

	adcResult_counts = filteredValue_counts(adcResult_counts);
 14a:	82 0f       	add	r24, r18
 14c:	91 1d       	adc	r25, r1
 14e:	0e 94 63 00 	call	0xc6	; 0xc6 <filteredValue_counts>

    #define ADC_COUNTS_TO_RPM__GAIN     14
    #define ADC_COUNTS_TO_RPM__OFFSET 1360
    //y=mx+b //see ../Documentation/RPM LUT.ods
	
    uint16_t adcResultScaled_goalRPM = (uint16_t)(ADC_COUNTS_TO_RPM__GAIN * adcResult_counts) + ADC_COUNTS_TO_RPM__OFFSET;
 152:	2e e0       	ldi	r18, 0x0E	; 14
 154:	ac 01       	movw	r20, r24
 156:	24 9f       	mul	r18, r20
 158:	c0 01       	movw	r24, r0
 15a:	25 9f       	mul	r18, r21
 15c:	90 0d       	add	r25, r0
 15e:	11 24       	eor	r1, r1
 160:	ec 01       	movw	r28, r24
 162:	c0 5b       	subi	r28, 0xB0	; 176
 164:	da 4f       	sbci	r29, 0xFA	; 250

	if(adcResultScaled_goalRPM < MIN_ALLOWED_RPM) { a4910_disable(); }
 166:	cc 3d       	cpi	r28, 0xDC	; 220
 168:	55 e0       	ldi	r21, 0x05	; 5
 16a:	d5 07       	cpc	r29, r21
 16c:	18 f4       	brcc	.+6      	; 0x174 <__vector_27+0x66>
 16e:	0e 94 5f 00 	call	0xbe	; 0xbe <a4910_disable>
 172:	02 c0       	rjmp	.+4      	; 0x178 <__vector_27+0x6a>
	else                                          { a4910_enable(); }
 174:	0e 94 61 00 	call	0xc2	; 0xc2 <a4910_enable>

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
 178:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <goalSpeed_RPM+0x1>
 17c:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <goalSpeed_RPM>
    adc_goalRPM_set(adcResultScaled_goalRPM);
  }

  // else if(ADC_stateMachine == ADC_MEASURING_CURRENT)
  
  ADC_hardwareStatus = ADCFREE;
 180:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <ADC_hardwareStatus>
}
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	bf 91       	pop	r27
 18e:	af 91       	pop	r26
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	7f 91       	pop	r23
 196:	6f 91       	pop	r22
 198:	5f 91       	pop	r21
 19a:	4f 91       	pop	r20
 19c:	3f 91       	pop	r19
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <adc_init>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_init(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
  //disable digital input circuitry on all pins used as analog inputs.
  //reduces power consumption, particularly when an analog signal is near Vcc/2.
  DIDR1 |= (1<<ADC9D)|(1<<ADC8D); //CUR_C & CUR_B ADC inputs
 1ae:	ef e7       	ldi	r30, 0x7F	; 127
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	83 60       	ori	r24, 0x03	; 3
 1b6:	80 83       	st	Z, r24
  DIDR0 |= (1<<ADC6D)|(1<<ADC5D); //CUR_A & goalRPM ADC inputs
 1b8:	ee e7       	ldi	r30, 0x7E	; 126
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	80 66       	ori	r24, 0x60	; 96
 1c0:	80 83       	st	Z, r24
  //CUR_A   is Pin PB5/ADC6
  //CUR_B   is Pin PC5/ADC9
  //CUR_C   is Pin PC4/ADC8
  //goalRPM is PIN PB2/ADC5

  Adc_enable();
 1c2:	ea e7       	ldi	r30, 0x7A	; 122
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	80 68       	ori	r24, 0x80	; 128
 1ca:	80 83       	st	Z, r24
  Adc_set_prescaler(ADC_DIV_CLOCK_BY_4);
 1cc:	80 81       	ld	r24, Z
 1ce:	88 7f       	andi	r24, 0xF8	; 248
 1d0:	80 83       	st	Z, r24
 1d2:	80 81       	ld	r24, Z
 1d4:	82 60       	ori	r24, 0x02	; 2
 1d6:	80 83       	st	Z, r24

  Adc_enable_vcc_vref();
 1d8:	ac e7       	ldi	r26, 0x7C	; 124
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	8c 91       	ld	r24, X
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	8c 93       	st	X, r24
 1e2:	8c 91       	ld	r24, X
 1e4:	80 64       	ori	r24, 0x40	; 64
 1e6:	8c 93       	st	X, r24
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 1e8:	cb e7       	ldi	r28, 0x7B	; 123
 1ea:	d0 e0       	ldi	r29, 0x00	; 0
 1ec:	88 81       	ld	r24, Y
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	88 83       	st	Y, r24
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 1f2:	88 81       	ld	r24, Y
 1f4:	8f 7b       	andi	r24, 0xBF	; 191
 1f6:	88 83       	st	Y, r24

  Adc_select_channel(ADC_INPUT_ADC5);  //goalRPM
 1f8:	8c 91       	ld	r24, X
 1fa:	80 7e       	andi	r24, 0xE0	; 224
 1fc:	85 60       	ori	r24, 0x05	; 5
 1fe:	8c 93       	st	X, r24

  Adc_right_adjust_result(); //0b------xx xxxxxxxx
 200:	8c 91       	ld	r24, X
 202:	8f 7d       	andi	r24, 0xDF	; 223
 204:	8c 93       	st	X, r24
  Adc_enable_high_speed_mode();
 206:	88 81       	ld	r24, Y
 208:	80 68       	ori	r24, 0x80	; 128
 20a:	88 83       	st	Y, r24
  adc_generateInterruptAfterConversion(); 
 20c:	80 81       	ld	r24, Z
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	80 83       	st	Z, r24
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <adc_scheduler>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_scheduler(uint8_t channel)
{ 
  if(ADC_hardwareStatus == ADCFREE)
 218:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <ADC_hardwareStatus>
 21c:	91 11       	cpse	r25, r1
 21e:	12 c0       	rjmp	.+36     	; 0x244 <adc_scheduler+0x2c>
  {
    ADC_hardwareStatus = ADCBUSY;
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <ADC_hardwareStatus>

    switch(channel)
 226:	81 30       	cpi	r24, 0x01	; 1
 228:	69 f4       	brne	.+26     	; 0x244 <adc_scheduler+0x2c>
    {
      case ADC_MEASURING_GOAL_RPM:
        Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 22a:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 22e:	90 7e       	andi	r25, 0xE0	; 224
 230:	95 60       	ori	r25, 0x05	; 5
 232:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 236:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 23a:	90 64       	ori	r25, 0x40	; 64
 23c:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
        ADC_stateMachine = ADC_MEASURING_GOAL_RPM;
 240:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 244:	08 95       	ret

00000246 <adc_goalRPM_get>:
  }
}

////////////////////////////////////////////////////////////////////////////////////////

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }
 246:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <goalSpeed_RPM>
 24a:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <goalSpeed_RPM+0x1>
 24e:	08 95       	ret

00000250 <adc_goalRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
 250:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <goalSpeed_RPM+0x1>
 254:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <goalSpeed_RPM>
 258:	08 95       	ret

0000025a <hall_init>:

void hall_init(void)
{
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR |= ( (1<<PCIE1) | (1<<PCIE2) );
 266:	e8 e6       	ldi	r30, 0x68	; 104
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	86 60       	ori	r24, 0x06	; 6
 26e:	80 83       	st	Z, r24
 270:	08 95       	ret

00000272 <hall_getPosition>:
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
  
  //Build Hall state 0b0000 0BGY (B=BLU, G=GRN, Y=YEL)
  uint8_t state = ( (( (PIND & (1<<PIND1)) >> PIND1) << 2) |  //Hall BLU //MSB
 272:	69 b1       	in	r22, 0x09	; 9
                    (( (PINC & (1<<PINC1)) >> PINC1) << 0) |  //Hall YEL //LSB
 274:	96 b1       	in	r25, 0x06	; 6
                    (( (PIND & (1<<PIND2)) >> PIND2) << 1) ); //Hall GRN
 276:	89 b1       	in	r24, 0x09	; 9
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
  
  //Build Hall state 0b0000 0BGY (B=BLU, G=GRN, Y=YEL)
  uint8_t state = ( (( (PIND & (1<<PIND1)) >> PIND1) << 2) |  //Hall BLU //MSB
 278:	61 fb       	bst	r22, 1
 27a:	44 27       	eor	r20, r20
 27c:	40 f9       	bld	r20, 0
 27e:	50 e0       	ldi	r21, 0x00	; 0
 280:	44 0f       	add	r20, r20
 282:	55 1f       	adc	r21, r21
 284:	44 0f       	add	r20, r20
 286:	55 1f       	adc	r21, r21
 288:	82 fb       	bst	r24, 2
 28a:	22 27       	eor	r18, r18
 28c:	20 f9       	bld	r18, 0
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	22 0f       	add	r18, r18
 292:	33 1f       	adc	r19, r19
 294:	24 2b       	or	r18, r20
 296:	96 95       	lsr	r25
 298:	91 70       	andi	r25, 0x01	; 1
 29a:	82 2f       	mov	r24, r18
 29c:	89 2b       	or	r24, r25
                    (( (PINC & (1<<PINC1)) >> PINC1) << 0) |  //Hall YEL //LSB
                    (( (PIND & (1<<PIND2)) >> PIND2) << 1) ); //Hall GRN

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 29e:	11 f0       	breq	.+4      	; 0x2a4 <hall_getPosition+0x32>
 2a0:	87 30       	cpi	r24, 0x07	; 7
 2a2:	51 f4       	brne	.+20     	; 0x2b8 <hall_getPosition+0x46>
      (numConsecutiveInvalidStates < 10)                ) 
 2a4:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <numConsecutiveInvalidStates.2068>
  //Build Hall state 0b0000 0BGY (B=BLU, G=GRN, Y=YEL)
  uint8_t state = ( (( (PIND & (1<<PIND1)) >> PIND1) << 2) |  //Hall BLU //MSB
                    (( (PINC & (1<<PINC1)) >> PINC1) << 0) |  //Hall YEL //LSB
                    (( (PIND & (1<<PIND2)) >> PIND2) << 1) ); //Hall GRN

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 2a8:	9a 30       	cpi	r25, 0x0A	; 10
 2aa:	30 f4       	brcc	.+12     	; 0x2b8 <hall_getPosition+0x46>
      (numConsecutiveInvalidStates < 10)                ) 
  {
	  //hall states in transition
	  state = state_previous;
 2ac:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <state_previous.2067>
	  numConsecutiveInvalidStates++;
 2b0:	9f 5f       	subi	r25, 0xFF	; 255
 2b2:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <numConsecutiveInvalidStates.2068>
 2b6:	08 95       	ret
  } 
  else //valid Hall state (or motor is stalled)
  {
	  state_previous = state; //store for next iteration
 2b8:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <state_previous.2067>
	  numConsecutiveInvalidStates = 0;
 2bc:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <numConsecutiveInvalidStates.2068>
  } 
	  
  return state;
}
 2c0:	08 95       	ret

000002c2 <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC_vect )  //Hall_A & Hall_C share the same interrupt vector byte
{
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	2f 93       	push	r18
 2ce:	3f 93       	push	r19
 2d0:	4f 93       	push	r20
 2d2:	5f 93       	push	r21
 2d4:	6f 93       	push	r22
 2d6:	7f 93       	push	r23
 2d8:	8f 93       	push	r24
 2da:	9f 93       	push	r25
 2dc:	af 93       	push	r26
 2de:	bf 93       	push	r27
 2e0:	ef 93       	push	r30
 2e2:	ff 93       	push	r31
  psc_commutateOutputWaveforms( pid_dutyCycle_get() );
 2e4:	0e 94 78 02 	call	0x4f0	; 0x4f0 <pid_dutyCycle_get>
 2e8:	0e 94 13 03 	call	0x626	; 0x626 <psc_commutateOutputWaveforms>
}
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <__vector_23>:

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B_vect )
{
 30e:	1f 92       	push	r1
 310:	0f 92       	push	r0
 312:	0f b6       	in	r0, 0x3f	; 63
 314:	0f 92       	push	r0
 316:	11 24       	eor	r1, r1
 318:	2f 93       	push	r18
 31a:	3f 93       	push	r19
 31c:	4f 93       	push	r20
 31e:	5f 93       	push	r21
 320:	6f 93       	push	r22
 322:	7f 93       	push	r23
 324:	8f 93       	push	r24
 326:	9f 93       	push	r25
 328:	af 93       	push	r26
 32a:	bf 93       	push	r27
 32c:	ef 93       	push	r30
 32e:	ff 93       	push	r31
  psc_commutateOutputWaveforms( pid_dutyCycle_get() );
 330:	0e 94 78 02 	call	0x4f0	; 0x4f0 <pid_dutyCycle_get>
 334:	0e 94 13 03 	call	0x626	; 0x626 <psc_commutateOutputWaveforms>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 338:	31 99       	sbic	0x06, 1	; 6
 33a:	02 c0       	rjmp	.+4      	; 0x340 <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	09 c0       	rjmp	.+18     	; 0x352 <__vector_23+0x44>

  if(hallB_state == HALL_B_HIGH)
  {
    if(hallB_state_previous == HALL_B_LOW) 
 340:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <hallB_state_previous.2081>
 344:	81 11       	cpse	r24, r1
 346:	04 c0       	rjmp	.+8      	; 0x350 <__vector_23+0x42>
    {
      //rising edge just occurred on Hall B
      timing_calculateRPM();
 348:	0e 94 60 04 	call	0x8c0	; 0x8c0 <timing_calculateRPM>
	  pid_dutyCycle_calculate();
 34c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <pid_dutyCycle_calculate>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 350:	81 e0       	ldi	r24, 0x01	; 1
      timing_calculateRPM();
	  pid_dutyCycle_calculate();
    }
  }

  hallB_state_previous = hallB_state;
 352:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <hallB_state_previous.2081>
}
 356:	ff 91       	pop	r31
 358:	ef 91       	pop	r30
 35a:	bf 91       	pop	r27
 35c:	af 91       	pop	r26
 35e:	9f 91       	pop	r25
 360:	8f 91       	pop	r24
 362:	7f 91       	pop	r23
 364:	6f 91       	pop	r22
 366:	5f 91       	pop	r21
 368:	4f 91       	pop	r20
 36a:	3f 91       	pop	r19
 36c:	2f 91       	pop	r18
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <interface_init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void interface_init(void)
{
  // Use PCINT3 to detect change on PB3 (direction pin)
  PCMSK0 = (1<<PCINT3);
 378:	88 e0       	ldi	r24, 0x08	; 8
 37a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
  
  // Enable pin change interrupts on PCMSK0
  PCICR |= (1<<PCIE0);
 37e:	e8 e6       	ldi	r30, 0x68	; 104
 380:	f0 e0       	ldi	r31, 0x00	; 0
 382:	80 81       	ld	r24, Z
 384:	81 60       	ori	r24, 0x01	; 1
 386:	80 83       	st	Z, r24
 388:	08 95       	ret

0000038a <__vector_22>:
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////

ISR( DIRECTION_PIN_CHANGE_vect )
{
 38a:	1f 92       	push	r1
 38c:	0f 92       	push	r0
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	0f 92       	push	r0
 392:	11 24       	eor	r1, r1
 394:	8f 93       	push	r24
  goalRPM_status = GOALRPM_LPF_CHANGING;
 396:	82 e0       	ldi	r24, 0x02	; 2
 398:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <goalRPM_status>
}
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <interface_checkForDirectionChange>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

//see if the direction pin has changed
void interface_checkForDirectionChange(void)
{
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
	static uint8_t grblDirection_previous = 2;
	uint8_t grblDirection_now = ((PINB & (1<<PINB3)) >> (PINB3)); //0: CW (M3) //1: CCW (M4)
 3ac:	c3 b1       	in	r28, 0x03	; 3
 3ae:	c3 fb       	bst	r28, 3
 3b0:	cc 27       	eor	r28, r28
 3b2:	c0 f9       	bld	r28, 0
 3b4:	dc 2f       	mov	r29, r28

	if(grblDirection_now != grblDirection_previous)
 3b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <grblDirection_previous.2076>
 3ba:	c8 17       	cp	r28, r24
 3bc:	b1 f0       	breq	.+44     	; 0x3ea <interface_checkForDirectionChange+0x42>
	{
		while(timing_measuredRPM_get() > 500) { a4910_disable(); } //coast motor until it slows down enough to change direction
 3be:	0e 94 73 04 	call	0x8e6	; 0x8e6 <timing_measuredRPM_get>
 3c2:	85 3f       	cpi	r24, 0xF5	; 245
 3c4:	91 40       	sbci	r25, 0x01	; 1
 3c6:	18 f0       	brcs	.+6      	; 0x3ce <interface_checkForDirectionChange+0x26>
 3c8:	0e 94 5f 00 	call	0xbe	; 0xbe <a4910_disable>
 3cc:	f8 cf       	rjmp	.-16     	; 0x3be <interface_checkForDirectionChange+0x16>

		a4910_enable(); //turn FETs back on
 3ce:	0e 94 61 00 	call	0xc2	; 0xc2 <a4910_enable>

		if(grblDirection_now == 0) { motor_direction_set(MOTOR_CW); }
 3d2:	d1 11       	cpse	r29, r1
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <interface_checkForDirectionChange+0x32>
 3d6:	82 e0       	ldi	r24, 0x02	; 2
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <interface_checkForDirectionChange+0x34>
		else                       { motor_direction_set(MOTOR_CCW); }
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 6f 02 	call	0x4de	; 0x4de <motor_direction_set>
			
		pid_dutyCycle_set(0);
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <pid_dutyCycle_set>
		//adc_goalRPM_set(0); //don't set this here... ADC isn't sampling goalRPM at this point, so goalRPM will remain 0 until next interrupt occurs (e.g. 'S3000')

		grblDirection_previous = grblDirection_now;
 3e6:	c0 93 01 01 	sts	0x0101, r28	; 0x800101 <grblDirection_previous.2076>
	}
} 
 3ea:	df 91       	pop	r29
 3ec:	cf 91       	pop	r28
 3ee:	08 95       	ret

000003f0 <interface_handler>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void interface_handler(void)
{
	if (goalRPM_status == GOALRPM_LPF_CHANGING) //set inside interrupt when grbl direction pin toggles
 3f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <goalRPM_status>
 3f4:	82 30       	cpi	r24, 0x02	; 2
 3f6:	c9 f4       	brne	.+50     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
	{
		adc_scheduler(ADC_MEASURING_GOAL_RPM);
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	0e 94 0c 01 	call	0x218	; 0x218 <adc_scheduler>
		
		motor_stop();  //prevent motion while requested speed is changing
 3fe:	0e 94 58 02 	call	0x4b0	; 0x4b0 <motor_stop>
		#define GOALRPM_LPF_SETTLING_TIME_us 40000 //lowpass filter settles in 30 ms... wait at least this long
		#define NUM_ITERATIONS_FOR_LPF_TO_SETTLE (GOALRPM_LPF_SETTLING_TIME_us / CONTROL_LOOP_PERIOD_us) //division handled by pre-processor

		static uint16_t iterationCount = 0;

		if(++iterationCount > NUM_ITERATIONS_FOR_LPF_TO_SETTLE)
 402:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <iterationCount.2084>
 406:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <iterationCount.2084+0x1>
 40a:	01 96       	adiw	r24, 0x01	; 1
 40c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <iterationCount.2084+0x1>
 410:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <iterationCount.2084>
 414:	83 3e       	cpi	r24, 0xE3	; 227
 416:	94 40       	sbci	r25, 0x04	; 4
 418:	a8 f0       	brcs	.+42     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
		{
			goalRPM_status = GOALRPM_LPF_SETTLED;
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <goalRPM_status>
			iterationCount = 0;
 420:	10 92 2c 01 	sts	0x012C, r1	; 0x80012c <iterationCount.2084+0x1>
 424:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <iterationCount.2084>
 428:	08 95       	ret
		}
	}
	else
	{
		interface_checkForDirectionChange(); //We don't want to do this when grbl is toggling direction pin (to generate interrupt)
 42a:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <interface_checkForDirectionChange>
	
		if( (motor_state_get() == STOPPED) && (adc_goalRPM_get() > MIN_ALLOWED_RPM) ) { motor_run(); }
 42e:	0e 94 55 02 	call	0x4aa	; 0x4aa <motor_state_get>
 432:	81 11       	cpse	r24, r1
 434:	07 c0       	rjmp	.+14     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 436:	0e 94 23 01 	call	0x246	; 0x246 <adc_goalRPM_get>
 43a:	8d 3d       	cpi	r24, 0xDD	; 221
 43c:	95 40       	sbci	r25, 0x05	; 5
 43e:	10 f0       	brcs	.+4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 440:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <motor_run>
 444:	08 95       	ret

00000446 <main>:
	.extended = 0xFF
};

int main(void)
{
  psc_init();
 446:	0e 94 c2 02 	call	0x584	; 0x584 <psc_init>
  adc_init();
 44a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <adc_init>
  motor_init();
 44e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <motor_init>
  hall_init();
 452:	0e 94 2d 01 	call	0x25a	; 0x25a <hall_init>
  a4910_init(); //configure pin to digital output
 456:	0e 94 5d 00 	call	0xba	; 0xba <a4910_init>
  timing_timer0_init();
 45a:	0e 94 31 04 	call	0x862	; 0x862 <timing_timer0_init>
  timing_timer1_init();
 45e:	0e 94 49 04 	call	0x892	; 0x892 <timing_timer1_init>
  interface_init();
 462:	0e 94 bc 01 	call	0x378	; 0x378 <interface_init>

  Start_pll_64_mega(); // Start the 64 MHz PLL
 466:	86 e0       	ldi	r24, 0x06	; 6
 468:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 46a:	09 b4       	in	r0, 0x29	; 41
 46c:	00 fe       	sbrs	r0, 0
 46e:	fd cf       	rjmp	.-6      	; 0x46a <main+0x24>
  
  a4910_enable(); //enable MOSFET driver
 470:	0e 94 61 00 	call	0xc2	; 0xc2 <a4910_enable>
  //motor_run();

  sei(); //enable interrupts
 474:	78 94       	sei

  while(1)
  {	  	  
    if (timing_runControlLoop_get() == TRUE) //controlled by Timer0 interrupt
 476:	0e 94 2b 04 	call	0x856	; 0x856 <timing_runControlLoop_get>
 47a:	81 30       	cpi	r24, 0x01	; 1
 47c:	29 f4       	brne	.+10     	; 0x488 <main+0x42>
    {	
      timing_runControlLoop_set(FALSE); //prevent control loop from running again until next Timer0 interrupt occurs
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	0e 94 2e 04 	call	0x85c	; 0x85c <timing_runControlLoop_set>

      interface_handler();
 484:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <interface_handler>
    }
	
	if((TCNT1 > 65534) && (motor_state_get() == RUNNING) ) //hall event hasn't occurred recently
 488:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 48c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 490:	01 96       	adiw	r24, 0x01	; 1
 492:	89 f7       	brne	.-30     	; 0x476 <main+0x30>
 494:	0e 94 55 02 	call	0x4aa	; 0x4aa <motor_state_get>
 498:	81 30       	cpi	r24, 0x01	; 1
 49a:	69 f7       	brne	.-38     	; 0x476 <main+0x30>
	{
		pid_dutyCycle_set(150); //kickstart motor
 49c:	86 e9       	ldi	r24, 0x96	; 150
 49e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <pid_dutyCycle_set>
		psc_commutateOutputWaveforms(150);
 4a2:	86 e9       	ldi	r24, 0x96	; 150
 4a4:	0e 94 13 03 	call	0x626	; 0x626 <psc_commutateOutputWaveforms>
 4a8:	e6 cf       	rjmp	.-52     	; 0x476 <main+0x30>

000004aa <motor_state_get>:
volatile uint8_t motorStatus = STOPPED;
uint8_t motorDirection = MOTOR_CW;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t motor_state_get(void) { return motorStatus; }
 4aa:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <motorStatus>
 4ae:	08 95       	ret

000004b0 <motor_stop>:

////////////////////////////////////////////////////////////////////////////////////////

void motor_stop(void)
{
  motorStatus = STOPPED;
 4b0:	10 92 2d 01 	sts	0x012D, r1	; 0x80012d <motorStatus>
  adc_goalRPM_set(0);
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 28 01 	call	0x250	; 0x250 <adc_goalRPM_set>
  a4910_disable();
 4bc:	0c 94 5f 00 	jmp	0xbe	; 0xbe <a4910_disable>

000004c0 <motor_init>:

////////////////////////////////////////////////////////////////////////////////////////

void motor_init()
{
  motor_stop();
 4c0:	0e 94 58 02 	call	0x4b0	; 0x4b0 <motor_stop>
  adc_goalRPM_set(0);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 28 01 	call	0x250	; 0x250 <adc_goalRPM_set>
  timing_measuredRPM_set(0);
 4cc:	80 e0       	ldi	r24, 0x00	; 0
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <timing_measuredRPM_set>

000004d4 <motor_run>:

////////////////////////////////////////////////////////////////////////////////////////

void motor_run(void)
{
  motorStatus = RUNNING;
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <motorStatus>
  a4910_enable();
 4da:	0c 94 61 00 	jmp	0xc2	; 0xc2 <a4910_enable>

000004de <motor_direction_set>:
}

////////////////////////////////////////////////////////////////////////////////////////

void    motor_direction_set(uint8_t direction) { (direction == MOTOR_CCW) ? (motorDirection = MOTOR_CCW) : (motorDirection = MOTOR_CW); }
 4de:	81 30       	cpi	r24, 0x01	; 1
 4e0:	09 f0       	breq	.+2      	; 0x4e4 <motor_direction_set+0x6>
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <motorDirection>
 4e8:	08 95       	ret

000004ea <motor_direction_get>:
 4ea:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <motorDirection>
 4ee:	08 95       	ret

000004f0 <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 4f0:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dutyPID>
 4f4:	08 95       	ret

000004f6 <pid_dutyCycle_set>:
 4f6:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dutyPID>
 4fa:	08 95       	ret

000004fc <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
  #ifdef SPINDLE_MODE_CLOSED_LOOP 
    static int16_t summedPID = 0;

    if(adc_goalRPM_get() > MIN_ALLOWED_RPM)
 500:	0e 94 23 01 	call	0x246	; 0x246 <adc_goalRPM_get>
 504:	8d 3d       	cpi	r24, 0xDD	; 221
 506:	95 40       	sbci	r25, 0x05	; 5
 508:	80 f1       	brcs	.+96     	; 0x56a <pid_dutyCycle_calculate+0x6e>
    { 
      int16_t error_actualMinusGoal_RPM = (int16_t)timing_measuredRPM_get() - (int16_t)adc_goalRPM_get();
 50a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <timing_measuredRPM_get>
 50e:	ec 01       	movw	r28, r24
 510:	0e 94 23 01 	call	0x246	; 0x246 <adc_goalRPM_get>

      if(error_actualMinusGoal_RPM > 0) { summedPID--; }
 514:	c8 1b       	sub	r28, r24
 516:	d9 0b       	sbc	r29, r25
 518:	20 91 2e 01 	lds	r18, 0x012E	; 0x80012e <summedPID.2082>
 51c:	30 91 2f 01 	lds	r19, 0x012F	; 0x80012f <summedPID.2082+0x1>
 520:	1c 16       	cp	r1, r28
 522:	1d 06       	cpc	r1, r29
 524:	1c f4       	brge	.+6      	; 0x52c <pid_dutyCycle_calculate+0x30>
 526:	21 50       	subi	r18, 0x01	; 1
 528:	31 09       	sbc	r19, r1
 52a:	02 c0       	rjmp	.+4      	; 0x530 <pid_dutyCycle_calculate+0x34>
      else                              { summedPID++; }
 52c:	2f 5f       	subi	r18, 0xFF	; 255
 52e:	3f 4f       	sbci	r19, 0xFF	; 255
 530:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <summedPID.2082+0x1>
 534:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <summedPID.2082>
      // Duty Cycle calculation
      //summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
      //summedPID = error_actualRPM_minus_goalRPM;

      // Bound max/min PWM value
      if     ( summedPID > (int16_t)(255) ) { summedPID = 255; }
 538:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <summedPID.2082>
 53c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <summedPID.2082+0x1>
 540:	8f 3f       	cpi	r24, 0xFF	; 255
 542:	91 05       	cpc	r25, r1
 544:	21 f0       	breq	.+8      	; 0x54e <pid_dutyCycle_calculate+0x52>
 546:	1c f0       	brlt	.+6      	; 0x54e <pid_dutyCycle_calculate+0x52>
 548:	8f ef       	ldi	r24, 0xFF	; 255
 54a:	90 e0       	ldi	r25, 0x00	; 0
 54c:	05 c0       	rjmp	.+10     	; 0x558 <pid_dutyCycle_calculate+0x5c>
      else if( summedPID < (int16_t)(125) ) { summedPID = 125; }
 54e:	8d 37       	cpi	r24, 0x7D	; 125
 550:	91 05       	cpc	r25, r1
 552:	34 f4       	brge	.+12     	; 0x560 <pid_dutyCycle_calculate+0x64>
 554:	8d e7       	ldi	r24, 0x7D	; 125
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <summedPID.2082+0x1>
 55c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <summedPID.2082>
      
      dutyPID = summedPID;
 560:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <summedPID.2082>
 564:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <dutyPID>
 568:	08 c0       	rjmp	.+16     	; 0x57a <pid_dutyCycle_calculate+0x7e>
    }
    else //(adc_goalRPM_get() < MIN_ALLOWED_RPM)
    {
      summedPID = 0;
 56a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <summedPID.2082+0x1>
 56e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <summedPID.2082>
	  dutyPID = summedPID;
 572:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <dutyPID>
	  
      motor_stop(); //turn off output stage
 576:	0e 94 58 02 	call	0x4b0	; 0x4b0 <motor_stop>
  #elif defined SPINDLE_MODE_OPEN_LOOP
    dutyPID = OPEN_LOOP_STATIC_PSC_DUTY_CYCLE;
  #endif
	
  return dutyPID;
}
 57a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <dutyPID>
 57e:	df 91       	pop	r29
 580:	cf 91       	pop	r28
 582:	08 95       	ret

00000584 <psc_init>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 584:	85 b1       	in	r24, 0x05	; 5
 586:	8c 73       	andi	r24, 0x3C	; 60
 588:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
 58a:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
 58c:	58 98       	cbi	0x0b, 0	; 11

  // Configure MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 58e:	83 ec       	ldi	r24, 0xC3	; 195
 590:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	87 b9       	out	0x07, r24	; 7
  DDRD = (1<<DDD0);
 596:	8a b9       	out	0x0a, r24	; 10

//used if PSCs are controlling commutation
void psc_connectAllMOSFETs(void)
{
  //POC: PSC output configuration
  POC = ( (1<<POEN0A)|(1<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 598:	9f e3       	ldi	r25, 0x3F	; 63
 59a:	90 93 b6 00 	sts	0x00B6, r25	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
   //SA_VAL: When PSC counter is less    than this value, high FET is enabled
   //SB_VAL: When PSC counter is greater than this value, low  FET is enabled
   //The difference between SA and SB sets the dead time between phases 
   //RA_VAL: Not used in centered mode //can be used to synchronize ADC
   //RB_VAL: Not used in centered mode 
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 59e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 5a2:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 5a6:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 5aa:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 5ae:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 5b2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 5b6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 5ba:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 5be:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 5c2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 5c6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 5ca:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 5ce:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 5d2:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 5d6:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 5da:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 5de:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 5e2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL); //max value 12b free-running PSC counter counts up to
 5e6:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 5ea:	9e ef       	ldi	r25, 0xFE	; 254
 5ec:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 5f0:	94 e1       	ldi	r25, 0x14	; 20
 5f2:	90 93 b5 00 	sts	0x00B5, r25	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 5f6:	98 ed       	ldi	r25, 0xD8	; 216
 5f8:	90 93 b8 00 	sts	0x00B8, r25	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION); //PSC input is ignored

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 5fc:	28 ef       	ldi	r18, 0xF8	; 248
 5fe:	20 93 b9 00 	sts	0x00B9, r18	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 602:	90 93 ba 00 	sts	0x00BA, r25	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP); //PSC interrupt flag register
 606:	9f e0       	ldi	r25, 0x0F	; 15
 608:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

   PIM = (0<<PEVE1)|(0<<PEVE1)|(0<<PEVE2)|(0<<PEOPE); //PSC interrupt mask register
 60c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
                         //PEVE0 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE1 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE2 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEOPE high: PSC generates interrupt when end of cycle reached //low: no interrupt

   Psc_run();
 610:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 614:	08 95       	ret

00000616 <psc_disconnectAllMOSFETs>:
//////////////////////////////////////////////////////////////////////////////////////////////////

void psc_disconnectAllMOSFETs(void)
{
  //set standard pin outputs low
  PORTB &= ( ~((1<<PORTB7)|(1<<PORTB6)|(1<<PORTB0)|(1<<PORTB1)) ); //Turn off Q2/Q4/Q5/Q6, respectively
 616:	85 b1       	in	r24, 0x05	; 5
 618:	8c 73       	andi	r24, 0x3C	; 60
 61a:	85 b9       	out	0x05, r24	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 61c:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) ); //turn off Q1
 61e:	58 98       	cbi	0x0b, 0	; 11

  //POC: PSC output configuration
  POC = ( (0<<POEN0A)|(0<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 620:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
 624:	08 95       	ret

00000626 <psc_commutateOutputWaveforms>:

//Set the duty cycle values in the PSC according to the value calculate by the regulation loop
  // duty =   0: Duty Cycle   0%
  // duty = 255: Duty Cycle 100%
void psc_commutateOutputWaveforms(uint8_t duty)
{ 
 626:	cf 93       	push	r28
 628:	df 93       	push	r29
 62a:	d8 2f       	mov	r29, r24
  if ( motor_state_get() == STOPPED )
 62c:	0e 94 55 02 	call	0x4aa	; 0x4aa <motor_state_get>
 630:	81 11       	cpse	r24, r1
 632:	28 c0       	rjmp	.+80     	; 0x684 <psc_commutateOutputWaveforms+0x5e>
  {
    psc_disconnectAllMOSFETs();
 634:	0e 94 0b 03 	call	0x616	; 0x616 <psc_disconnectAllMOSFETs>

    //disable PWM on all FETs
    Psc_set_module_A(0,A_RA_VAL,0);
 638:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 63c:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 640:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 64a:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 64e:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(0,B_RA_VAL,0);
 652:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 656:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 65a:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 65e:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 662:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 666:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(0,C_RA_VAL,0);
 66a:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 66e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 672:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 676:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 67a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 67e:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 682:	e6 c0       	rjmp	.+460    	; 0x850 <__DATA_REGION_LENGTH__+0x50>

//used if PSCs are controlling commutation
void psc_connectAllMOSFETs(void)
{
  //POC: PSC output configuration
  POC = ( (1<<POEN0A)|(1<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 684:	8f e3       	ldi	r24, 0x3F	; 63
 686:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
  }
  else //(motor_state_get() == RUNNING)
  {
    psc_connectAllMOSFETs();
    
    uint8_t hallState = hall_getPosition();
 68a:	0e 94 39 01 	call	0x272	; 0x272 <hall_getPosition>
 68e:	c8 2f       	mov	r28, r24

  	//flip hall bits (6->1, 5->2. 4->3, 3->4, 2->5, 1->6)
    if(motor_direction_get() == MOTOR_CCW) { hallState = ((~hallState) & 0b00000111); }
 690:	0e 94 75 02 	call	0x4ea	; 0x4ea <motor_direction_get>
 694:	81 30       	cpi	r24, 0x01	; 1
 696:	11 f4       	brne	.+4      	; 0x69c <psc_commutateOutputWaveforms+0x76>
 698:	c0 95       	com	r28
 69a:	c7 70       	andi	r28, 0x07	; 7

  	Psc_lock();
 69c:	84 e3       	ldi	r24, 0x34	; 52
 69e:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

  	//Determine which two PSC outputs will generate PWM waveforms 
  	switch(hallState)
 6a2:	c3 30       	cpi	r28, 0x03	; 3
 6a4:	09 f4       	brne	.+2      	; 0x6a8 <psc_commutateOutputWaveforms+0x82>
 6a6:	64 c0       	rjmp	.+200    	; 0x770 <psc_commutateOutputWaveforms+0x14a>
 6a8:	00 f5       	brcc	.+64     	; 0x6ea <psc_commutateOutputWaveforms+0xc4>
 6aa:	c1 30       	cpi	r28, 0x01	; 1
 6ac:	09 f4       	brne	.+2      	; 0x6b0 <psc_commutateOutputWaveforms+0x8a>
 6ae:	3f c0       	rjmp	.+126    	; 0x72e <psc_commutateOutputWaveforms+0x108>
 6b0:	c2 30       	cpi	r28, 0x02	; 2
 6b2:	09 f0       	breq	.+2      	; 0x6b6 <psc_commutateOutputWaveforms+0x90>
 6b4:	c8 c0       	rjmp	.+400    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
  		Psc_set_module_B(0,B_RA_VAL,0);
  		Psc_set_module_C(0,C_RA_VAL,duty); //PWM_Q6 (PSC2B)(PB1)
  		break;

  		case 2: //Set_Q3Q2(); 1A 0B
  		Psc_set_module_A(0,A_RA_VAL,duty); //PWM_Q2 (PSC0B)(PB7)
 6b6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 6ba:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 6be:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 6c8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 6cc:	d0 93 a4 00 	sts	0x00A4, r29	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(duty,B_RA_VAL,0); //PWM_Q3 (PSC1A)(PC0)
 6d0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 6d4:	d0 93 a6 00 	sts	0x00A6, r29	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 6d8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 6dc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 6e0:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 6e4:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
 6e8:	9c c0       	rjmp	.+312    	; 0x822 <__DATA_REGION_LENGTH__+0x22>
    if(motor_direction_get() == MOTOR_CCW) { hallState = ((~hallState) & 0b00000111); }

  	Psc_lock();

  	//Determine which two PSC outputs will generate PWM waveforms 
  	switch(hallState)
 6ea:	c5 30       	cpi	r28, 0x05	; 5
 6ec:	09 f4       	brne	.+2      	; 0x6f0 <psc_commutateOutputWaveforms+0xca>
 6ee:	80 c0       	rjmp	.+256    	; 0x7f0 <psc_commutateOutputWaveforms+0x1ca>
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <psc_commutateOutputWaveforms+0xce>
 6f2:	64 c0       	rjmp	.+200    	; 0x7bc <psc_commutateOutputWaveforms+0x196>
 6f4:	c6 30       	cpi	r28, 0x06	; 6
 6f6:	09 f0       	breq	.+2      	; 0x6fa <psc_commutateOutputWaveforms+0xd4>
 6f8:	a6 c0       	rjmp	.+332    	; 0x846 <__DATA_REGION_LENGTH__+0x46>
  		Psc_set_module_B(0,B_RA_VAL,duty); //PWM_Q4 (PSC1B)(PB6)
  		Psc_set_module_C(0,C_RA_VAL,0);
  		break;

  		case 6: //Set_Q5Q2(); 2A 0B
  		Psc_set_module_A(0,A_RA_VAL,duty); //PWM_Q2 (PSC0B)(PB7)
 6fa:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 6fe:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 702:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 706:	81 e0       	ldi	r24, 0x01	; 1
 708:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 70c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 710:	d0 93 a4 00 	sts	0x00A4, r29	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(0,B_RA_VAL,0);
 714:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 718:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 71c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 720:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 724:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 728:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
 72c:	7f c0       	rjmp	.+254    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>

  	//Determine which two PSC outputs will generate PWM waveforms 
  	switch(hallState)
  	{
  		case 1:  
  		Psc_set_module_A(duty,A_RA_VAL,0); //PWM_Q1 (PSC0A)(PD0)
 72e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 732:	d0 93 a0 00 	sts	0x00A0, r29	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 736:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 73a:	c0 93 a2 00 	sts	0x00A2, r28	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 73e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 742:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(0,B_RA_VAL,0);
 746:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 74a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 74e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 752:	c0 93 a8 00 	sts	0x00A8, r28	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 756:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 75a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
  		Psc_set_module_C(0,C_RA_VAL,duty); //PWM_Q6 (PSC2B)(PB1)
 75e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 762:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 766:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 76a:	c0 93 ae 00 	sts	0x00AE, r28	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 76e:	21 c0       	rjmp	.+66     	; 0x7b2 <psc_commutateOutputWaveforms+0x18c>
  		Psc_set_module_B(duty,B_RA_VAL,0); //PWM_Q3 (PSC1A)(PC0)
  		Psc_set_module_C(0,C_RA_VAL,0);
  		break;

  		case 3: //Set_Q3Q6(); 1A 2B
  		Psc_set_module_A(0,A_RA_VAL,0);
 770:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 774:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 778:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 782:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 786:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(duty,B_RA_VAL,0); //PWM_Q3 (PSC1A)(PC0)
 78a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 78e:	d0 93 a6 00 	sts	0x00A6, r29	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 792:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 796:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 79a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 79e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
  		Psc_set_module_C(0,C_RA_VAL,duty); //PWM_Q6 (PSC2B)(PB1)
 7a2:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 7a6:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 7aa:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 7ae:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 7b2:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 7b6:	d0 93 b0 00 	sts	0x00B0, r29	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  		break;
 7ba:	47 c0       	rjmp	.+142    	; 0x84a <__DATA_REGION_LENGTH__+0x4a>

  		case 4: //Set_Q5Q4(); 2A 1B
  		Psc_set_module_A(0,A_RA_VAL,0);
 7bc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 7c0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 7c4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 7ce:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 7d2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(0,B_RA_VAL,duty); //PWM_Q4 (PSC1B)(PB6)
 7d6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 7da:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 7de:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 7e2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 7e6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 7ea:	d0 93 aa 00 	sts	0x00AA, r29	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
 7ee:	1e c0       	rjmp	.+60     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
  		Psc_set_module_C(duty,C_RA_VAL,0); //PWM_Q5 (PSC2A)(PB0)
  		break;

  		case 5: //Set_Q1Q4(); 0A 1B
  		Psc_set_module_A(duty,A_RA_VAL,0); //PWM_Q1 (PSC0A)(PD0)
 7f0:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 7f4:	d0 93 a0 00 	sts	0x00A0, r29	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 7f8:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 802:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 806:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
  		Psc_set_module_B(0,B_RA_VAL,duty); //PWM_Q4 (PSC1B)(PB6)
 80a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 80e:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 812:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 816:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 81a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 81e:	d0 93 aa 00 	sts	0x00AA, r29	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
  		Psc_set_module_C(0,C_RA_VAL,0);
 822:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 826:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 82a:	04 c0       	rjmp	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
  		break;

  		case 6: //Set_Q5Q2(); 2A 0B
  		Psc_set_module_A(0,A_RA_VAL,duty); //PWM_Q2 (PSC0B)(PB7)
  		Psc_set_module_B(0,B_RA_VAL,0);
  		Psc_set_module_C(duty,C_RA_VAL,0); //PWM_Q5 (PSC2A)(PB0)
 82c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 830:	d0 93 ac 00 	sts	0x00AC, r29	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 834:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 838:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 83c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 840:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  		break;
 844:	02 c0       	rjmp	.+4      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
        
  		default: psc_disconnectAllMOSFETs(); break;
 846:	0e 94 0b 03 	call	0x616	; 0x616 <psc_disconnectAllMOSFETs>
  	}

    Psc_unlock();
 84a:	84 e1       	ldi	r24, 0x14	; 20
 84c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>
  }
}
 850:	df 91       	pop	r29
 852:	cf 91       	pop	r28
 854:	08 95       	ret

00000856 <timing_runControlLoop_get>:

volatile uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
 856:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <runControlLoop>
 85a:	08 95       	ret

0000085c <timing_runControlLoop_set>:
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 85c:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <runControlLoop>
 860:	08 95       	ret

00000862 <timing_timer0_init>:
//Configure 8b Timer0 //count up to OCR0A
//interrupt occurs when timer value is OCR0A
//interrupt causes main control loop to execute
void timing_timer0_init(void)
{
  TCCR0A = (1<<WGM01); //set timer mode=CTC, don't connect timer to any output pins
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1<<CS01)|(1<<CS00); //prescale Timer0 clock to CPU/64 prescaler //MUST also change TIMER0_TICK_PERIOD_us constant!
 866:	93 e0       	ldi	r25, 0x03	; 3
 868:	95 bd       	out	0x25, r25	; 37
  OCR0A  = TIMER0_COUNTS_TO; // f_interrupt = 1/(16MHz/64DIV)*(OCR0A+1) //OCR0A=7: 32us tick (512 clocks @ 16 MHz)
 86a:	97 e0       	ldi	r25, 0x07	; 7
 86c:	97 bd       	out	0x27, r25	; 39
  TIMSK0 = (1<<OCIE0A); // Output compare A Match interrupt Enable
 86e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 872:	08 95       	ret

00000874 <__vector_15>:

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 874:	1f 92       	push	r1
 876:	0f 92       	push	r0
 878:	0f b6       	in	r0, 0x3f	; 63
 87a:	0f 92       	push	r0
 87c:	11 24       	eor	r1, r1
 87e:	8f 93       	push	r24
volatile uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <runControlLoop>

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 886:	8f 91       	pop	r24
 888:	0f 90       	pop	r0
 88a:	0f be       	out	0x3f, r0	; 63
 88c:	0f 90       	pop	r0
 88e:	1f 90       	pop	r1
 890:	18 95       	reti

00000892 <timing_timer1_init>:

//configure 16b Timer1: count up to 2^16
//used to calculate RPM (by measuring time between HallB rising edges)
void timing_timer1_init(void)
{
  TCCR1A = 0; //set timer mode=normal, don't connect timer to any output pins
 892:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = (0<<CS12)|(1<<CS11)|(1<<CS10); //prescale Timer1 clock to CPU/64 prescaler //MUST also change TIMER1_TICK_PERIOD_us constant!
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TIMSK1 = (1<<TOIE1); //generate interrupt each time an overflow occurs
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 8a2:	08 95       	ret

000008a4 <__vector_14>:
//used to determine actual spindle RPM
//Timer1 increments every 4us ( 1/[16MHz/64] )
//Timer1 overflow interrupt occurs if no HallB rising edge occurs after ~262 milliseconds (2^16 * 4us) //HallB interrupt resets TCNT1 to zero)
//The value on Timer1 is the time between each Hall_B rising edge
ISR(TIMER1_OVF_vect)
{
 8a4:	1f 92       	push	r1
 8a6:	0f 92       	push	r0
 8a8:	0f b6       	in	r0, 0x3f	; 63
 8aa:	0f 92       	push	r0
 8ac:	11 24       	eor	r1, r1

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 8ae:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <motorRPM_measured+0x1>
 8b2:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <motorRPM_measured>
ISR(TIMER1_OVF_vect)
{
  //timer1 hit max value //spindle isn't spinning
  //TCNT1=0x00; //set Timer1 value to 0 //don't reset... we only want interrupt to fire once
  timing_measuredRPM_set(0);
}
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <timing_calculateRPM>:

////////////////////////////////////////////////////////////////////////////////////////

inline void timing_calculateRPM(void)
{
  uint16_t timerCount = TCNT1; //retrive 16b timer value
 8c0:	e4 e8       	ldi	r30, 0x84	; 132
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	20 81       	ld	r18, Z
 8c6:	31 81       	ldd	r19, Z+1	; 0x01
  TCNT1 = 0x00; //reset Timer 1 ASAP (to minimize jitter)
 8c8:	11 82       	std	Z+1, r1	; 0x01
 8ca:	10 82       	st	Z, r1
    //hallFrequency_Hz = 1 / (timeSinceLastInterrupt_us * 1E-6)
    //shaftRPM_BLDC = (hallFrequency_Hz / BLDC_NUM_POLE_PAIRS) * SECONDS_PER_MINUTE
    //spindleRPM = shaftRPM_BLDC * SHEAVE_RATIO
  #define TIMER1_SPINDLE_RPM_CONSTANT (uint32_t)((SHEAVE_RATIO * MICROSECONDS_PER_SECOND * SECONDS_PER_MINUTE) / (BLDC_NUM_POLE_PAIRS * TIMER1_TICK_PERIOD_us))
  
  uint16_t spindleRPM_measured = TIMER1_SPINDLE_RPM_CONSTANT / timerCount; //executes in 625 ns (10 clock cycles)
 8cc:	40 e0       	ldi	r20, 0x00	; 0
 8ce:	50 e0       	ldi	r21, 0x00	; 0
 8d0:	60 ee       	ldi	r22, 0xE0	; 224
 8d2:	70 e7       	ldi	r23, 0x70	; 112
 8d4:	82 e7       	ldi	r24, 0x72	; 114
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__udivmodsi4>

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 8dc:	30 93 32 01 	sts	0x0132, r19	; 0x800132 <motorRPM_measured+0x1>
 8e0:	20 93 31 01 	sts	0x0131, r18	; 0x800131 <motorRPM_measured>
 8e4:	08 95       	ret

000008e6 <timing_measuredRPM_get>:
  #endif
}

////////////////////////////////////////////////////////////////////////////////////////

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }
 8e6:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <motorRPM_measured>
 8ea:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <motorRPM_measured+0x1>
 8ee:	08 95       	ret

000008f0 <timing_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 8f0:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <motorRPM_measured+0x1>
 8f4:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <motorRPM_measured>
 8f8:	08 95       	ret

000008fa <__udivmodsi4>:
 8fa:	a1 e2       	ldi	r26, 0x21	; 33
 8fc:	1a 2e       	mov	r1, r26
 8fe:	aa 1b       	sub	r26, r26
 900:	bb 1b       	sub	r27, r27
 902:	fd 01       	movw	r30, r26
 904:	0d c0       	rjmp	.+26     	; 0x920 <__udivmodsi4_ep>

00000906 <__udivmodsi4_loop>:
 906:	aa 1f       	adc	r26, r26
 908:	bb 1f       	adc	r27, r27
 90a:	ee 1f       	adc	r30, r30
 90c:	ff 1f       	adc	r31, r31
 90e:	a2 17       	cp	r26, r18
 910:	b3 07       	cpc	r27, r19
 912:	e4 07       	cpc	r30, r20
 914:	f5 07       	cpc	r31, r21
 916:	20 f0       	brcs	.+8      	; 0x920 <__udivmodsi4_ep>
 918:	a2 1b       	sub	r26, r18
 91a:	b3 0b       	sbc	r27, r19
 91c:	e4 0b       	sbc	r30, r20
 91e:	f5 0b       	sbc	r31, r21

00000920 <__udivmodsi4_ep>:
 920:	66 1f       	adc	r22, r22
 922:	77 1f       	adc	r23, r23
 924:	88 1f       	adc	r24, r24
 926:	99 1f       	adc	r25, r25
 928:	1a 94       	dec	r1
 92a:	69 f7       	brne	.-38     	; 0x906 <__udivmodsi4_loop>
 92c:	60 95       	com	r22
 92e:	70 95       	com	r23
 930:	80 95       	com	r24
 932:	90 95       	com	r25
 934:	9b 01       	movw	r18, r22
 936:	ac 01       	movw	r20, r24
 938:	bd 01       	movw	r22, r26
 93a:	cf 01       	movw	r24, r30
 93c:	08 95       	ret

0000093e <_exit>:
 93e:	f8 94       	cli

00000940 <__stop_program>:
 940:	ff cf       	rjmp	.-2      	; 0x940 <__stop_program>
