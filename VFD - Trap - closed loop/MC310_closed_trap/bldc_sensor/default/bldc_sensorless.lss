
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800102  00800102  0000088a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000230  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000194c  00000000  00000000  00000b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001183  00000000  00000000  00002478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e1f  00000000  00000000  000035fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  0000441c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ace  00000000  00000000  000048a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000053a  00000000  00000000  00005376  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b0  00000000  00000000  000058b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 26 01 	jmp	0x24c	; 0x24c <__vector_17>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_23>
  60:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 ef       	ldi	r30, 0xF4	; 244
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a7 31       	cpi	r26, 0x17	; 23
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 41 01 	call	0x282	; 0x282 <main>
  b2:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <A4910pinPB4_reset_Init>:
void A4910pinPB4_reset_Init(void)   { (DDRB |= (1<<DDB4));     }
void A4910pinPB4_reset_Toggle(void) { (PINB |= (1<<PINB4));    }
void A4910pinPB4_reset_Set(void)    { (PORTB |= (1<<PORTB4));  }
void A4910pinPB4_reset_Clear(void)  { (PORTB &= ~(1<<PORTB4)); }

void A4910_Disable(void) { A4910pinPB4_reset_Clear(); }
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <A4910pinPB4_reset_Set>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <A4910_Enable>:
  c2:	0c 94 5f 00 	jmp	0xbe	; 0xbe <A4910pinPB4_reset_Set>

000000c6 <init_adc>:
//! Take care that you have to select the ports which will be converted as
//! analog inputs thanks to the DIDR0 and DIDR1 registers.
//!
void init_adc(void)
{
	Adc_enable();
  c6:	ea e7       	ldi	r30, 0x7A	; 122
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	Adc_left_adjust_result();
  d0:	ac e7       	ldi	r26, 0x7C	; 124
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	8c 91       	ld	r24, X
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	8c 93       	st	X, r24
	Adc_enable_high_speed_mode();
  da:	ab e7       	ldi	r26, 0x7B	; 123
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	8c 91       	ld	r24, X
  e0:	80 68       	ori	r24, 0x80	; 128
  e2:	8c 93       	st	X, r24
	adc_generateInterruptAfterConversion();
  e4:	80 81       	ld	r24, Z
  e6:	88 60       	ori	r24, 0x08	; 8
  e8:	80 83       	st	Z, r24
	#elif (ADC_PRESCALER == 16)
		Adc_set_prescaler(4);
	#elif (ADC_PRESCALER ==  8)
		Adc_set_prescaler( 3);
	#elif (ADC_PRESCALER ==  4)
		Adc_set_prescaler( 2);
  ea:	80 81       	ld	r24, Z
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	80 83       	st	Z, r24
  f0:	80 81       	ld	r24, Z
  f2:	82 60       	ori	r24, 0x02	; 2
  f4:	80 83       	st	Z, r24
  f6:	08 95       	ret

000000f8 <hall_goalRPM_get>:

uint16_t motorSpeed_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
  f8:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <goalRPM_ADC_value>
  fc:	08 95       	ret

000000fe <hall_goalRPM_set>:
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }
  fe:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <goalRPM_ADC_value>
 102:	08 95       	ret

00000104 <hall_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint16_t measured_speed) { motorSpeed_measured = measured_speed; }
 104:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <motorSpeed_measured+0x1>
 108:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <motorSpeed_measured>
 10c:	08 95       	ret

0000010e <hall_measuredRPM_get>:
uint16_t hall_measuredRPM_get(void) { return motorSpeed_measured; }
 10e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <motorSpeed_measured>
 112:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <motorSpeed_measured+0x1>
 116:	08 95       	ret

00000118 <hall_getPosition>:
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 118:	99 b1       	in	r25, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
 11a:	86 b1       	in	r24, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
 11c:	29 b1       	in	r18, 0x09	; 9
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 11e:	38 2f       	mov	r19, r24
 120:	32 70       	andi	r19, 0x02	; 2
 122:	82 2f       	mov	r24, r18
 124:	84 70       	andi	r24, 0x04	; 4
 126:	83 2b       	or	r24, r19
 128:	96 95       	lsr	r25
 12a:	91 70       	andi	r25, 0x01	; 1
 12c:	89 2b       	or	r24, r25
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 12e:	11 f0       	breq	.+4      	; 0x134 <hall_getPosition+0x1c>
 130:	87 30       	cpi	r24, 0x07	; 7
 132:	51 f4       	brne	.+20     	; 0x148 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
 134:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <numConsecutiveInvalidStates.2086>
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 138:	9a 30       	cpi	r25, 0x0A	; 10
 13a:	30 f4       	brcc	.+12     	; 0x148 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
  {
	  //hall states in transition
	  state = state_previous;
 13c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state_previous.2085>
	  numConsecutiveInvalidStates++;
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <numConsecutiveInvalidStates.2086>
 146:	08 95       	ret
	  //JTS2doLater: This would be a good spot to detect for stalled motor (to tell 328p)
  } 
  else //valid Hall state (or motor is stalled)
  {
	  state_previous = state;
 148:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state_previous.2085>
	  numConsecutiveInvalidStates = 0;
 14c:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <numConsecutiveInvalidStates.2086>
  } 
	  
  return state;
}
 150:	08 95       	ret

00000152 <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC() )  //Hall_A & Hall_C share the same interrupt vector byte
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	3f 93       	push	r19
 160:	4f 93       	push	r20
 162:	5f 93       	push	r21
 164:	6f 93       	push	r22
 166:	7f 93       	push	r23
 168:	8f 93       	push	r24
 16a:	9f 93       	push	r25
 16c:	af 93       	push	r26
 16e:	bf 93       	push	r27
 170:	ef 93       	push	r30
 172:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 174:	0e 94 8c 00 	call	0x118	; 0x118 <hall_getPosition>
 178:	0e 94 c9 02 	call	0x592	; 0x592 <mc_commutateFETs>
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	bf 91       	pop	r27
 182:	af 91       	pop	r26
 184:	9f 91       	pop	r25
 186:	8f 91       	pop	r24
 188:	7f 91       	pop	r23
 18a:	6f 91       	pop	r22
 18c:	5f 91       	pop	r21
 18e:	4f 91       	pop	r20
 190:	3f 91       	pop	r19
 192:	2f 91       	pop	r18
 194:	0f 90       	pop	r0
 196:	0f be       	out	0x3f, r0	; 63
 198:	0f 90       	pop	r0
 19a:	1f 90       	pop	r1
 19c:	18 95       	reti

0000019e <hall_calculateRPM>:

  uint16_t timer_value;
  uint16_t new_measured_speed;

  // Two 8 bits variables are use to simulate a 16b timer
  timer_value = (ovf_timer<<8) + TCNT0;
 19e:	86 b5       	in	r24, 0x26	; 38
 1a0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <ovf_timer>
 1a4:	30 e0       	ldi	r19, 0x00	; 0
 1a6:	32 2f       	mov	r19, r18
 1a8:	22 27       	eor	r18, r18
 1aa:	28 0f       	add	r18, r24
 1ac:	31 1d       	adc	r19, r1
  
  if (timer_value == 0) {timer_value += 1 ;} // prevent DIV by 0 in next line
 1ae:	21 15       	cp	r18, r1
 1b0:	31 05       	cpc	r19, r1
 1b2:	11 f4       	brne	.+4      	; 0x1b8 <hall_calculateRPM+0x1a>
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint16_t measured_speed) { motorSpeed_measured = measured_speed; }
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	65 e8       	ldi	r22, 0x85	; 133
 1be:	7f ec       	ldi	r23, 0xCF	; 207
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	0e 94 9d 03 	call	0x73a	; 0x73a <__divmodsi4>
 1c8:	30 93 06 01 	sts	0x0106, r19	; 0x800106 <motorSpeed_measured+0x1>
 1cc:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <motorSpeed_measured>
    // else get the real speed
	hall_measuredRPM_set(new_measured_speed);	
  #endif

  // Reset Timer 0 register and variables
  TCNT0=0x00;
 1d0:	16 bc       	out	0x26, r1	; 38
  ovf_timer = 0;
 1d2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ovf_timer>
 1d6:	08 95       	ret

000001d8 <__vector_23>:
}

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B() )
{
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 1fa:	0e 94 8c 00 	call	0x118	; 0x118 <hall_getPosition>
 1fe:	0e 94 c9 02 	call	0x592	; 0x592 <mc_commutateFETs>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 202:	31 99       	sbic	0x06, 1	; 6
 204:	02 c0       	rjmp	.+4      	; 0x20a <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 206:	80 e0       	ldi	r24, 0x00	; 0
 208:	07 c0       	rjmp	.+14     	; 0x218 <__vector_23+0x40>

  if ( (hallB_state          == HALL_B_HIGH ) &&
 20a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 20e:	81 11       	cpse	r24, r1
 210:	02 c0       	rjmp	.+4      	; 0x216 <__vector_23+0x3e>
       (hallB_state_previous == HALL_B_LOW  )  )
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
 212:	0e 94 cf 00 	call	0x19e	; 0x19e <hall_calculateRPM>
  mc_commutateFETs( hall_getPosition() );

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 216:	81 e0       	ldi	r24, 0x01	; 1
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
  }

  hallB_state_previous = hallB_state;
 218:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 21c:	ff 91       	pop	r31
 21e:	ef 91       	pop	r30
 220:	bf 91       	pop	r27
 222:	af 91       	pop	r26
 224:	9f 91       	pop	r25
 226:	8f 91       	pop	r24
 228:	7f 91       	pop	r23
 22a:	6f 91       	pop	r22
 22c:	5f 91       	pop	r21
 22e:	4f 91       	pop	r20
 230:	3f 91       	pop	r19
 232:	2f 91       	pop	r18
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <hall_init_rpm_timer0>:
 * @pre None
 * @post Timer0 initialized.
*/
void hall_init_rpm_timer0(void)
{
  TCCR0A = 0;
 23e:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 24a:	08 95       	ret

0000024c <__vector_17>:
  * @brief Timer0 Overflow for speed measurement
  * @pre configuration of timer 0
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
 24c:	1f 92       	push	r1
 24e:	0f 92       	push	r0
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	0f 92       	push	r0
 254:	11 24       	eor	r1, r1
 256:	8f 93       	push	r24
  TCNT0=0x00;
 258:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
 25a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <ovf_timer>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
 260:	84 36       	cpi	r24, 0x64	; 100
 262:	18 f4       	brcc	.+6      	; 0x26a <__vector_17+0x1e>
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
  TCNT0=0x00;
  ovf_timer++;
 264:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <ovf_timer>
 268:	06 c0       	rjmp	.+12     	; 0x276 <__vector_17+0x2a>
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
 26a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <ovf_timer>
uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint16_t measured_speed) { motorSpeed_measured = measured_speed; }
 26e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <motorSpeed_measured+0x1>
 272:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <motorSpeed_measured>
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
    hall_measuredRPM_set(0);
  }
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <main>:
uint16_t g_regulation_period = 0;  //sampling period
extern uint8_t overcurrent;

int main(void)
{
  mc_motor_init();
 282:	0e 94 45 03 	call	0x68a	; 0x68a <mc_motor_init>
  
  mci_motor_run();
 286:	0e 94 05 03 	call	0x60a	; 0x60a <mci_motor_run>
  
  //hall_goalRPM_set(255); //debug
  
  while(1)
  {	  	  
    if (mc_drv_g_tick_get() == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
 28a:	0e 94 65 01 	call	0x2ca	; 0x2ca <mc_drv_g_tick_get>
 28e:	81 30       	cpi	r24, 0x01	; 1
 290:	e1 f7       	brne	.-8      	; 0x28a <main+0x8>
    {		
      mc_drv_g_tick_set(FALSE);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 68 01 	call	0x2d0	; 0x2d0 <mc_drv_g_tick_set>
      mc_ADC_Scheduler(); // Get Current or potentiometer value
 298:	0e 94 7e 02 	call	0x4fc	; 0x4fc <mc_ADC_Scheduler>
      g_regulation_period += 1;
 29c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <g_regulation_period>
 2a0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <g_regulation_period+0x1>
 2a4:	01 96       	adiw	r24, 0x01	; 1
	    
      if(g_regulation_period >= 40) //n * 256us = Te
 2a6:	88 32       	cpi	r24, 0x28	; 40
 2a8:	91 05       	cpc	r25, r1
 2aa:	28 f4       	brcc	.+10     	; 0x2b6 <main+0x34>
  {	  	  
    if (mc_drv_g_tick_get() == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
    {		
      mc_drv_g_tick_set(FALSE);
      mc_ADC_Scheduler(); // Get Current or potentiometer value
      g_regulation_period += 1;
 2ac:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <g_regulation_period+0x1>
 2b0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <g_regulation_period>
 2b4:	06 c0       	rjmp	.+12     	; 0x2c2 <main+0x40>
	    
      if(g_regulation_period >= 40) //n * 256us = Te
      {
        g_regulation_period = 0;
 2b6:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <g_regulation_period+0x1>
 2ba:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <g_regulation_period>

        pid_dutyCycle_calculate();
 2be:	0e 94 77 03 	call	0x6ee	; 0x6ee <pid_dutyCycle_calculate>
      }

      //psc_setDutyCycle( pid_dutyCycle_get() );
      psc_setDutyCycle(255); //debug
 2c2:	8f ef       	ldi	r24, 0xFF	; 255
 2c4:	0e 94 aa 01 	call	0x354	; 0x354 <psc_setDutyCycle>
 2c8:	e0 cf       	rjmp	.-64     	; 0x28a <main+0x8>

000002ca <mc_drv_g_tick_get>:
static char ADC_stateMachine = ADC_UNITIALIZED;
static char ADC_hardwareStatus = FREE;  // ADC State //running = BUSY //not running = FREE

////////////////////////////////////////////////////////////////////////////////////////

uint8_t mc_drv_g_tick_get(void) { return g_tick; }
 2ca:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <g_tick>
 2ce:	08 95       	ret

000002d0 <mc_drv_g_tick_set>:
void mc_drv_g_tick_set(uint8_t state) { g_tick = state; }
 2d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_tick>
 2d4:	08 95       	ret

000002d6 <PSC_Init>:
////////////////////////////////////////////////////////////////////////////////////////

//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 2d6:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 2da:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 2de:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 2e8:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 2ec:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 2f0:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 2f4:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 2f8:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 2fc:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 300:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 304:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 308:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 30c:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 310:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 314:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 318:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 31c:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL);
 320:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 324:	8f ef       	ldi	r24, 0xFF	; 255
 326:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 32a:	8c e1       	ldi	r24, 0x1C	; 28
 32c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 330:	88 e9       	ldi	r24, 0x98	; 152
 332:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 336:	98 ef       	ldi	r25, 0xF8	; 248
 338:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 33c:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
 340:	8f e0       	ldi	r24, 0x0F	; 15
 342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   PIM = (1<<PEVE1);
 346:	84 e0       	ldi	r24, 0x04	; 4
 348:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

   Psc_run();
 34c:	81 e2       	ldi	r24, 0x21	; 33
 34e:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 352:	08 95       	ret

00000354 <psc_setDutyCycle>:
  #if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 354:	e5 eb       	ldi	r30, 0xB5	; 181
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	9c e3       	ldi	r25, 0x3C	; 60
 35a:	90 83       	st	Z, r25
  #if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
    Psc_set_module_A(duty,A_RA_VAL,dutydt);
    Psc_set_module_B(duty,B_RA_VAL,dutydt);
    Psc_set_module_C(duty,C_RA_VAL,dutydt);
  #else
    Psc_set_module_A(duty,A_RA_VAL,0);
 35c:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 360:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 364:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 368:	91 e0       	ldi	r25, 0x01	; 1
 36a:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 36e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 372:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,0);
 376:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 37a:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 37e:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 382:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 386:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 38a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,0);
 38e:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 392:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 396:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 39a:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 39e:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 3a2:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  #endif
#endif
   
  Psc_unlock();
 3a6:	8c e1       	ldi	r24, 0x1C	; 28
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <mc_motor_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_motor_init_timer1(void)  //JTS2doNow: swap with counter 0, which uses software 16 bit.
{
  TCCR1A = 0; //Normal port operation + Mode CTC
 3ac:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + clock prescaler=64
 3b0:	8b e0       	ldi	r24, 0x0B	; 11
 3b2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TCCR1C = 0;
 3b6:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  OCR1AH = 0; //output compare register high byte
 3ba:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  OCR1AL = 63; // f ocra = 1/(16MHz/64)*(63+1) = 256 us tick
 3be:	8f e3       	ldi	r24, 0x3F	; 63
 3c0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 3ca:	08 95       	ret

000003cc <mc_motor_init_HW>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 3cc:	85 b1       	in	r24, 0x05	; 5
 3ce:	8c 73       	andi	r24, 0x3C	; 60
 3d0:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
 3d2:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
 3d4:	58 98       	cbi	0x0b, 0	; 11

  // Set PSC MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 3d6:	83 ec       	ldi	r24, 0xC3	; 195
 3d8:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	87 b9       	out	0x07, r24	; 7
  DDRD = (1<<DDD0);
 3de:	8a b9       	out	0x0a, r24	; 10
  
  //Enable A4910 (FET driver IC)
  A4910pinPB4_reset_Init(); //configure pin to digital output
 3e0:	0e 94 5d 00 	call	0xba	; 0xba <A4910pinPB4_reset_Init>
  A4910_Enable(); //enable MOSFET driver
 3e4:	0e 94 61 00 	call	0xc2	; 0xc2 <A4910_Enable>

  // Set to disable digital input circuitry on all pins used as analog inputs.
  // This reduces power consumption, particularly when an analog signal is near Vcc/2.
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D); //CUR_B & CUR_C ADC inputs
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
  DIDR0 = (1<<ADC5D)|(1<<ADC6D); //CUR_A ADC input
 3ee:	80 e6       	ldi	r24, 0x60	; 96
 3f0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  
  //vref_source(); // Select the Vref Source
  //JTS2doLater: need to use 2.56 internal reference when measuring phase currents (absolute accuracy)
  //JTS2doLater: need to use VCC when measuring PWM from 328p (ratiometric)
  //The first ADC measurement after each switch should be discarded
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 3f4:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 3f8:	8f 7b       	andi	r24, 0xBF	; 191
 3fa:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 3fe:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 402:	80 62       	ori	r24, 0x20	; 32
 404:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  
  //Select the Vref Source
  Adc_enable_external_vref();
 408:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 40c:	8f 73       	andi	r24, 0x3F	; 63
 40e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

  init_adc();
 412:	0e 94 63 00 	call	0xc6	; 0xc6 <init_adc>
  Adc_config();
 416:	80 ec       	ldi	r24, 0xC0	; 192
 418:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 41c:	8a e8       	ldi	r24, 0x8A	; 138
 41e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 422:	80 e8       	ldi	r24, 0x80	; 128
 424:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  //JTS2doLater: I've disconnected the DAC register from the pin, but right now no overcurrent.
  //Dac_config();
  /* set the overcurrent level */
  //Dac_set_8_bits(IMAX);
    
  hall_init_rpm_timer0();
 428:	0e 94 1f 01 	call	0x23e	; 0x23e <hall_init_rpm_timer0>
  mc_motor_init_timer1();
 42c:	0e 94 d6 01 	call	0x3ac	; 0x3ac <mc_motor_init_timer1>

  //JTS2doLater: We'll eventually use these to throttle back current, using 1V1 bandgap 
  Comp_0_config();
 430:	84 ec       	ldi	r24, 0xC4	; 196
 432:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
  Comp_1_config();
 436:	95 e8       	ldi	r25, 0x85	; 133
 438:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
  Comp_2_config();
 43c:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
  
  //JTS rewrote
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 446:	92 e0       	ldi	r25, 0x02	; 2
 448:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 44c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
 450:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 452:	09 b4       	in	r0, 0x29	; 41
 454:	00 fe       	sbrs	r0, 0
 456:	fd cf       	rjmp	.-6      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>

  PSC_Init();
 458:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <PSC_Init>

0000045c <__vector_12>:
  * @brief Launch the regulation loop (see main.c) .
  * @pre configuration of timer 1 registers
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_motor_init_timer1()
{
 45c:	1f 92       	push	r1
 45e:	0f 92       	push	r0
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	0f 92       	push	r0
 464:	11 24       	eor	r1, r1
 466:	8f 93       	push	r24
static char ADC_hardwareStatus = FREE;  // ADC State //running = BUSY //not running = FREE

////////////////////////////////////////////////////////////////////////////////////////

uint8_t mc_drv_g_tick_get(void) { return g_tick; }
void mc_drv_g_tick_set(uint8_t state) { g_tick = state; }
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <g_tick>
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_motor_init_timer1()
{
  mc_drv_g_tick_set(TRUE);
}
 46e:	8f 91       	pop	r24
 470:	0f 90       	pop	r0
 472:	0f be       	out	0x3f, r0	; 63
 474:	0f 90       	pop	r0
 476:	1f 90       	pop	r1
 478:	18 95       	reti

0000047a <__vector_27>:
//! @brief Launch the sampling procedure to get current value
//! @pre amplifier and IT initialization
//! @post Set the End Of Conversion flag

ISR(ADC_vect)
{
 47a:	1f 92       	push	r1
 47c:	0f 92       	push	r0
 47e:	0f b6       	in	r0, 0x3f	; 63
 480:	0f 92       	push	r0
 482:	11 24       	eor	r1, r1
 484:	2f 93       	push	r18
 486:	3f 93       	push	r19
 488:	4f 93       	push	r20
 48a:	5f 93       	push	r21
 48c:	6f 93       	push	r22
 48e:	7f 93       	push	r23
 490:	8f 93       	push	r24
 492:	9f 93       	push	r25
 494:	af 93       	push	r26
 496:	bf 93       	push	r27
 498:	ef 93       	push	r30
 49a:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
 49c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4a0:	80 7e       	andi	r24, 0xE0	; 224
 4a2:	82 61       	ori	r24, 0x12	; 18
 4a4:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  if(ADC_stateMachine == ADC_MEASURE_REQUESTED_RPM) { hall_goalRPM_set(Adc_get_8_bits_result()); }
 4a8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADC_stateMachine>
 4ac:	81 30       	cpi	r24, 0x01	; 1
 4ae:	21 f4       	brne	.+8      	; 0x4b8 <__vector_27+0x3e>
 4b0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4b4:	0e 94 7f 00 	call	0xfe	; 0xfe <hall_goalRPM_set>
  if(ADC_stateMachine == ADC_MEASURE_CURRENT) { mci_motor_measuredCurrent_integrate(Adc_get_10_bits_result()); }
 4b8:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADC_stateMachine>
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	59 f4       	brne	.+22     	; 0x4d6 <__vector_27+0x5c>
 4c0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 4c4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	98 2f       	mov	r25, r24
 4cc:	88 27       	eor	r24, r24
 4ce:	82 0f       	add	r24, r18
 4d0:	91 1d       	adc	r25, r1
 4d2:	0e 94 1d 03 	call	0x63a	; 0x63a <mci_motor_measuredCurrent_integrate>
  ADC_hardwareStatus = FREE;
 4d6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_hardwareStatus>
}
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <mc_ADC_Scheduler>:
////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Move to adc.c
void mc_ADC_Scheduler(void)
{
  setPD3_high();
 4fc:	0e 94 98 03 	call	0x730	; 0x730 <setPD3_high>
  	
  switch(ADC_stateMachine)
 500:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <ADC_stateMachine>
 504:	81 30       	cpi	r24, 0x01	; 1
 506:	09 f1       	breq	.+66     	; 0x54a <mc_ADC_Scheduler+0x4e>
 508:	18 f0       	brcs	.+6      	; 0x510 <mc_ADC_Scheduler+0x14>
 50a:	82 30       	cpi	r24, 0x02	; 2
 50c:	21 f0       	breq	.+8      	; 0x516 <mc_ADC_Scheduler+0x1a>
 50e:	36 c0       	rjmp	.+108    	; 0x57c <mc_ADC_Scheduler+0x80>
  {
  case ADC_UNITIALIZED:
    ADC_hardwareStatus = FREE;
 510:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ADC_hardwareStatus>
 514:	30 c0       	rjmp	.+96     	; 0x576 <mc_ADC_Scheduler+0x7a>
    break;

  //JTS2doNow: Confusing... case doesn't match ADC action
  case ADC_MEASURE_CURRENT:
    //ADC just finished measuring current... now we need to configure the ADC to measure desired RPM
    if(ADC_hardwareStatus == FREE)
 516:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ADC_hardwareStatus>
 51a:	81 11       	cpse	r24, r1
 51c:	2f c0       	rjmp	.+94     	; 0x57c <mc_ADC_Scheduler+0x80>
    {
      ADC_hardwareStatus = BUSY;
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ADC_hardwareStatus>
      Adc_left_adjust_result();
 524:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 528:	80 62       	ori	r24, 0x20	; 32
 52a:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 52e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 532:	80 7e       	andi	r24, 0xE0	; 224
 534:	85 60       	ori	r24, 0x05	; 5
 536:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 53a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_REQUESTED_RPM;
 544:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <ADC_stateMachine>
 548:	19 c0       	rjmp	.+50     	; 0x57c <mc_ADC_Scheduler+0x80>
    }
    break;

  case ADC_MEASURE_REQUESTED_RPM:
    //ADC just finished measuring goal RPM... now we need to configure the ADC to measure current
    if(ADC_hardwareStatus == FREE)
 54a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ADC_hardwareStatus>
 54e:	91 11       	cpse	r25, r1
 550:	15 c0       	rjmp	.+42     	; 0x57c <mc_ADC_Scheduler+0x80>
    {
      ADC_hardwareStatus = BUSY;
 552:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ADC_hardwareStatus>
      Adc_right_adjust_result();
 556:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 55a:	8f 7d       	andi	r24, 0xDF	; 223
 55c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
 560:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 564:	80 7e       	andi	r24, 0xE0	; 224
 566:	8f 60       	ori	r24, 0x0F	; 15
 568:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 56c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 570:	80 64       	ori	r24, 0x40	; 64
 572:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_CURRENT; //this case gets current sensor
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <ADC_stateMachine>
    }
    break;
  }
  setPD3_low();
 57c:	0c 94 9b 03 	jmp	0x736	; 0x736 <setPD3_low>

00000580 <turnOffAllFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void turnOffAllFETs(void)
{
  POC = ( (0<<POEN0A)|(0<<POEN0B) |
 580:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |
          (0<<POEN2A)|(0<<POEN2B) );

  PORTB &= ( ~(1<<PORTB7) ); //turn off Q2
 584:	2f 98       	cbi	0x05, 7	; 5
  PORTB &= ( ~(1<<PORTB6) ); //turn off Q4
 586:	2e 98       	cbi	0x05, 6	; 5
  PORTB &= ( ~(1<<PORTB0) ); //turn off Q5
 588:	28 98       	cbi	0x05, 0	; 5
  PORTB &= ( ~(1<<PORTB1) ); //turn off Q6
 58a:	29 98       	cbi	0x05, 1	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 58c:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) );  //turn off Q1
 58e:	58 98       	cbi	0x0b, 0	; 11
 590:	08 95       	ret

00000592 <mc_commutateFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mc_commutateFETs(uint8_t hallState)
{
 592:	cf 93       	push	r28
 594:	c8 2f       	mov	r28, r24
    if ( mci_motorState_get() == STOPPED ) { turnOffAllFETs(); }
 596:	0e 94 17 03 	call	0x62e	; 0x62e <mci_motorState_get>
 59a:	88 23       	and	r24, r24
 59c:	99 f1       	breq	.+102    	; 0x604 <mc_commutateFETs+0x72>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 59e:	0e 94 54 03 	call	0x6a8	; 0x6a8 <pid_dutyCycle_get>
 5a2:	0e 94 aa 01 	call	0x354	; 0x354 <psc_setDutyCycle>

      if(mci_motorDirection_get() == CCW)
 5a6:	0e 94 1a 03 	call	0x634	; 0x634 <mci_motorDirection_get>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	71 f4       	brne	.+28     	; 0x5ca <mc_commutateFETs+0x38>
      {
          switch(hallState)
 5ae:	c3 30       	cpi	r28, 0x03	; 3
 5b0:	01 f1       	breq	.+64     	; 0x5f2 <mc_commutateFETs+0x60>
 5b2:	28 f4       	brcc	.+10     	; 0x5be <mc_commutateFETs+0x2c>
 5b4:	c1 30       	cpi	r28, 0x01	; 1
 5b6:	09 f1       	breq	.+66     	; 0x5fa <mc_commutateFETs+0x68>
 5b8:	c2 30       	cpi	r28, 0x02	; 2
 5ba:	e9 f0       	breq	.+58     	; 0x5f6 <mc_commutateFETs+0x64>
 5bc:	23 c0       	rjmp	.+70     	; 0x604 <mc_commutateFETs+0x72>
 5be:	c5 30       	cpi	r28, 0x05	; 5
 5c0:	a1 f0       	breq	.+40     	; 0x5ea <mc_commutateFETs+0x58>
 5c2:	a8 f0       	brcs	.+42     	; 0x5ee <mc_commutateFETs+0x5c>
 5c4:	c6 30       	cpi	r28, 0x06	; 6
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <mc_commutateFETs+0x54>
 5c8:	1d c0       	rjmp	.+58     	; 0x604 <mc_commutateFETs+0x72>
              default: turnOffAllFETs(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 5ca:	c3 30       	cpi	r28, 0x03	; 3
 5cc:	81 f0       	breq	.+32     	; 0x5ee <mc_commutateFETs+0x5c>
 5ce:	28 f4       	brcc	.+10     	; 0x5da <mc_commutateFETs+0x48>
 5d0:	c1 30       	cpi	r28, 0x01	; 1
 5d2:	49 f0       	breq	.+18     	; 0x5e6 <mc_commutateFETs+0x54>
 5d4:	c2 30       	cpi	r28, 0x02	; 2
 5d6:	49 f0       	breq	.+18     	; 0x5ea <mc_commutateFETs+0x58>
 5d8:	15 c0       	rjmp	.+42     	; 0x604 <mc_commutateFETs+0x72>
 5da:	c5 30       	cpi	r28, 0x05	; 5
 5dc:	61 f0       	breq	.+24     	; 0x5f6 <mc_commutateFETs+0x64>
 5de:	48 f0       	brcs	.+18     	; 0x5f2 <mc_commutateFETs+0x60>
 5e0:	c6 30       	cpi	r28, 0x06	; 6
 5e2:	59 f0       	breq	.+22     	; 0x5fa <mc_commutateFETs+0x68>
 5e4:	0f c0       	rjmp	.+30     	; 0x604 <mc_commutateFETs+0x72>
          {
              case 1: Set_Q1Q6(); break;
 5e6:	81 e2       	ldi	r24, 0x21	; 33
 5e8:	09 c0       	rjmp	.+18     	; 0x5fc <mc_commutateFETs+0x6a>
              case 2: Set_Q3Q2(); break;
 5ea:	86 e0       	ldi	r24, 0x06	; 6
 5ec:	07 c0       	rjmp	.+14     	; 0x5fc <mc_commutateFETs+0x6a>
              case 3: Set_Q3Q6(); break;
 5ee:	84 e2       	ldi	r24, 0x24	; 36
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <mc_commutateFETs+0x6a>
              case 4: Set_Q5Q4(); break;
 5f2:	88 e1       	ldi	r24, 0x18	; 24
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <mc_commutateFETs+0x6a>
              case 5: Set_Q1Q4(); break;
 5f6:	89 e0       	ldi	r24, 0x09	; 9
 5f8:	01 c0       	rjmp	.+2      	; 0x5fc <mc_commutateFETs+0x6a>
              case 6: Set_Q5Q2(); break;
 5fa:	82 e1       	ldi	r24, 0x12	; 18
 5fc:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: turnOffAllFETs(); break;
          }
      }
    }
}
 600:	cf 91       	pop	r28
 602:	08 95       	ret
 604:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: turnOffAllFETs(); break;
 606:	0c 94 c0 02 	jmp	0x580	; 0x580 <turnOffAllFETs>

0000060a <mci_motor_run>:
uint8_t mci_motorDirection_get(void) { return motorDirection; }

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: We shouldn't be integrating inside these functions... do it wherever they're called
uint16_t mci_motor_measuredCurrent_get(void) { return (mci_measured_current >> 6); } //mci_measured_current/64
 60a:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 60e:	80 ff       	sbrs	r24, 0
 610:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <PSC_Init>
 614:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <overcurrent>
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <motorStatus>
 61e:	0e 94 77 03 	call	0x6ee	; 0x6ee <pid_dutyCycle_calculate>
 622:	0e 94 aa 01 	call	0x354	; 0x354 <psc_setDutyCycle>
 626:	0e 94 8c 00 	call	0x118	; 0x118 <hall_getPosition>
 62a:	0c 94 c9 02 	jmp	0x592	; 0x592 <mc_commutateFETs>

0000062e <mci_motorState_get>:
 62e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <motorStatus>
 632:	08 95       	ret

00000634 <mci_motorDirection_get>:
 634:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 638:	08 95       	ret

0000063a <mci_motor_measuredCurrent_integrate>:

void mci_motor_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }
 63a:	fc 01       	movw	r30, r24
 63c:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <mci_measured_current>
 640:	30 91 10 01 	lds	r19, 0x0110	; 0x800110 <mci_measured_current+0x1>
 644:	40 91 11 01 	lds	r20, 0x0111	; 0x800111 <mci_measured_current+0x2>
 648:	50 91 12 01 	lds	r21, 0x0112	; 0x800112 <mci_measured_current+0x3>
 64c:	af e3       	ldi	r26, 0x3F	; 63
 64e:	b0 e0       	ldi	r27, 0x00	; 0
 650:	0e 94 bc 03 	call	0x778	; 0x778 <__muluhisi3>
 654:	26 e0       	ldi	r18, 0x06	; 6
 656:	ee 0f       	add	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	2a 95       	dec	r18
 65c:	e1 f7       	brne	.-8      	; 0x656 <mci_motor_measuredCurrent_integrate+0x1c>
 65e:	dc 01       	movw	r26, r24
 660:	cb 01       	movw	r24, r22
 662:	8e 0f       	add	r24, r30
 664:	9f 1f       	adc	r25, r31
 666:	a1 1d       	adc	r26, r1
 668:	b1 1d       	adc	r27, r1
 66a:	36 e0       	ldi	r19, 0x06	; 6
 66c:	b6 95       	lsr	r27
 66e:	a7 95       	ror	r26
 670:	97 95       	ror	r25
 672:	87 95       	ror	r24
 674:	3a 95       	dec	r19
 676:	d1 f7       	brne	.-12     	; 0x66c <mci_motor_measuredCurrent_integrate+0x32>
 678:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <mci_measured_current>
 67c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <mci_measured_current+0x1>
 680:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <mci_measured_current+0x2>
 684:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <mci_measured_current+0x3>
 688:	08 95       	ret

0000068a <mc_motor_init>:

////////////////////////////////////////////////////////////////////////////////////////

void mc_motor_init()
{
  mc_motor_init_HW();
 68a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <mc_motor_init_HW>
  sei(); //enable interrupts
 68e:	78 94       	sei

uint8_t mci_motorState_get(void) { return motorStatus; }

////////////////////////////////////////////////////////////////////////////////////////

void mci_motor_stop(void) { motorStatus = STOPPED; }
 690:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <motorStatus>

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void mci_motorDirection_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 694:	82 e0       	ldi	r24, 0x02	; 2
 696:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  mc_motor_init_HW();
  sei(); //enable interrupts

  mci_motor_stop();
  mci_motorDirection_set(CW);
  hall_goalRPM_set(0);
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	0e 94 7f 00 	call	0xfe	; 0xfe <hall_goalRPM_set>
  hall_measuredRPM_set(0);
 6a0:	80 e0       	ldi	r24, 0x00	; 0
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0c 94 82 00 	jmp	0x104	; 0x104 <hall_measuredRPM_set>

000006a8 <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 6a8:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dutyCycle>
 6ac:	08 95       	ret

000006ae <pid_calculate_integral>:
 6ae:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <speed_integrator.2076>
 6b2:	30 91 15 01 	lds	r19, 0x0115	; 0x800115 <speed_integrator.2076+0x1>
 6b6:	82 0f       	add	r24, r18
 6b8:	93 1f       	adc	r25, r19
 6ba:	8f 3f       	cpi	r24, 0xFF	; 255
 6bc:	91 05       	cpc	r25, r1
 6be:	19 f0       	breq	.+6      	; 0x6c6 <pid_calculate_integral+0x18>
 6c0:	14 f0       	brlt	.+4      	; 0x6c6 <pid_calculate_integral+0x18>
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <speed_integrator.2076+0x1>
 6ca:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <speed_integrator.2076>
 6ce:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <speed_integrator.2076>
 6d2:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <speed_integrator.2076+0x1>
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	9f 4f       	sbci	r25, 0xFF	; 255
 6da:	34 f4       	brge	.+12     	; 0x6e8 <pid_calculate_integral+0x3a>
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	9f ef       	ldi	r25, 0xFF	; 255
 6e0:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <speed_integrator.2076+0x1>
 6e4:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <speed_integrator.2076>
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	08 95       	ret

000006ee <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 6ee:	cf 93       	push	r28
 6f0:	df 93       	push	r29
  int16_t summedPID = 0;
  int16_t speedError = hall_goalRPM_get() - hall_measuredRPM_get();
 6f2:	0e 94 7c 00 	call	0xf8	; 0xf8 <hall_goalRPM_get>
 6f6:	c8 2f       	mov	r28, r24
 6f8:	0e 94 87 00 	call	0x10e	; 0x10e <hall_measuredRPM_get>
 6fc:	d0 e0       	ldi	r29, 0x00	; 0
 6fe:	c8 1b       	sub	r28, r24
 700:	d9 0b       	sbc	r29, r25

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 702:	ce 01       	movw	r24, r28
 704:	0e 94 57 03 	call	0x6ae	; 0x6ae <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
 708:	8c 0f       	add	r24, r28
 70a:	9d 1f       	adc	r25, r29
  summedPID = summedPID >> K_SPEED_SCALAR;

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 70c:	8f 3f       	cpi	r24, 0xFF	; 255
 70e:	91 05       	cpc	r25, r1
 710:	14 f0       	brlt	.+4      	; 0x716 <pid_dutyCycle_calculate+0x28>
 712:	8f ef       	ldi	r24, 0xFF	; 255
 714:	06 c0       	rjmp	.+12     	; 0x722 <pid_dutyCycle_calculate+0x34>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 716:	18 16       	cp	r1, r24
 718:	19 06       	cpc	r1, r25
 71a:	1c f0       	brlt	.+6      	; 0x722 <pid_dutyCycle_calculate+0x34>
 71c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <dutyCycle>
 720:	02 c0       	rjmp	.+4      	; 0x726 <pid_dutyCycle_calculate+0x38>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 722:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <dutyCycle>

  return dutyCycle;
 726:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <dutyCycle>
 72a:	df 91       	pop	r29
 72c:	cf 91       	pop	r28
 72e:	08 95       	ret

00000730 <setPD3_high>:

void setPC3_high(void) { SLOWDOWN_DDR |= SLOWDOWN_MASK; SLOWDOWN_PORT |= SLOWDOWN_MASK; }

void setPD3_high(void) { PD3_DDR |= PD3_MASK; PD3_PORT |= PD3_MASK; }

void setPC3_low(void) { SLOWDOWN_PORT &= ~(SLOWDOWN_MASK); }
 730:	53 9a       	sbi	0x0a, 3	; 10
 732:	5b 9a       	sbi	0x0b, 3	; 11
 734:	08 95       	ret

00000736 <setPD3_low>:

 736:	5b 98       	cbi	0x0b, 3	; 11
 738:	08 95       	ret

0000073a <__divmodsi4>:
 73a:	05 2e       	mov	r0, r21
 73c:	97 fb       	bst	r25, 7
 73e:	1e f4       	brtc	.+6      	; 0x746 <__divmodsi4+0xc>
 740:	00 94       	com	r0
 742:	0e 94 b4 03 	call	0x768	; 0x768 <__negsi2>
 746:	57 fd       	sbrc	r21, 7
 748:	07 d0       	rcall	.+14     	; 0x758 <__divmodsi4_neg2>
 74a:	0e 94 c7 03 	call	0x78e	; 0x78e <__udivmodsi4>
 74e:	07 fc       	sbrc	r0, 7
 750:	03 d0       	rcall	.+6      	; 0x758 <__divmodsi4_neg2>
 752:	4e f4       	brtc	.+18     	; 0x766 <__divmodsi4_exit>
 754:	0c 94 b4 03 	jmp	0x768	; 0x768 <__negsi2>

00000758 <__divmodsi4_neg2>:
 758:	50 95       	com	r21
 75a:	40 95       	com	r20
 75c:	30 95       	com	r19
 75e:	21 95       	neg	r18
 760:	3f 4f       	sbci	r19, 0xFF	; 255
 762:	4f 4f       	sbci	r20, 0xFF	; 255
 764:	5f 4f       	sbci	r21, 0xFF	; 255

00000766 <__divmodsi4_exit>:
 766:	08 95       	ret

00000768 <__negsi2>:
 768:	90 95       	com	r25
 76a:	80 95       	com	r24
 76c:	70 95       	com	r23
 76e:	61 95       	neg	r22
 770:	7f 4f       	sbci	r23, 0xFF	; 255
 772:	8f 4f       	sbci	r24, 0xFF	; 255
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__muluhisi3>:
 778:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__umulhisi3>
 77c:	a5 9f       	mul	r26, r21
 77e:	90 0d       	add	r25, r0
 780:	b4 9f       	mul	r27, r20
 782:	90 0d       	add	r25, r0
 784:	a4 9f       	mul	r26, r20
 786:	80 0d       	add	r24, r0
 788:	91 1d       	adc	r25, r1
 78a:	11 24       	eor	r1, r1
 78c:	08 95       	ret

0000078e <__udivmodsi4>:
 78e:	a1 e2       	ldi	r26, 0x21	; 33
 790:	1a 2e       	mov	r1, r26
 792:	aa 1b       	sub	r26, r26
 794:	bb 1b       	sub	r27, r27
 796:	fd 01       	movw	r30, r26
 798:	0d c0       	rjmp	.+26     	; 0x7b4 <__udivmodsi4_ep>

0000079a <__udivmodsi4_loop>:
 79a:	aa 1f       	adc	r26, r26
 79c:	bb 1f       	adc	r27, r27
 79e:	ee 1f       	adc	r30, r30
 7a0:	ff 1f       	adc	r31, r31
 7a2:	a2 17       	cp	r26, r18
 7a4:	b3 07       	cpc	r27, r19
 7a6:	e4 07       	cpc	r30, r20
 7a8:	f5 07       	cpc	r31, r21
 7aa:	20 f0       	brcs	.+8      	; 0x7b4 <__udivmodsi4_ep>
 7ac:	a2 1b       	sub	r26, r18
 7ae:	b3 0b       	sbc	r27, r19
 7b0:	e4 0b       	sbc	r30, r20
 7b2:	f5 0b       	sbc	r31, r21

000007b4 <__udivmodsi4_ep>:
 7b4:	66 1f       	adc	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	1a 94       	dec	r1
 7be:	69 f7       	brne	.-38     	; 0x79a <__udivmodsi4_loop>
 7c0:	60 95       	com	r22
 7c2:	70 95       	com	r23
 7c4:	80 95       	com	r24
 7c6:	90 95       	com	r25
 7c8:	9b 01       	movw	r18, r22
 7ca:	ac 01       	movw	r20, r24
 7cc:	bd 01       	movw	r22, r26
 7ce:	cf 01       	movw	r24, r30
 7d0:	08 95       	ret

000007d2 <__umulhisi3>:
 7d2:	a2 9f       	mul	r26, r18
 7d4:	b0 01       	movw	r22, r0
 7d6:	b3 9f       	mul	r27, r19
 7d8:	c0 01       	movw	r24, r0
 7da:	a3 9f       	mul	r26, r19
 7dc:	70 0d       	add	r23, r0
 7de:	81 1d       	adc	r24, r1
 7e0:	11 24       	eor	r1, r1
 7e2:	91 1d       	adc	r25, r1
 7e4:	b2 9f       	mul	r27, r18
 7e6:	70 0d       	add	r23, r0
 7e8:	81 1d       	adc	r24, r1
 7ea:	11 24       	eor	r1, r1
 7ec:	91 1d       	adc	r25, r1
 7ee:	08 95       	ret

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
