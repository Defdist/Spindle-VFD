
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000696  0000072a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000696  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  00800102  00800102  0000072c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000240  00000000  00000000  0000079c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001952  00000000  00000000  000009dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011a5  00000000  00000000  0000232e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4f  00000000  00000000  000034d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000464  00000000  00000000  00004324  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a06  00000000  00000000  00004788  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c2  00000000  00000000  0000518e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00005750  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 ef 02 	jmp	0x5de	; 0x5de <__vector_14>
  3c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_15>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 3b 01 	jmp	0x276	; 0x276 <__vector_23>
  60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 61 00 	jmp	0xc2	; 0xc2 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e9       	ldi	r30, 0x96	; 150
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	af 30       	cpi	r26, 0x0F	; 15
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 6e 01 	call	0x2dc	; 0x2dc <main>
  b2:	0c 94 49 03 	jmp	0x692	; 0x692 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <a4910_init>:

void a4910_init(void)   { (DDRB |= (1<<DDB4)); } //set pin to output

//////////////////////////////////////////////////////////////////////////////////////////////////

void a4910_disable(void) { (PORTB &= ~(1<<PORTB4)); } //set RESETn pin low
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <a4910_enable>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <__vector_27>:

//Interrupt generated each time ADC conversion finishes
//using an interrupt so we can add other ADC channels later
//with just one channel, we could set the ADC to free running mode (and remove this ISR)
ISR(ADC_vect)
{
  c2:	1f 92       	push	r1
  c4:	0f 92       	push	r0
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	0f 92       	push	r0
  ca:	11 24       	eor	r1, r1
  cc:	2f 93       	push	r18
  ce:	3f 93       	push	r19
  d0:	4f 93       	push	r20
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  if(ADC_stateMachine == ADC_MEASURING_GOAL_RPM)
  d6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <ADC_stateMachine>
  da:	81 30       	cpi	r24, 0x01	; 1
  dc:	b1 f4       	brne	.+44     	; 0x10a <__vector_27+0x48>
  {
    uint16_t adcResult_counts = Adc_get_10_bits_result(); //~520 counts max (grBLDC goalRPM has DIV2 voltage divider LPF)
  de:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  e2:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	98 2f       	mov	r25, r24
  ea:	88 27       	eor	r24, r24
  ec:	82 0f       	add	r24, r18
  ee:	91 1d       	adc	r25, r1
  f0:	4e e0       	ldi	r20, 0x0E	; 14
  f2:	48 9f       	mul	r20, r24
  f4:	90 01       	movw	r18, r0
  f6:	49 9f       	mul	r20, r25
  f8:	30 0d       	add	r19, r0
  fa:	11 24       	eor	r1, r1
  fc:	c9 01       	movw	r24, r18
  fe:	80 5b       	subi	r24, 0xB0	; 176
 100:	9a 4f       	sbci	r25, 0xFA	; 250
 102:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <goalSpeed_RPM+0x1>
 106:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <goalSpeed_RPM>
  // else if(ADC_stateMachine == ADC_MEASURING_CURRENT)
  // {
  //   adc_measuredCurrent_integrate(Adc_get_10_bits_result());
  // }
  
  ADC_hardwareStatus = ADCFREE;
 10a:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
}
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	4f 91       	pop	r20
 114:	3f 91       	pop	r19
 116:	2f 91       	pop	r18
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <adc_init>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_init(void)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
  //disable digital input circuitry on all pins used as analog inputs.
  //reduces power consumption, particularly when an analog signal is near Vcc/2.
  DIDR1 |= (1<<ADC9D)|(1<<ADC8D); //CUR_C & CUR_B ADC inputs
 126:	ef e7       	ldi	r30, 0x7F	; 127
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	83 60       	ori	r24, 0x03	; 3
 12e:	80 83       	st	Z, r24
  DIDR0 |= (1<<ADC6D)|(1<<ADC5D); //CUR_A & goalRPM ADC inputs
 130:	ee e7       	ldi	r30, 0x7E	; 126
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	80 66       	ori	r24, 0x60	; 96
 138:	80 83       	st	Z, r24
  //CUR_A   is Pin PB5/ADC6
  //CUR_B   is Pin PC5/ADC9
  //CUR_C   is Pin PC4/ADC8
  //goalRPM is PIN PB2/ADC5

  Adc_enable();
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 68       	ori	r24, 0x80	; 128
 142:	80 83       	st	Z, r24
  Adc_set_prescaler(ADC_DIV_CLOCK_BY_4);
 144:	80 81       	ld	r24, Z
 146:	88 7f       	andi	r24, 0xF8	; 248
 148:	80 83       	st	Z, r24
 14a:	80 81       	ld	r24, Z
 14c:	82 60       	ori	r24, 0x02	; 2
 14e:	80 83       	st	Z, r24

  Adc_enable_vcc_vref();
 150:	ac e7       	ldi	r26, 0x7C	; 124
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	8c 91       	ld	r24, X
 156:	8f 77       	andi	r24, 0x7F	; 127
 158:	8c 93       	st	X, r24
 15a:	8c 91       	ld	r24, X
 15c:	80 64       	ori	r24, 0x40	; 64
 15e:	8c 93       	st	X, r24
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 160:	cb e7       	ldi	r28, 0x7B	; 123
 162:	d0 e0       	ldi	r29, 0x00	; 0
 164:	88 81       	ld	r24, Y
 166:	80 62       	ori	r24, 0x20	; 32
 168:	88 83       	st	Y, r24
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 16a:	88 81       	ld	r24, Y
 16c:	8f 7b       	andi	r24, 0xBF	; 191
 16e:	88 83       	st	Y, r24

  Adc_select_channel(ADC_INPUT_ADC5);  //goalRPM
 170:	8c 91       	ld	r24, X
 172:	80 7e       	andi	r24, 0xE0	; 224
 174:	85 60       	ori	r24, 0x05	; 5
 176:	8c 93       	st	X, r24

  Adc_right_adjust_result(); //0b------xx xxxxxxxx
 178:	8c 91       	ld	r24, X
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	8c 93       	st	X, r24
  Adc_enable_high_speed_mode();
 17e:	88 81       	ld	r24, Y
 180:	80 68       	ori	r24, 0x80	; 128
 182:	88 83       	st	Y, r24
  adc_generateInterruptAfterConversion(); 
 184:	80 81       	ld	r24, Z
 186:	88 60       	ori	r24, 0x08	; 8
 188:	80 83       	st	Z, r24
}
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <adc_Scheduler>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void adc_Scheduler(void)
{  
  switch(ADC_stateMachine)
 190:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <ADC_stateMachine>
 194:	91 30       	cpi	r25, 0x01	; 1
 196:	99 f4       	brne	.+38     	; 0x1be <adc_Scheduler+0x2e>
  {
    case ADC_MEASURING_GOAL_RPM:
    if(ADC_hardwareStatus == ADCFREE)
 198:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 19c:	81 11       	cpse	r24, r1
 19e:	0f c0       	rjmp	.+30     	; 0x1be <adc_Scheduler+0x2e>
    {
      ADC_hardwareStatus = ADCBUSY;
 1a0:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <__data_end>
      Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 1a4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1a8:	80 7e       	andi	r24, 0xE0	; 224
 1aa:	85 60       	ori	r24, 0x05	; 5
 1ac:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 1b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 1b4:	80 64       	ori	r24, 0x40	; 64
 1b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURING_GOAL_RPM; //right now this is the only case
 1ba:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <ADC_stateMachine>
 1be:	08 95       	ret

000001c0 <adc_goalRPM_get>:

// void adc_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }

////////////////////////////////////////////////////////////////////////////////////////

uint16_t adc_goalRPM_get(void) { return goalSpeed_RPM; }
 1c0:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <goalSpeed_RPM>
 1c4:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <goalSpeed_RPM+0x1>
 1c8:	08 95       	ret

000001ca <adc_goalRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void adc_goalRPM_set(uint16_t newRPM) { goalSpeed_RPM = newRPM; }
 1ca:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <goalSpeed_RPM+0x1>
 1ce:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <goalSpeed_RPM>
 1d2:	08 95       	ret

000001d4 <unoPinA2_high>:
#include "grBLDC.h"

void unoPinA4_high(void) { SLOWDOWN_DDR |= SLOWDOWN_MASK; SLOWDOWN_PORT |= SLOWDOWN_MASK; }
void unoPinA2_high(void) {      PD3_DDR |=      PD3_MASK;      PD3_PORT |=      PD3_MASK; }

void unoPinA4_low(void) { SLOWDOWN_PORT &= ~(SLOWDOWN_MASK); }
 1d4:	53 9a       	sbi	0x0a, 3	; 10
 1d6:	5b 9a       	sbi	0x0b, 3	; 11
 1d8:	08 95       	ret

000001da <unoPinA2_low>:
 1da:	5b 98       	cbi	0x0b, 3	; 11
 1dc:	08 95       	ret

000001de <hall_init>:

void hall_init(void)
{
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>

  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 1ea:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
 1ee:	08 95       	ret

000001f0 <hall_getPosition>:
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 1f0:	99 b1       	in	r25, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
 1f2:	86 b1       	in	r24, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
 1f4:	29 b1       	in	r18, 0x09	; 9
{
  static uint8_t state_previous = 0;
  static uint8_t numConsecutiveInvalidStates = 0;	
	  
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
 1f6:	38 2f       	mov	r19, r24
 1f8:	32 70       	andi	r19, 0x02	; 2
 1fa:	82 2f       	mov	r24, r18
 1fc:	84 70       	andi	r24, 0x04	; 4
 1fe:	83 2b       	or	r24, r19
 200:	96 95       	lsr	r25
 202:	91 70       	andi	r25, 0x01	; 1
 204:	89 2b       	or	r24, r25
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 206:	11 f0       	breq	.+4      	; 0x20c <hall_getPosition+0x1c>
 208:	87 30       	cpi	r24, 0x07	; 7
 20a:	51 f4       	brne	.+20     	; 0x220 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
 20c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <numConsecutiveInvalidStates.2064>
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB

  if( ((state == 0b00000000) || (state == 0b00000111)) && //invalid Hall state (due to H->L or L->H transition)
 210:	9a 30       	cpi	r25, 0x0A	; 10
 212:	30 f4       	brcc	.+12     	; 0x220 <hall_getPosition+0x30>
      (numConsecutiveInvalidStates < 10)                ) 
  {
	  //hall states in transition
	  state = state_previous;
 214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <state_previous.2063>
	  numConsecutiveInvalidStates++;
 218:	9f 5f       	subi	r25, 0xFF	; 255
 21a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <numConsecutiveInvalidStates.2064>
 21e:	08 95       	ret
  } 
  else //valid Hall state (or motor is stalled)
  {
	  state_previous = state; //store for next iteration
 220:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <state_previous.2063>
	  numConsecutiveInvalidStates = 0;
 224:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <numConsecutiveInvalidStates.2064>
  } 
	  
  return state;
}
 228:	08 95       	ret

0000022a <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC_vect )  //Hall_A & Hall_C share the same interrupt vector byte
{
 22a:	1f 92       	push	r1
 22c:	0f 92       	push	r0
 22e:	0f b6       	in	r0, 0x3f	; 63
 230:	0f 92       	push	r0
 232:	11 24       	eor	r1, r1
 234:	2f 93       	push	r18
 236:	3f 93       	push	r19
 238:	4f 93       	push	r20
 23a:	5f 93       	push	r21
 23c:	6f 93       	push	r22
 23e:	7f 93       	push	r23
 240:	8f 93       	push	r24
 242:	9f 93       	push	r25
 244:	af 93       	push	r26
 246:	bf 93       	push	r27
 248:	ef 93       	push	r30
 24a:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 24c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <hall_getPosition>
 250:	0e 94 a8 01 	call	0x350	; 0x350 <mosfet_commutate>
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__vector_23>:

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B_vect )
{
 276:	1f 92       	push	r1
 278:	0f 92       	push	r0
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	0f 92       	push	r0
 27e:	11 24       	eor	r1, r1
 280:	2f 93       	push	r18
 282:	3f 93       	push	r19
 284:	4f 93       	push	r20
 286:	5f 93       	push	r21
 288:	6f 93       	push	r22
 28a:	7f 93       	push	r23
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	af 93       	push	r26
 292:	bf 93       	push	r27
 294:	ef 93       	push	r30
 296:	ff 93       	push	r31
  mosfet_commutate( hall_getPosition() );
 298:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <hall_getPosition>
 29c:	0e 94 a8 01 	call	0x350	; 0x350 <mosfet_commutate>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 2a0:	31 99       	sbic	0x06, 1	; 6
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	07 c0       	rjmp	.+14     	; 0x2b6 <__vector_23+0x40>

  if(hallB_state == HALL_B_HIGH)
  {
    if(hallB_state_previous == HALL_B_LOW) 
 2a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <hallB_state_previous.2077>
 2ac:	81 11       	cpse	r24, r1
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <__vector_23+0x3e>
    {
      //rising edge just occurred on Hall B
      timing_calculateRPM();
 2b0:	0e 94 01 03 	call	0x602	; 0x602 <timing_calculateRPM>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  //determine hallB state (high or low)
  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 2b4:	81 e0       	ldi	r24, 0x01	; 1
      //if( timing_measuredRPM_get() > 6000 ) { unoPinA4_high(); }
      //else                                  { unoPinA4_low();  } //debug
    }
  }

  hallB_state_previous = hallB_state;
 2b6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <hallB_state_previous.2077>
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0f be       	out	0x3f, r0	; 63
 2d6:	0f 90       	pop	r0
 2d8:	1f 90       	pop	r1
 2da:	18 95       	reti

000002dc <main>:
#include "grBLDC.h"

int main(void)
{
  psc_init();
 2dc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <psc_init>
  adc_init();
 2e0:	0e 94 91 00 	call	0x122	; 0x122 <adc_init>
  motor_init();
 2e4:	0e 94 e7 01 	call	0x3ce	; 0x3ce <motor_init>
  hall_init();
 2e8:	0e 94 ef 00 	call	0x1de	; 0x1de <hall_init>
  mosfet_init();
 2ec:	0e 94 95 01 	call	0x32a	; 0x32a <mosfet_init>
  a4910_init(); //configure pin to digital output
 2f0:	0e 94 5d 00 	call	0xba	; 0xba <a4910_init>
  timing_timer0_init();
 2f4:	0e 94 ce 02 	call	0x59c	; 0x59c <timing_timer0_init>
  timing_timer1_init();
 2f8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <timing_timer1_init>

  Start_pll_64_mega(); // Start the 64 MHz PLL
 2fc:	86 e0       	ldi	r24, 0x06	; 6
 2fe:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 300:	09 b4       	in	r0, 0x29	; 41
 302:	00 fe       	sbrs	r0, 0
 304:	fd cf       	rjmp	.-6      	; 0x300 <main+0x24>
  
  a4910_enable(); //enable MOSFET driver
 306:	0e 94 5f 00 	call	0xbe	; 0xbe <a4910_enable>
  motor_run();
 30a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <motor_run>

  sei(); //enable interrupts
 30e:	78 94       	sei

  while(1)
  {	  	  
    if (timing_runControlLoop_get() == TRUE)
 310:	0e 94 c8 02 	call	0x590	; 0x590 <timing_runControlLoop_get>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	e1 f7       	brne	.-8      	; 0x310 <main+0x34>
    {	
      timing_runControlLoop_set(FALSE); //prevent control loop from running again until timer interrupt occurs
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	0e 94 cb 02 	call	0x596	; 0x596 <timing_runControlLoop_set>
      
      adc_Scheduler(); // Get Current or potentiometer value
 31e:	0e 94 c8 00 	call	0x190	; 0x190 <adc_Scheduler>
      //   pid_dutyCycle_calculate();
      //   g_regulation_period = 0;
      // }

      //psc_setDutyCycle( pid_dutyCycle_get() );
      psc_setDutyCycle(255); //debug
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	0e 94 9c 02 	call	0x538	; 0x538 <psc_setDutyCycle>
 328:	f3 cf       	rjmp	.-26     	; 0x310 <main+0x34>

0000032a <mosfet_init>:
	// PD0 => UH     PB7 => UL
	// PC0 => VH     PB6 => VL
	// PB0 => WH     PB1 => WL

	// Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
	PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 32a:	85 b1       	in	r24, 0x05	; 5
 32c:	8c 73       	andi	r24, 0x3C	; 60
 32e:	85 b9       	out	0x05, r24	; 5
	PORTC &= ~(1<<PORTC0);
 330:	40 98       	cbi	0x08, 0	; 8
	PORTD &= ~(1<<PORTD0);
 332:	58 98       	cbi	0x0b, 0	; 11

	// Configure FET pins to output
	DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 334:	83 ec       	ldi	r24, 0xC3	; 195
 336:	84 b9       	out	0x04, r24	; 4
	DDRC = (1<<DDC0);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	87 b9       	out	0x07, r24	; 7
	DDRD = (1<<DDD0);
 33c:	8a b9       	out	0x0a, r24	; 10
 33e:	08 95       	ret

00000340 <mosfet_turnOffAll>:
//////////////////////////////////////////////////////////////////////////////////////////////////

void mosfet_turnOffAll(void)
{
  //POC: PSC output configuration
  POC = ( (0<<POEN0A)|(0<<POEN0B) |  //0:disconnect PSC outputs 0A & 0B from I/O pins //1:connect PSC output
 340:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |  //0:disconnect PSC outputs 1A & 1B from I/O pins //1:connect PSC output
          (0<<POEN2A)|(0<<POEN2B) ); //0:disconnect PSC outputs 2A & 2B from I/O pins //1:connect PSC output

  PORTB &= ( ~((1<<PORTB7)|(1<<PORTB6)|(1<<PORTB0)|(1<<PORTB1)) ); //Turn off Q2/Q4/Q5/Q6, respectively
 344:	85 b1       	in	r24, 0x05	; 5
 346:	8c 73       	andi	r24, 0x3C	; 60
 348:	85 b9       	out	0x05, r24	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 34a:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) ); //turn off Q1
 34c:	58 98       	cbi	0x0b, 0	; 11
 34e:	08 95       	ret

00000350 <mosfet_commutate>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mosfet_commutate(uint8_t hallState)
{
 350:	cf 93       	push	r28
 352:	c8 2f       	mov	r28, r24
    if ( motor_state_get() == STOPPED ) { mosfet_turnOffAll(); }
 354:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <motor_state_get>
 358:	88 23       	and	r24, r24
 35a:	99 f1       	breq	.+102    	; 0x3c2 <mosfet_commutate+0x72>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 35c:	0e 94 07 02 	call	0x40e	; 0x40e <pid_dutyCycle_get>
 360:	0e 94 9c 02 	call	0x538	; 0x538 <psc_setDutyCycle>

      if(motor_direction_get() == CCW) //JTS2doNow: Sample direction pin (PB3) to determine spindle direction
 364:	0e 94 04 02 	call	0x408	; 0x408 <motor_direction_get>
 368:	81 30       	cpi	r24, 0x01	; 1
 36a:	71 f4       	brne	.+28     	; 0x388 <mosfet_commutate+0x38>
      {
          switch(hallState)
 36c:	c3 30       	cpi	r28, 0x03	; 3
 36e:	01 f1       	breq	.+64     	; 0x3b0 <mosfet_commutate+0x60>
 370:	28 f4       	brcc	.+10     	; 0x37c <mosfet_commutate+0x2c>
 372:	c1 30       	cpi	r28, 0x01	; 1
 374:	09 f1       	breq	.+66     	; 0x3b8 <mosfet_commutate+0x68>
 376:	c2 30       	cpi	r28, 0x02	; 2
 378:	e9 f0       	breq	.+58     	; 0x3b4 <mosfet_commutate+0x64>
 37a:	23 c0       	rjmp	.+70     	; 0x3c2 <mosfet_commutate+0x72>
 37c:	c5 30       	cpi	r28, 0x05	; 5
 37e:	a1 f0       	breq	.+40     	; 0x3a8 <mosfet_commutate+0x58>
 380:	a8 f0       	brcs	.+42     	; 0x3ac <mosfet_commutate+0x5c>
 382:	c6 30       	cpi	r28, 0x06	; 6
 384:	79 f0       	breq	.+30     	; 0x3a4 <mosfet_commutate+0x54>
 386:	1d c0       	rjmp	.+58     	; 0x3c2 <mosfet_commutate+0x72>
              default: mosfet_turnOffAll(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 388:	c3 30       	cpi	r28, 0x03	; 3
 38a:	81 f0       	breq	.+32     	; 0x3ac <mosfet_commutate+0x5c>
 38c:	28 f4       	brcc	.+10     	; 0x398 <mosfet_commutate+0x48>
 38e:	c1 30       	cpi	r28, 0x01	; 1
 390:	49 f0       	breq	.+18     	; 0x3a4 <mosfet_commutate+0x54>
 392:	c2 30       	cpi	r28, 0x02	; 2
 394:	49 f0       	breq	.+18     	; 0x3a8 <mosfet_commutate+0x58>
 396:	15 c0       	rjmp	.+42     	; 0x3c2 <mosfet_commutate+0x72>
 398:	c5 30       	cpi	r28, 0x05	; 5
 39a:	61 f0       	breq	.+24     	; 0x3b4 <mosfet_commutate+0x64>
 39c:	48 f0       	brcs	.+18     	; 0x3b0 <mosfet_commutate+0x60>
 39e:	c6 30       	cpi	r28, 0x06	; 6
 3a0:	59 f0       	breq	.+22     	; 0x3b8 <mosfet_commutate+0x68>
 3a2:	0f c0       	rjmp	.+30     	; 0x3c2 <mosfet_commutate+0x72>
          {
              case 1: Set_Q1Q6(); break;
 3a4:	81 e2       	ldi	r24, 0x21	; 33
 3a6:	09 c0       	rjmp	.+18     	; 0x3ba <mosfet_commutate+0x6a>
              case 2: Set_Q3Q2(); break;
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	07 c0       	rjmp	.+14     	; 0x3ba <mosfet_commutate+0x6a>
              case 3: Set_Q3Q6(); break;
 3ac:	84 e2       	ldi	r24, 0x24	; 36
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <mosfet_commutate+0x6a>
              case 4: Set_Q5Q4(); break;
 3b0:	88 e1       	ldi	r24, 0x18	; 24
 3b2:	03 c0       	rjmp	.+6      	; 0x3ba <mosfet_commutate+0x6a>
              case 5: Set_Q1Q4(); break;
 3b4:	89 e0       	ldi	r24, 0x09	; 9
 3b6:	01 c0       	rjmp	.+2      	; 0x3ba <mosfet_commutate+0x6a>
              case 6: Set_Q5Q2(); break;
 3b8:	82 e1       	ldi	r24, 0x12	; 18
 3ba:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: mosfet_turnOffAll(); break;
          }
      }
    }
}
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret
 3c2:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: mosfet_turnOffAll(); break;
 3c4:	0c 94 a0 01 	jmp	0x340	; 0x340 <mosfet_turnOffAll>

000003c8 <motor_state_get>:

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void    motor_direction_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 3c8:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <motorStatus>
 3cc:	08 95       	ret

000003ce <motor_init>:
 3ce:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <motorStatus>
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <motorDirection>
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_goalRPM_set>
 3e0:	80 e0       	ldi	r24, 0x00	; 0
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	0c 94 22 03 	jmp	0x644	; 0x644 <timing_measuredRPM_set>

000003e8 <motor_run>:
 3e8:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 3ec:	80 ff       	sbrs	r24, 0
 3ee:	0e 94 5e 02 	call	0x4bc	; 0x4bc <psc_init>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <motorStatus>
 3f8:	0e 94 33 02 	call	0x466	; 0x466 <pid_dutyCycle_calculate>
 3fc:	0e 94 9c 02 	call	0x538	; 0x538 <psc_setDutyCycle>
 400:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <hall_getPosition>
 404:	0c 94 a8 01 	jmp	0x350	; 0x350 <mosfet_commutate>

00000408 <motor_direction_get>:
 408:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <motorDirection>
 40c:	08 95       	ret

0000040e <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 40e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle>
 412:	08 95       	ret

00000414 <pid_calculate_integral>:
 414:	20 91 09 01 	lds	r18, 0x0109	; 0x800109 <speed_integrator.2066>
 418:	30 91 0a 01 	lds	r19, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 41c:	82 0f       	add	r24, r18
 41e:	93 1f       	adc	r25, r19
 420:	8f 3f       	cpi	r24, 0xFF	; 255
 422:	91 05       	cpc	r25, r1
 424:	19 f0       	breq	.+6      	; 0x42c <pid_calculate_integral+0x18>
 426:	14 f0       	brlt	.+4      	; 0x42c <pid_calculate_integral+0x18>
 428:	8f ef       	ldi	r24, 0xFF	; 255
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <speed_integrator.2066+0x1>
 430:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <speed_integrator.2066>
 434:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <speed_integrator.2066>
 438:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 43c:	81 30       	cpi	r24, 0x01	; 1
 43e:	9f 4f       	sbci	r25, 0xFF	; 255
 440:	34 f4       	brge	.+12     	; 0x44e <pid_calculate_integral+0x3a>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	9f ef       	ldi	r25, 0xFF	; 255
 446:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <speed_integrator.2066+0x1>
 44a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <speed_integrator.2066>
 44e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <speed_integrator.2066>
 452:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <speed_integrator.2066+0x1>
 456:	2e e1       	ldi	r18, 0x1E	; 30
 458:	ac 01       	movw	r20, r24
 45a:	24 9f       	mul	r18, r20
 45c:	c0 01       	movw	r24, r0
 45e:	25 9f       	mul	r18, r21
 460:	90 0d       	add	r25, r0
 462:	11 24       	eor	r1, r1
 464:	08 95       	ret

00000466 <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
  int16_t summedPID = 0;
  int16_t speedError = adc_goalRPM_get() - timing_measuredRPM_get();
 46a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <adc_goalRPM_get>
 46e:	ec 01       	movw	r28, r24
 470:	0e 94 1d 03 	call	0x63a	; 0x63a <timing_measuredRPM_get>
 474:	c8 1b       	sub	r28, r24
 476:	d9 0b       	sbc	r29, r25

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 478:	ce 01       	movw	r24, r28
 47a:	0e 94 0a 02 	call	0x414	; 0x414 <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
  summedPID = summedPID >> K_SPEED_SCALAR;
 47e:	4e e1       	ldi	r20, 0x1E	; 30
 480:	4c 9f       	mul	r20, r28
 482:	90 01       	movw	r18, r0
 484:	4d 9f       	mul	r20, r29
 486:	30 0d       	add	r19, r0
 488:	11 24       	eor	r1, r1
 48a:	82 0f       	add	r24, r18
 48c:	93 1f       	adc	r25, r19
 48e:	24 e0       	ldi	r18, 0x04	; 4
 490:	95 95       	asr	r25
 492:	87 95       	ror	r24
 494:	2a 95       	dec	r18
 496:	e1 f7       	brne	.-8      	; 0x490 <pid_dutyCycle_calculate+0x2a>

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 498:	8f 3f       	cpi	r24, 0xFF	; 255
 49a:	91 05       	cpc	r25, r1
 49c:	14 f0       	brlt	.+4      	; 0x4a2 <pid_dutyCycle_calculate+0x3c>
 49e:	8f ef       	ldi	r24, 0xFF	; 255
 4a0:	06 c0       	rjmp	.+12     	; 0x4ae <pid_dutyCycle_calculate+0x48>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 4a2:	18 16       	cp	r1, r24
 4a4:	19 06       	cpc	r1, r25
 4a6:	1c f0       	brlt	.+6      	; 0x4ae <pid_dutyCycle_calculate+0x48>
 4a8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <dutyCycle>
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <pid_dutyCycle_calculate+0x4c>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 4ae:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <dutyCycle>

  return dutyCycle;
 4b2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <dutyCycle>
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	08 95       	ret

000004bc <psc_init>:
   //SA_VAL: When PSC counter is less    than this value, high FET is enabled
   //SB_VAL: When PSC counter is greater than this value, low  FET is enabled
   //The difference between SA and SB sets the dead time between phases 
   //RA_VAL: Not used in centered mode //can be used to synchronize ADC
   //RB_VAL: Not used in centered mode 
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 4bc:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 4c0:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 4c4:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 4ce:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 4d2:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 4d6:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 4da:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 4de:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 4e2:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 4e6:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 4ea:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 4ee:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 4f2:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 4f6:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 4fa:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 4fe:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 502:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL); //max value 12b free-running PSC counter counts up to
 506:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 50a:	8e ef       	ldi	r24, 0xFE	; 254
 50c:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 510:	84 e1       	ldi	r24, 0x14	; 20
 512:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 516:	88 ed       	ldi	r24, 0xD8	; 216
 518:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION); //PSC input is ignored

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 51c:	98 ef       	ldi	r25, 0xF8	; 248
 51e:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 522:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP); //PSC interrupt flag register
 526:	8f e0       	ldi	r24, 0x0F	; 15
 528:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

   PIM = (0<<PEVE1)|(0<<PEVE1)|(0<<PEVE2)|(0<<PEOPE); //PSC interrupt mask register
 52c:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
                         //PEVE0 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE1 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEVE2 high: when fault occurs on PSC1, generate interrupt //low: no interrupt
                         //PEOPE high: PSC generates interrupt when end of cycle reached //low: no interrupt

   Psc_run();
 530:	81 e2       	ldi	r24, 0x21	; 33
 532:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 536:	08 95       	ret

00000538 <psc_setDutyCycle>:
  #if(CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 538:	e5 eb       	ldi	r30, 0xB5	; 181
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	94 e3       	ldi	r25, 0x34	; 52
 53e:	90 83       	st	Z, r25
  
  //Psc_set_module_n(A_SA_VAL, A_RA_VAL, A_SB_VAL);

  //while all six PSC phases are chopping simultaneously, only two phases are routed to output pins at the same time //see mosfet_commutate()
  #if (CURRENT_DECAY == FAST_DECAY)
    Psc_set_module_A(duty,A_RA_VAL,duty);
 540:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 544:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 548:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 552:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 556:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,duty);
 55a:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 55e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 562:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 566:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 56a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 56e:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,duty);
 572:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 576:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 57a:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 57e:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 582:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 586:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    Psc_set_module_A(duty,A_RA_VAL,0);
    Psc_set_module_B(duty,B_RA_VAL,0);
    Psc_set_module_C(duty,C_RA_VAL,0);
  #endif
   
  Psc_unlock();
 58a:	84 e1       	ldi	r24, 0x14	; 20
 58c:	80 83       	st	Z, r24
 58e:	08 95       	ret

00000590 <timing_runControlLoop_get>:

uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
 590:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <runControlLoop>
 594:	08 95       	ret

00000596 <timing_runControlLoop_set>:
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 596:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <runControlLoop>
 59a:	08 95       	ret

0000059c <timing_timer0_init>:
//Configure 8b Timer0
//counter increments every 4 microseconds
//interrupt occurs when timer value hit OCR0A
void timing_timer0_init(void)
{
  TCCR0A = (1<<WGM01); //set timer mode=CTC, don't connect timer to any output pins
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	84 bd       	out	0x24, r24	; 36
  TCCR0B = (1<<CS01)|(1<<CS00); //CPU/64 prescaler
 5a0:	93 e0       	ldi	r25, 0x03	; 3
 5a2:	95 bd       	out	0x25, r25	; 37
  OCR0A  = 7; // f_interrupt = 1/(16MHz/64DIV)*(OCR0A+1) //OCR0A=7: 32us tick (512 clocks @ 16 MHz)
 5a4:	97 e0       	ldi	r25, 0x07	; 7
 5a6:	97 bd       	out	0x27, r25	; 39
  TIMSK0 = (1<<OCIE0A); // Output compare A Match interrupt Enable
 5a8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 5ac:	08 95       	ret

000005ae <__vector_15>:

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	8f 93       	push	r24
uint16_t motorRPM_measured = 0;

////////////////////////////////////////////////////////////////////////////////////////

uint8_t timing_runControlLoop_get(void)          { return runControlLoop; }
void    timing_runControlLoop_set(uint8_t state) { runControlLoop = state; }
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <runControlLoop>

////////////////////////////////////////////////////////////////////////////////////////

//Timer0 interrupt occurs when timer hits 'OCR0A' value
//used to run main control loop 
ISR(TIMER0_COMPA_vect) { timing_runControlLoop_set(TRUE); }
 5c0:	8f 91       	pop	r24
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <timing_timer1_init>:
//configure 16b Timer1
//counter increments every 4 microseconds
//used to calculate RPM
void timing_timer1_init(void)
{
  TCCR1A = 0; //set timer mode=normal, don't connect timer to any output pins
 5cc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = (0<<CS12)|(1<<CS11)|(1<<CS10); // prescale Timer0 clock to CPU/64 prescaler
 5d0:	83 e0       	ldi	r24, 0x03	; 3
 5d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TIMSK1 = (1<<TOIE1); //generate interrupt each time an overflow occurs (every 4.096 ms, unless the hall state has changed)
 5d6:	81 e0       	ldi	r24, 0x01	; 1
 5d8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 5dc:	08 95       	ret

000005de <__vector_14>:
//used to determine actual spindle RPM
//Timer1 increments every 4us ( 1/[16MHz/64] )
//Timer1 overflow interrupt occurs if no HallB rising edge occurs after ~262 milliseconds (2^16 * 4us) //HallB interrupt resets TCNT1 to zero)
//The value on Timer1 is the time between each Hall_B rising edge
ISR(TIMER1_OVF_vect)
{
 5de:	1f 92       	push	r1
 5e0:	0f 92       	push	r0
 5e2:	0f b6       	in	r0, 0x3f	; 63
 5e4:	0f 92       	push	r0
 5e6:	11 24       	eor	r1, r1
  //timer1 timed out
  TCNT1=0x00; //set Timer1 value to 0
 5e8:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 5ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 5f0:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <motorRPM_measured+0x1>
 5f4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <motorRPM_measured>
{
  //timer1 timed out
  TCNT1=0x00; //set Timer1 value to 0
  
  timing_measuredRPM_set(0); //motor isn't spinning
}
 5f8:	0f 90       	pop	r0
 5fa:	0f be       	out	0x3f, r0	; 63
 5fc:	0f 90       	pop	r0
 5fe:	1f 90       	pop	r1
 600:	18 95       	reti

00000602 <timing_calculateRPM>:

////////////////////////////////////////////////////////////////////////////////////////

inline void timing_calculateRPM(void)
{
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
  uint16_t timerCount = TCNT1; //retrive 16b timer value
 606:	e4 e8       	ldi	r30, 0x84	; 132
 608:	f0 e0       	ldi	r31, 0x00	; 0
 60a:	c0 81       	ld	r28, Z
 60c:	d1 81       	ldd	r29, Z+1	; 0x01
  TCNT1 = 0x00; //reset Timer 1 ASAP (to minimize jitter)
 60e:	11 82       	std	Z+1, r1	; 0x01
 610:	10 82       	st	Z, r1
    //hallFrequency_Hz = 1 / (timeSinceLastInterrupt_us * 1E-6)
    //shaftRPM_BLDC = (hallFrequency_Hz / BLDC_NUM_POLE_PAIRS) * SECONDS_PER_MINUTE
    //spindleRPM = shaftRPM_BLDC * SHEAVE_RATIO
  #define TIMER1_SPINDLE_RPM_CONSTANT (uint32_t)((SHEAVE_RATIO * MICROSECONDS_PER_SECOND * SECONDS_PER_MINUTE) / (BLDC_NUM_POLE_PAIRS * TIMER1_TICK_PERIOD_us))
  
  unoPinA2_high();
 612:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <unoPinA2_high>
  uint16_t spindleRPM_measured = TIMER1_SPINDLE_RPM_CONSTANT / timerCount; //JTS2doNow: See how fast this executes
  unoPinA2_low();
 616:	0e 94 ed 00 	call	0x1da	; 0x1da <unoPinA2_low>

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 61a:	9e 01       	movw	r18, r28
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	60 ee       	ldi	r22, 0xE0	; 224
 622:	70 e7       	ldi	r23, 0x70	; 112
 624:	82 e7       	ldi	r24, 0x72	; 114
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 27 03 	call	0x64e	; 0x64e <__udivmodsi4>
 62c:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <motorRPM_measured+0x1>
 630:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <motorRPM_measured>
    }
  
  #else
    timing_measuredRPM_set(spindleRPM_measured); 
  #endif
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret

0000063a <timing_measuredRPM_get>:

////////////////////////////////////////////////////////////////////////////////////////

uint16_t timing_measuredRPM_get(void) { return motorRPM_measured; }
 63a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <motorRPM_measured>
 63e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <motorRPM_measured+0x1>
 642:	08 95       	ret

00000644 <timing_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void timing_measuredRPM_set(uint16_t measured_speed) { motorRPM_measured = measured_speed; }
 644:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <motorRPM_measured+0x1>
 648:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <motorRPM_measured>
 64c:	08 95       	ret

0000064e <__udivmodsi4>:
 64e:	a1 e2       	ldi	r26, 0x21	; 33
 650:	1a 2e       	mov	r1, r26
 652:	aa 1b       	sub	r26, r26
 654:	bb 1b       	sub	r27, r27
 656:	fd 01       	movw	r30, r26
 658:	0d c0       	rjmp	.+26     	; 0x674 <__udivmodsi4_ep>

0000065a <__udivmodsi4_loop>:
 65a:	aa 1f       	adc	r26, r26
 65c:	bb 1f       	adc	r27, r27
 65e:	ee 1f       	adc	r30, r30
 660:	ff 1f       	adc	r31, r31
 662:	a2 17       	cp	r26, r18
 664:	b3 07       	cpc	r27, r19
 666:	e4 07       	cpc	r30, r20
 668:	f5 07       	cpc	r31, r21
 66a:	20 f0       	brcs	.+8      	; 0x674 <__udivmodsi4_ep>
 66c:	a2 1b       	sub	r26, r18
 66e:	b3 0b       	sbc	r27, r19
 670:	e4 0b       	sbc	r30, r20
 672:	f5 0b       	sbc	r31, r21

00000674 <__udivmodsi4_ep>:
 674:	66 1f       	adc	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	99 1f       	adc	r25, r25
 67c:	1a 94       	dec	r1
 67e:	69 f7       	brne	.-38     	; 0x65a <__udivmodsi4_loop>
 680:	60 95       	com	r22
 682:	70 95       	com	r23
 684:	80 95       	com	r24
 686:	90 95       	com	r25
 688:	9b 01       	movw	r18, r22
 68a:	ac 01       	movw	r20, r24
 68c:	bd 01       	movw	r22, r26
 68e:	cf 01       	movw	r24, r30
 690:	08 95       	ret

00000692 <_exit>:
 692:	f8 94       	cli

00000694 <__stop_program>:
 694:	ff cf       	rjmp	.-2      	; 0x694 <__stop_program>
