
bldc_sensorless.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007ca  0000085e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800102  00800102  00000860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ab  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001053  00000000  00000000  00002253  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c41  00000000  00000000  000032a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00003ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a84  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d9  00000000  00000000  00004d80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00005359  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_17>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_23>
  60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_24>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_27>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ec       	ldi	r30, 0xCA	; 202
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 31       	cpi	r26, 0x15	; 21
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  b2:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <A4910pinPB4_reset_Init>:
void A4910pinPB4_reset_Init(void)   { (DDRB |= (1<<DDB4));     }
void A4910pinPB4_reset_Toggle(void) { (PINB |= (1<<PINB4));    }
void A4910pinPB4_reset_Set(void)    { (PORTB |= (1<<PORTB4));  }
void A4910pinPB4_reset_Clear(void)  { (PORTB &= ~(1<<PORTB4)); }

void A4910_Disable(void) { A4910pinPB4_reset_Clear(); }
  ba:	24 9a       	sbi	0x04, 4	; 4
  bc:	08 95       	ret

000000be <A4910pinPB4_reset_Set>:
  be:	2c 9a       	sbi	0x05, 4	; 5
  c0:	08 95       	ret

000000c2 <A4910_Enable>:
  c2:	0c 94 5f 00 	jmp	0xbe	; 0xbe <A4910pinPB4_reset_Set>

000000c6 <hall_desiredRPM_set>:

uint8_t goalRPM_ADC_value = 0;//!<Motor Input to set the motor speed

////////////////////////////////////////////////////////////////////////////////////////

void hall_desiredRPM_set(uint8_t speed) { motorSpeed_desired = speed; }
  c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <motorSpeed_desired>
  ca:	08 95       	ret

000000cc <hall_desiredRPM_get>:
uint8_t hall_desiredRPM_get(void) { return motorSpeed_desired; }
  cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <motorSpeed_desired>
  d0:	08 95       	ret

000000d2 <hall_measuredRPM_set>:

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
  d2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <motorSpeed_measured>
  d6:	08 95       	ret

000000d8 <hall_measuredRPM_get>:
uint8_t hall_measuredRPM_get(void) { return motorSpeed_measured; }
  d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <motorSpeed_measured>
  dc:	08 95       	ret

000000de <hall_goalRPM_get>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t hall_goalRPM_get(void) { return goalRPM_ADC_value; }
  de:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <goalRPM_ADC_value>
  e2:	08 95       	ret

000000e4 <hall_goalRPM_set>:
void hall_goalRPM_set(uint8_t ADC_value) { goalRPM_ADC_value = ADC_value; }
  e4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <goalRPM_ADC_value>
  e8:	08 95       	ret

000000ea <hall_getPosition>:
////////////////////////////////////////////////////////////////////////////////////////

inline uint8_t hall_getPosition(void)
{
  //Example: if Hall GRN & YEL are high, the result is 0b00000110
  uint8_t state = ((PIND & (1<<PIND1)) >> (PIND1-0)) | //Hall BLU //LSB
  ea:	89 b1       	in	r24, 0x09	; 9
                  ((PINC & (1<<PINC1)) >> (PINC1-1)) | //Hall YEL
  ec:	26 b1       	in	r18, 0x06	; 6
                  ((PIND & (1<<PIND2)) >> (PIND2-2));   //Hall GRN //MSB
  ee:	99 b1       	in	r25, 0x09	; 9

    return state;
  f0:	22 70       	andi	r18, 0x02	; 2
  f2:	94 70       	andi	r25, 0x04	; 4
  f4:	92 2b       	or	r25, r18
  f6:	86 95       	lsr	r24
  f8:	81 70       	andi	r24, 0x01	; 1
}
  fa:	89 2b       	or	r24, r25
  fc:	08 95       	ret

000000fe <__vector_24>:

////////////////////////////////////////////////////////////////////////////////////////

//Configure interrupt vectors (each time a hall sensor state changes)
ISR( HALL_AC() )  //Hall_A & Hall_C share the same interrupt vector byte
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	3f 93       	push	r19
 10c:	4f 93       	push	r20
 10e:	5f 93       	push	r21
 110:	6f 93       	push	r22
 112:	7f 93       	push	r23
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
 118:	af 93       	push	r26
 11a:	bf 93       	push	r27
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 120:	0e 94 75 00 	call	0xea	; 0xea <hall_getPosition>
 124:	0e 94 9b 02 	call	0x536	; 0x536 <mc_commutateFETs>
}
 128:	ff 91       	pop	r31
 12a:	ef 91       	pop	r30
 12c:	bf 91       	pop	r27
 12e:	af 91       	pop	r26
 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	7f 91       	pop	r23
 136:	6f 91       	pop	r22
 138:	5f 91       	pop	r21
 13a:	4f 91       	pop	r20
 13c:	3f 91       	pop	r19
 13e:	2f 91       	pop	r18
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <hall_calculateRPM>:

  uint16_t timer_value;
  uint32_t new_measured_speed;

  // Two 8 bits variables are use to simulate a 16 bits timers
  timer_value = (ovf_timer<<8) + TCNT0;
 14a:	86 b5       	in	r24, 0x26	; 38
 14c:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <ovf_timer>
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	32 2f       	mov	r19, r18
 154:	22 27       	eor	r18, r18
 156:	28 0f       	add	r18, r24
 158:	31 1d       	adc	r19, r1

  if (timer_value == 0) {timer_value += 1 ;} // prevent DIV by 0 in next line
 15a:	21 15       	cp	r18, r1
 15c:	31 05       	cpc	r19, r1
 15e:	11 f4       	brne	.+4      	; 0x164 <hall_calculateRPM+0x1a>
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	30 e0       	ldi	r19, 0x00	; 0
  
  new_measured_speed = K_SPEED / timer_value;
 164:	40 e0       	ldi	r20, 0x00	; 0
 166:	50 e0       	ldi	r21, 0x00	; 0
 168:	65 e8       	ldi	r22, 0x85	; 133
 16a:	7f ec       	ldi	r23, 0xCF	; 207
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 88 03 	call	0x710	; 0x710 <__divmodsi4>
  
  if(new_measured_speed > 255) new_measured_speed = 255; // Variable saturation
 174:	2f 3f       	cpi	r18, 0xFF	; 255
 176:	31 05       	cpc	r19, r1
 178:	41 05       	cpc	r20, r1
 17a:	51 05       	cpc	r21, r1
 17c:	11 f0       	breq	.+4      	; 0x182 <hall_calculateRPM+0x38>
 17e:	0c f0       	brlt	.+2      	; 0x182 <hall_calculateRPM+0x38>
 180:	2f ef       	ldi	r18, 0xFF	; 255
void hall_desiredRPM_set(uint8_t speed) { motorSpeed_desired = speed; }
uint8_t hall_desiredRPM_get(void) { return motorSpeed_desired; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
 182:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <motorSpeed_measured>
    // else get the real speed
    hall_measuredRPM_set(new_measured_speed);
  #endif

  // Reset Timer 0 register and variables
  TCNT0=0x00;
 186:	16 bc       	out	0x26, r1	; 38
  ovf_timer = 0;
 188:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ovf_timer>
 18c:	08 95       	ret

0000018e <__vector_23>:
}

////////////////////////////////////////////////////////////////////////////////////////

ISR( HALL_B() )
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
  mc_commutateFETs( hall_getPosition() );
 1b0:	0e 94 75 00 	call	0xea	; 0xea <hall_getPosition>
 1b4:	0e 94 9b 02 	call	0x536	; 0x536 <mc_commutateFETs>

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 1b8:	31 99       	sbic	0x06, 1	; 6
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <__vector_23+0x32>
  else                    { hallB_state = HALL_B_LOW;  }
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	07 c0       	rjmp	.+14     	; 0x1ce <__vector_23+0x40>

  if ( (hallB_state          == HALL_B_HIGH ) &&
 1c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1c4:	81 11       	cpse	r24, r1
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <__vector_23+0x3e>
       (hallB_state_previous == HALL_B_LOW  )  )
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
 1c8:	0e 94 a5 00 	call	0x14a	; 0x14a <hall_calculateRPM>
  mc_commutateFETs( hall_getPosition() );

  uint8_t hallB_state = 0;
  static uint8_t hallB_state_previous = 0;

  if (PINC & (1<<PINC1) ) { hallB_state = HALL_B_HIGH; }
 1cc:	81 e0       	ldi	r24, 0x01	; 1
  {
    //rising edge just occurred on Hall B
    hall_calculateRPM(); //estimate speed on Hall_B rising edge
  }

  hallB_state_previous = hallB_state;
 1ce:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
}
 1d2:	ff 91       	pop	r31
 1d4:	ef 91       	pop	r30
 1d6:	bf 91       	pop	r27
 1d8:	af 91       	pop	r26
 1da:	9f 91       	pop	r25
 1dc:	8f 91       	pop	r24
 1de:	7f 91       	pop	r23
 1e0:	6f 91       	pop	r22
 1e2:	5f 91       	pop	r21
 1e4:	4f 91       	pop	r20
 1e6:	3f 91       	pop	r19
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <hall_init_rpm_timer0>:
 * @pre None
 * @post Timer0 initialized.
*/
void hall_init_rpm_timer0(void)
{
  TCCR0A = 0;
 1f4:	14 bc       	out	0x24, r1	; 36
  TCCR0B = (1<<CS02)|(0<<CS01)|(0<<CS00); // 256 prescaler (16us)
 1f6:	84 e0       	ldi	r24, 0x04	; 4
 1f8:	85 bd       	out	0x25, r24	; 37
  TIMSK0 = (1<<TOIE0);
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 200:	08 95       	ret

00000202 <__vector_17>:
  * @brief Timer0 Overflow for speed measurement
  * @pre configuration of timer 0
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
  TCNT0=0x00;
 20e:	16 bc       	out	0x26, r1	; 38
  ovf_timer++;
 210:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ovf_timer>
 214:	8f 5f       	subi	r24, 0xFF	; 255
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
 216:	84 36       	cpi	r24, 0x64	; 100
 218:	18 f4       	brcc	.+6      	; 0x220 <__vector_17+0x1e>
  * @post generate an overflow when the motor turns too slowly
*/
ISR(TIMER0_OVF_vect)
{
  TCNT0=0x00;
  ovf_timer++;
 21a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ovf_timer>
 21e:	04 c0       	rjmp	.+8      	; 0x228 <__vector_17+0x26>
  // if they are no commutation after 125 ms
  // 125 ms = (61<<8) * 8us
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
 220:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <ovf_timer>
void hall_desiredRPM_set(uint8_t speed) { motorSpeed_desired = speed; }
uint8_t hall_desiredRPM_get(void) { return motorSpeed_desired; }

////////////////////////////////////////////////////////////////////////////////////////

void hall_measuredRPM_set(uint8_t measured_speed) { motorSpeed_measured = measured_speed; }
 224:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <motorSpeed_measured>
  if(ovf_timer >= 100)
  {
    ovf_timer = 0;
    hall_measuredRPM_set(0);
  }
 228:	8f 91       	pop	r24
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <main>:
extern uint8_t g_tick;           //generated by mc_drv.c Used for sampling time
extern uint8_t overcurrent;

int main(void)
{
  mc_motor_init();
 234:	0e 94 17 03 	call	0x62e	; 0x62e <mc_motor_init>
  
  mci_motor_run();
 238:	0e 94 d7 02 	call	0x5ae	; 0x5ae <mci_motor_run>
  
  while(1)
  {
    if (g_tick == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
 23c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <g_tick>
 240:	81 30       	cpi	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <main+0xc>
    {
      g_tick = FALSE;
 244:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <g_tick>
      mc_ADC_Scheduler(); // Get Current or potentiometer value
 248:	0e 94 53 02 	call	0x4a6	; 0x4a6 <mc_ADC_Scheduler>
      g_regulation_period += 1;
 24c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <g_regulation_period>
 250:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <g_regulation_period+0x1>
 254:	01 96       	adiw	r24, 0x01	; 1
	  
      if(g_regulation_period >= 40) //n * 256us = Te
 256:	88 32       	cpi	r24, 0x28	; 40
 258:	91 05       	cpc	r25, r1
 25a:	28 f4       	brcc	.+10     	; 0x266 <main+0x32>
  {
    if (g_tick == TRUE) // Timer 1 generates an interrupt (which sets g_tick) every 256us
    {
      g_tick = FALSE;
      mc_ADC_Scheduler(); // Get Current or potentiometer value
      g_regulation_period += 1;
 25c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <g_regulation_period+0x1>
 260:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <g_regulation_period>
 264:	0a c0       	rjmp	.+20     	; 0x27a <main+0x46>
	  
      if(g_regulation_period >= 40) //n * 256us = Te
      {
        g_regulation_period = 0;
 266:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <g_regulation_period+0x1>
 26a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <g_regulation_period>

        hall_desiredRPM_set( hall_goalRPM_get() );
 26e:	0e 94 6f 00 	call	0xde	; 0xde <hall_goalRPM_get>
 272:	0e 94 63 00 	call	0xc6	; 0xc6 <hall_desiredRPM_set>
        pid_dutyCycle_calculate();
 276:	0e 94 51 03 	call	0x6a2	; 0x6a2 <pid_dutyCycle_calculate>
      }

      psc_setDutyCycle( pid_dutyCycle_get() );
 27a:	0e 94 25 03 	call	0x64a	; 0x64a <pid_dutyCycle_get>
 27e:	0e 94 81 01 	call	0x302	; 0x302 <psc_setDutyCycle>
 282:	dc cf       	rjmp	.-72     	; 0x23c <main+0x8>

00000284 <PSC_Init>:
////////////////////////////////////////////////////////////////////////////////////////

//! @brief PSC Init : Initialize the PSC according to the settings in config.h
void PSC_Init (void)
{
   Psc_set_module_A(A_SA_VAL,A_RA_VAL,A_SB_VAL);
 284:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 288:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 28c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 296:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 29a:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
   Psc_set_module_B(B_SA_VAL,B_RA_VAL,B_SB_VAL);
 29e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 2a2:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 2a6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 2aa:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 2ae:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 2b2:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
   Psc_set_module_C(C_SA_VAL,C_RA_VAL,C_SB_VAL);
 2b6:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 2ba:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 2be:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 2c2:	80 93 ae 00 	sts	0x00AE, r24	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 2c6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 2ca:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
   Psc_set_register_RB(RB_VAL);
 2ce:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 2d2:	8f ef       	ldi	r24, 0xFF	; 255
 2d4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>

   Psc_config();
 2d8:	84 e1       	ldi	r24, 0x14	; 20
 2da:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__TEXT_REGION_LENGTH__+0x7f80b5>

   Psc_config_input_0(PSC_OVERLAP_ENABLE,\
 2de:	88 e9       	ldi	r24, 0x98	; 152
 2e0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_1(PSC_OVERLAP_ENABLE,\
 2e4:	98 ef       	ldi	r25, 0xF8	; 248
 2e6:	90 93 b9 00 	sts	0x00B9, r25	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
                      PSC_USE_HIGH_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   Psc_config_input_2(PSC_OVERLAP_ENABLE,\
 2ea:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
                      PSC_USE_LOW_LEVEL,\
                      PSC_INPUT_FILTER_ENABLE,\
                      PSC_SYNCHRONOUS_OUTPUT_CONTROL,\
                      PSC_INPUT_NO_ACTION);

   PIFR = (1<<PEV2)|(1<<PEV1)|(1<<PEV0)|(1<<PEOP);
 2ee:	8f e0       	ldi	r24, 0x0F	; 15
 2f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
   PIM = (1<<PEVE1);
 2f4:	84 e0       	ldi	r24, 0x04	; 4
 2f6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

   Psc_run();
 2fa:	81 e2       	ldi	r24, 0x21	; 33
 2fc:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 300:	08 95       	ret

00000302 <psc_setDutyCycle>:
  #if ((CURRENT_DECAY == SLOW_DECAY_SYNCHRONOUS)||(CURRENT_DECAY == FAST_DECAY_SYNCHRONOUS))
    uint8_t dutydt;   /* duty with dead time */
    if (duty >= DEADTIME) {dutydt = duty - DEADTIME;}
  #endif
   
  Psc_lock();
 302:	e5 eb       	ldi	r30, 0xB5	; 181
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	94 e3       	ldi	r25, 0x34	; 52
 308:	90 83       	st	Z, r25

  // Duty = 0   => Duty Cycle   0%
  // Duty = 255 => Duty Cycle 100%
 
  #if (CURRENT_DECAY == FAST_DECAY)
    Psc_set_module_A(duty,A_RA_VAL,duty);
 30a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 30e:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 312:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__TEXT_REGION_LENGTH__+0x7f80a3>
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	90 93 a2 00 	sts	0x00A2, r25	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7f80a2>
 31c:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__TEXT_REGION_LENGTH__+0x7f80a5>
 320:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <__TEXT_REGION_LENGTH__+0x7f80a4>
    Psc_set_module_B(duty,B_RA_VAL,duty);
 324:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__TEXT_REGION_LENGTH__+0x7f80a7>
 328:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__TEXT_REGION_LENGTH__+0x7f80a6>
 32c:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7f80a9>
 330:	90 93 a8 00 	sts	0x00A8, r25	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7f80a8>
 334:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7f80ab>
 338:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7f80aa>
    Psc_set_module_C(duty,C_RA_VAL,duty);
 33c:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <__TEXT_REGION_LENGTH__+0x7f80ad>
 340:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__TEXT_REGION_LENGTH__+0x7f80ac>
 344:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <__TEXT_REGION_LENGTH__+0x7f80af>
 348:	90 93 ae 00 	sts	0x00AE, r25	; 0x8000ae <__TEXT_REGION_LENGTH__+0x7f80ae>
 34c:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 350:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    Psc_set_module_B(duty,B_RA_VAL,0);
    Psc_set_module_C(duty,C_RA_VAL,0);
  #endif
#endif
   
  Psc_unlock();
 354:	84 e1       	ldi	r24, 0x14	; 20
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <mc_motor_init_timer1>:
 * @pre None
 * @post An interrupt all 256us
*/
void mc_motor_init_timer1(void)  //JTS2doNow: swap with counter 0, which uses software 16 bit.
{
  TCCR1A = 0; //Normal port operation + Mode CTC
 35a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  TCCR1B = 1<<WGM12 | 1<<CS11 | 1<<CS10 ; // Mode CTC + clock prescaler=64
 35e:	8b e0       	ldi	r24, 0x0B	; 11
 360:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  TCCR1C = 0;
 364:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__TEXT_REGION_LENGTH__+0x7f8082>
  OCR1AH = 0; //output compare register high byte
 368:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  OCR1AL = 63; // f ocra = 1/(16MHz/64)*(63+1) = 256 us tick
 36c:	8f e3       	ldi	r24, 0x3F	; 63
 36e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
  TIMSK1=(1<<OCIE1A); // Output compare A Match interrupt Enable
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 378:	08 95       	ret

0000037a <mc_motor_init_HW>:
  // PD0 => UH     PB7 => UL
  // PC0 => VH     PB6 => VL
  // PB0 => WH     PB1 => WL

  // Set MOSFET Drive pins low (soo all FETs are off when set to output in next step)
  PORTB &= ~(1<<PORTB7 | 1<<PORTB6 | 1<<PORTB1 | 1<<PORTB0);
 37a:	85 b1       	in	r24, 0x05	; 5
 37c:	8c 73       	andi	r24, 0x3C	; 60
 37e:	85 b9       	out	0x05, r24	; 5
  PORTC &= ~(1<<PORTC0);
 380:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ~(1<<PORTD0);
 382:	58 98       	cbi	0x0b, 0	; 11

  // Set PSC MOSFET pins to output
  DDRB = (1<<DDB7)|(1<<DDB6)|(1<<DDB1)|(1<<DDB0);
 384:	83 ec       	ldi	r24, 0xC3	; 195
 386:	84 b9       	out	0x04, r24	; 4
  DDRC = (1<<DDC0);
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	87 b9       	out	0x07, r24	; 7
  DDRD = (1<<DDD0);
 38c:	8a b9       	out	0x0a, r24	; 10
  
  //Enable A4910 (FET driver IC)
  A4910pinPB4_reset_Init(); //configure pin to digital output
 38e:	0e 94 5d 00 	call	0xba	; 0xba <A4910pinPB4_reset_Init>
  A4910_Enable(); //enable MOSFET driver
 392:	0e 94 61 00 	call	0xc2	; 0xc2 <A4910_Enable>

  // Set to disable digital input circuitry on all pins used as analog inputs.
  // This reduces power consumption, particularly when an analog signal is near Vcc/2.
  // Digital Inputs for comparators are not disabled.
  DIDR1 = (1<<ADC9D)|(1<<ADC8D); //CUR_B & CUR_C ADC inputs
 396:	83 e0       	ldi	r24, 0x03	; 3
 398:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <__TEXT_REGION_LENGTH__+0x7f807f>
  DIDR0 = (1<<ADC5D)|(1<<ADC6D); //CUR_A ADC input
 39c:	80 e6       	ldi	r24, 0x60	; 96
 39e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>
  
  //vref_source(); // Select the Vref Source
  //JTS2doLater: need to use 2.56 internal reference when measuring phase currents (absolute accuracy)
  //JTS2doLater: need to use VCC when measuring PWM from 328p (ratiometric)
  //The first ADC measurement after each switch should be discarded
  ADCSRB &= ~(1<<ISRCEN); //disable 100 uA current source on AREF pin.
 3a2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 3a6:	8f 7b       	andi	r24, 0xBF	; 191
 3a8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  ADCSRB |= (1<<AREFEN); //connect AREF pin to the internal analog reference.
 3ac:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
 3b0:	80 62       	ori	r24, 0x20	; 32
 3b2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  
  //Select the Vref Source
  Adc_enable_external_vref();
 3b6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 3ba:	8f 73       	andi	r24, 0x3F	; 63
 3bc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>

  //init_adc();
  Adc_config();
 3c0:	80 ec       	ldi	r24, 0xC0	; 192
 3c2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 3c6:	8a e8       	ldi	r24, 0x8A	; 138
 3c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
  //JTS2doLater: I've disconnected the DAC register from the pin, but right now no overcurrent.
  //Dac_config();
  /* set the overcurrent level */
  //Dac_set_8_bits(IMAX);
    
  hall_init_rpm_timer0();
 3d2:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <hall_init_rpm_timer0>
  mc_motor_init_timer1();
 3d6:	0e 94 ad 01 	call	0x35a	; 0x35a <mc_motor_init_timer1>

  //JTS2doLater: We'll eventually use these to throttle back current, using 1V1 bandgap 
  Comp_0_config();
 3da:	84 ec       	ldi	r24, 0xC4	; 196
 3dc:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__TEXT_REGION_LENGTH__+0x7f8094>
  Comp_1_config();
 3e0:	95 e8       	ldi	r25, 0x85	; 133
 3e2:	90 93 95 00 	sts	0x0095, r25	; 0x800095 <__TEXT_REGION_LENGTH__+0x7f8095>
  Comp_2_config();
 3e6:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <__TEXT_REGION_LENGTH__+0x7f8096>
  
  //JTS rewrote
  // Use PCINT17 to detect change on H1 (A) sensor
  // Use PCINT18 to detect change on H3 (C) sensor
  PCMSK2 = ( (1<<PCINT17) | (1<<PCINT18) );
 3ea:	86 e0       	ldi	r24, 0x06	; 6
 3ec:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
  // Use PCINT9 to detect change on H2 (B) sensor
  PCMSK1 = (1<<PCINT9);
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__TEXT_REGION_LENGTH__+0x7f806b>
  // Enable pin change interrupts on PCMSK1 & 2
  PCICR = ( (1<<PCIE1) | (1<<PCIE2) );
 3f6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>

  Start_pll_64_mega(); // Start the PLL and use the 64 MHz PLL output
 3fa:	89 bd       	out	0x29, r24	; 41
  Wait_pll_ready();
 3fc:	09 b4       	in	r0, 0x29	; 41
 3fe:	00 fe       	sbrs	r0, 0
 400:	fd cf       	rjmp	.-6      	; 0x3fc <mc_motor_init_HW+0x82>

  PSC_Init();
 402:	0c 94 42 01 	jmp	0x284	; 0x284 <PSC_Init>

00000406 <__vector_12>:
  * @brief Launch the regulation loop (see main.c) .
  * @pre configuration of timer 1 registers
  * @post g_tick use in main.c for regulation loop
*/
ISR(TIMER1_COMPA_vect) //main tick //timer configured in mc_motor_init_timer1()
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	8f 93       	push	r24
  g_tick = TRUE;
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <g_tick>
}
 418:	8f 91       	pop	r24
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <__vector_27>:
//! @brief Launch the sampling procedure to get current value
//! @pre amplifier and IT initialization
//! @post Set the End Of Conversion flag

ISR(ADC_vect)
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	2f 93       	push	r18
 430:	3f 93       	push	r19
 432:	4f 93       	push	r20
 434:	5f 93       	push	r21
 436:	6f 93       	push	r22
 438:	7f 93       	push	r23
 43a:	8f 93       	push	r24
 43c:	9f 93       	push	r25
 43e:	af 93       	push	r26
 440:	bf 93       	push	r27
 442:	ef 93       	push	r30
 444:	ff 93       	push	r31
  Adc_select_channel(ADC_INPUT_GND); /* release the amplified channel */
 446:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 44a:	80 7e       	andi	r24, 0xE0	; 224
 44c:	82 61       	ori	r24, 0x12	; 18
 44e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  if(ADC_stateMachine == ADC_MEASURE_REQUESTED_RPM) hall_goalRPM_set(Adc_get_8_bits_result());
 452:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ADC_stateMachine>
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	21 f4       	brne	.+8      	; 0x462 <__vector_27+0x3e>
 45a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 45e:	0e 94 72 00 	call	0xe4	; 0xe4 <hall_goalRPM_set>
  if(ADC_stateMachine == ADC_MEASURE_CURRENT) mci_motor_measuredCurrent_integrate(Adc_get_10_bits_result());
 462:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ADC_stateMachine>
 466:	82 30       	cpi	r24, 0x02	; 2
 468:	59 f4       	brne	.+22     	; 0x480 <__vector_27+0x5c>
 46a:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 46e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	98 2f       	mov	r25, r24
 476:	88 27       	eor	r24, r24
 478:	82 0f       	add	r24, r18
 47a:	91 1d       	adc	r25, r1
 47c:	0e 94 ef 02 	call	0x5de	; 0x5de <mci_motor_measuredCurrent_integrate>
  ADC_hardwareStatus = FREE;
 480:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ADC_hardwareStatus>
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <mc_ADC_Scheduler>:

////////////////////////////////////////////////////////////////////////////////////////

void mc_ADC_Scheduler(void)
{
  switch(ADC_stateMachine)
 4a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ADC_stateMachine>
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	09 f1       	breq	.+66     	; 0x4f0 <mc_ADC_Scheduler+0x4a>
 4ae:	18 f0       	brcs	.+6      	; 0x4b6 <mc_ADC_Scheduler+0x10>
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	21 f0       	breq	.+8      	; 0x4bc <mc_ADC_Scheduler+0x16>
 4b4:	08 95       	ret
  {
  case ADC_UNITIALIZED:
    ADC_hardwareStatus = FREE;
 4b6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <ADC_hardwareStatus>
 4ba:	30 c0       	rjmp	.+96     	; 0x51c <mc_ADC_Scheduler+0x76>
    break;

  //JTS2doNow: Confusing... case doesn't match ADC action
  case ADC_MEASURE_CURRENT:
    //ADC just finished measuring current... now we need to configure the ADC to measure desired RPM
    if(ADC_hardwareStatus == FREE)
 4bc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <ADC_hardwareStatus>
 4c0:	81 11       	cpse	r24, r1
 4c2:	2f c0       	rjmp	.+94     	; 0x522 <mc_ADC_Scheduler+0x7c>
    {
      ADC_hardwareStatus = BUSY;
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <ADC_hardwareStatus>
      Adc_left_adjust_result();
 4ca:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4ce:	80 62       	ori	r24, 0x20	; 32
 4d0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_ADC5); //configure ADC to measure desired RPM (from grbl)
 4d4:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4d8:	80 7e       	andi	r24, 0xE0	; 224
 4da:	85 60       	ori	r24, 0x05	; 5
 4dc:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 4e0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 4e4:	80 64       	ori	r24, 0x40	; 64
 4e6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_REQUESTED_RPM;
 4ea:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <ADC_stateMachine>
 4ee:	08 95       	ret
    }
    break;

  case ADC_MEASURE_REQUESTED_RPM:
    //ADC just finished measuring goal RPM... now we need to configure the ADC to measure current
    if(ADC_hardwareStatus == FREE)
 4f0:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <ADC_hardwareStatus>
 4f4:	91 11       	cpse	r25, r1
 4f6:	15 c0       	rjmp	.+42     	; 0x522 <mc_ADC_Scheduler+0x7c>
    {
      ADC_hardwareStatus = BUSY;
 4f8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <ADC_hardwareStatus>
      Adc_right_adjust_result();
 4fc:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
      Adc_start_conv_channel(ADC_INPUT_AMP1); /* get current on amplifier 1 */
 506:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 50a:	80 7e       	andi	r24, 0xE0	; 224
 50c:	8f 60       	ori	r24, 0x0F	; 15
 50e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
 512:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 516:	80 64       	ori	r24, 0x40	; 64
 518:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
      ADC_stateMachine = ADC_MEASURE_CURRENT; //this case gets current sensor
 51c:	82 e0       	ldi	r24, 0x02	; 2
 51e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ADC_stateMachine>
 522:	08 95       	ret

00000524 <turnOffAllFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

void turnOffAllFETs(void)
{
  POC = ( (0<<POEN0A)|(0<<POEN0B) |
 524:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
          (0<<POEN1A)|(0<<POEN1B) |
          (0<<POEN2A)|(0<<POEN2B) );

  PORTB &= ( ~(1<<PORTB7) ); //turn off Q2
 528:	2f 98       	cbi	0x05, 7	; 5
  PORTB &= ( ~(1<<PORTB6) ); //turn off Q4
 52a:	2e 98       	cbi	0x05, 6	; 5
  PORTB &= ( ~(1<<PORTB0) ); //turn off Q5
 52c:	28 98       	cbi	0x05, 0	; 5
  PORTB &= ( ~(1<<PORTB1) ); //turn off Q6
 52e:	29 98       	cbi	0x05, 1	; 5
  PORTC &= ( ~(1<<PORTC0) ); //turn off Q3
 530:	40 98       	cbi	0x08, 0	; 8
  PORTD &= ( ~(1<<PORTD0) );  //turn off Q1
 532:	58 98       	cbi	0x0b, 0	; 11
 534:	08 95       	ret

00000536 <mc_commutateFETs>:

//////////////////////////////////////////////////////////////////////////////////////////////////

//Set commutation outputs based on sensor position
void mc_commutateFETs(uint8_t hallState)
{
 536:	cf 93       	push	r28
 538:	c8 2f       	mov	r28, r24
    if ( mci_motorState_get() == STOPPED ) { turnOffAllFETs(); }
 53a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <mci_motorState_get>
 53e:	88 23       	and	r24, r24
 540:	99 f1       	breq	.+102    	; 0x5a8 <mc_commutateFETs+0x72>
    else //motor == RUNNING
    {
      psc_setDutyCycle( pid_dutyCycle_get() );
 542:	0e 94 25 03 	call	0x64a	; 0x64a <pid_dutyCycle_get>
 546:	0e 94 81 01 	call	0x302	; 0x302 <psc_setDutyCycle>

      if(mci_motorDirection_get() == CCW)
 54a:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <mci_motorDirection_get>
 54e:	81 30       	cpi	r24, 0x01	; 1
 550:	71 f4       	brne	.+28     	; 0x56e <mc_commutateFETs+0x38>
      {
          switch(hallState)
 552:	c3 30       	cpi	r28, 0x03	; 3
 554:	01 f1       	breq	.+64     	; 0x596 <mc_commutateFETs+0x60>
 556:	28 f4       	brcc	.+10     	; 0x562 <mc_commutateFETs+0x2c>
 558:	c1 30       	cpi	r28, 0x01	; 1
 55a:	09 f1       	breq	.+66     	; 0x59e <mc_commutateFETs+0x68>
 55c:	c2 30       	cpi	r28, 0x02	; 2
 55e:	e9 f0       	breq	.+58     	; 0x59a <mc_commutateFETs+0x64>
 560:	23 c0       	rjmp	.+70     	; 0x5a8 <mc_commutateFETs+0x72>
 562:	c5 30       	cpi	r28, 0x05	; 5
 564:	a1 f0       	breq	.+40     	; 0x58e <mc_commutateFETs+0x58>
 566:	a8 f0       	brcs	.+42     	; 0x592 <mc_commutateFETs+0x5c>
 568:	c6 30       	cpi	r28, 0x06	; 6
 56a:	79 f0       	breq	.+30     	; 0x58a <mc_commutateFETs+0x54>
 56c:	1d c0       	rjmp	.+58     	; 0x5a8 <mc_commutateFETs+0x72>
              default: turnOffAllFETs(); break;
          }
      }
      else //direction == CW
      {
          switch(hallState)
 56e:	c3 30       	cpi	r28, 0x03	; 3
 570:	81 f0       	breq	.+32     	; 0x592 <mc_commutateFETs+0x5c>
 572:	28 f4       	brcc	.+10     	; 0x57e <mc_commutateFETs+0x48>
 574:	c1 30       	cpi	r28, 0x01	; 1
 576:	49 f0       	breq	.+18     	; 0x58a <mc_commutateFETs+0x54>
 578:	c2 30       	cpi	r28, 0x02	; 2
 57a:	49 f0       	breq	.+18     	; 0x58e <mc_commutateFETs+0x58>
 57c:	15 c0       	rjmp	.+42     	; 0x5a8 <mc_commutateFETs+0x72>
 57e:	c5 30       	cpi	r28, 0x05	; 5
 580:	61 f0       	breq	.+24     	; 0x59a <mc_commutateFETs+0x64>
 582:	48 f0       	brcs	.+18     	; 0x596 <mc_commutateFETs+0x60>
 584:	c6 30       	cpi	r28, 0x06	; 6
 586:	59 f0       	breq	.+22     	; 0x59e <mc_commutateFETs+0x68>
 588:	0f c0       	rjmp	.+30     	; 0x5a8 <mc_commutateFETs+0x72>
          {
              case 1: Set_Q1Q6(); break;
 58a:	81 e2       	ldi	r24, 0x21	; 33
 58c:	09 c0       	rjmp	.+18     	; 0x5a0 <mc_commutateFETs+0x6a>
              case 2: Set_Q3Q2(); break;
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	07 c0       	rjmp	.+14     	; 0x5a0 <mc_commutateFETs+0x6a>
              case 3: Set_Q3Q6(); break;
 592:	84 e2       	ldi	r24, 0x24	; 36
 594:	05 c0       	rjmp	.+10     	; 0x5a0 <mc_commutateFETs+0x6a>
              case 4: Set_Q5Q4(); break;
 596:	88 e1       	ldi	r24, 0x18	; 24
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <mc_commutateFETs+0x6a>
              case 5: Set_Q1Q4(); break;
 59a:	89 e0       	ldi	r24, 0x09	; 9
 59c:	01 c0       	rjmp	.+2      	; 0x5a0 <mc_commutateFETs+0x6a>
              case 6: Set_Q5Q2(); break;
 59e:	82 e1       	ldi	r24, 0x12	; 18
 5a0:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <__TEXT_REGION_LENGTH__+0x7f80b6>
              default: turnOffAllFETs(); break;
          }
      }
    }
}
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret
 5a8:	cf 91       	pop	r28
              case 2: Set_Q3Q2(); break;
              case 3: Set_Q3Q6(); break;
              case 4: Set_Q5Q4(); break;
              case 5: Set_Q1Q4(); break;
              case 6: Set_Q5Q2(); break;
              default: turnOffAllFETs(); break;
 5aa:	0c 94 92 02 	jmp	0x524	; 0x524 <turnOffAllFETs>

000005ae <mci_motor_run>:
uint8_t mci_motorDirection_get(void) { return motorDirection; }

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: We shouldn't be integrating inside these functions... do it wherever they're called
uint16_t mci_motor_measuredCurrent_get(void) { return (mci_measured_current >> 6); } //mci_measured_current/64
 5ae:	80 91 b7 00 	lds	r24, 0x00B7	; 0x8000b7 <__TEXT_REGION_LENGTH__+0x7f80b7>
 5b2:	80 ff       	sbrs	r24, 0
 5b4:	0e 94 42 01 	call	0x284	; 0x284 <PSC_Init>
 5b8:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <overcurrent>
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <motorStatus>
 5c2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <pid_dutyCycle_calculate>
 5c6:	0e 94 81 01 	call	0x302	; 0x302 <psc_setDutyCycle>
 5ca:	0e 94 75 00 	call	0xea	; 0xea <hall_getPosition>
 5ce:	0c 94 9b 02 	jmp	0x536	; 0x536 <mc_commutateFETs>

000005d2 <mci_motorState_get>:
 5d2:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <motorStatus>
 5d6:	08 95       	ret

000005d8 <mci_motorDirection_get>:
 5d8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5dc:	08 95       	ret

000005de <mci_motor_measuredCurrent_integrate>:

void mci_motor_measuredCurrent_integrate(uint16_t current) { mci_measured_current = ( (63 * mci_measured_current) + (64 * current) )>>6; }
 5de:	fc 01       	movw	r30, r24
 5e0:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <mci_measured_current>
 5e4:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <mci_measured_current+0x1>
 5e8:	40 91 0f 01 	lds	r20, 0x010F	; 0x80010f <mci_measured_current+0x2>
 5ec:	50 91 10 01 	lds	r21, 0x0110	; 0x800110 <mci_measured_current+0x3>
 5f0:	af e3       	ldi	r26, 0x3F	; 63
 5f2:	b0 e0       	ldi	r27, 0x00	; 0
 5f4:	0e 94 a7 03 	call	0x74e	; 0x74e <__muluhisi3>
 5f8:	26 e0       	ldi	r18, 0x06	; 6
 5fa:	ee 0f       	add	r30, r30
 5fc:	ff 1f       	adc	r31, r31
 5fe:	2a 95       	dec	r18
 600:	e1 f7       	brne	.-8      	; 0x5fa <mci_motor_measuredCurrent_integrate+0x1c>
 602:	dc 01       	movw	r26, r24
 604:	cb 01       	movw	r24, r22
 606:	8e 0f       	add	r24, r30
 608:	9f 1f       	adc	r25, r31
 60a:	a1 1d       	adc	r26, r1
 60c:	b1 1d       	adc	r27, r1
 60e:	36 e0       	ldi	r19, 0x06	; 6
 610:	b6 95       	lsr	r27
 612:	a7 95       	ror	r26
 614:	97 95       	ror	r25
 616:	87 95       	ror	r24
 618:	3a 95       	dec	r19
 61a:	d1 f7       	brne	.-12     	; 0x610 <mci_motor_measuredCurrent_integrate+0x32>
 61c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mci_measured_current>
 620:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <mci_measured_current+0x1>
 624:	a0 93 0f 01 	sts	0x010F, r26	; 0x80010f <mci_measured_current+0x2>
 628:	b0 93 10 01 	sts	0x0110, r27	; 0x800110 <mci_measured_current+0x3>
 62c:	08 95       	ret

0000062e <mc_motor_init>:

////////////////////////////////////////////////////////////////////////////////////////

void mc_motor_init()
{
  mc_motor_init_HW();
 62e:	0e 94 bd 01 	call	0x37a	; 0x37a <mc_motor_init_HW>
  sei(); //enable interrupts
 632:	78 94       	sei

uint8_t mci_motorState_get(void) { return motorStatus; }

////////////////////////////////////////////////////////////////////////////////////////

void mci_motor_stop(void) { motorStatus = STOPPED; }
 634:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <motorStatus>

////////////////////////////////////////////////////////////////////////////////////////

//JTS2doNow: Direction never set in code.  Fine for now.
//JTS2doNow: If direction_now != direction_previous, need to stop motor first, then spin other way.
void mci_motorDirection_set(uint8_t direction) { (direction == CCW) ? (motorDirection = CCW) : (motorDirection = CW); }
 638:	82 e0       	ldi	r24, 0x02	; 2
 63a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  mc_motor_init_HW();
  sei(); //enable interrupts

  mci_motor_stop();
  mci_motorDirection_set(CW);
  hall_desiredRPM_set(0);
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	0e 94 63 00 	call	0xc6	; 0xc6 <hall_desiredRPM_set>
  hall_measuredRPM_set(0);
 644:	80 e0       	ldi	r24, 0x00	; 0
 646:	0c 94 69 00 	jmp	0xd2	; 0xd2 <hall_measuredRPM_set>

0000064a <pid_dutyCycle_get>:

  if(speed_derivative >  255) speed_derivative =  255;
  if(speed_derivative < -255) speed_derivative = -255;

  return (SPEED_PID_DIFFERENTIAL_COEF * speed_derivative);
}
 64a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dutyCycle>
 64e:	08 95       	ret

00000650 <pid_calculate_integral>:
 650:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <speed_integrator.2070>
 654:	30 91 13 01 	lds	r19, 0x0113	; 0x800113 <speed_integrator.2070+0x1>
 658:	82 0f       	add	r24, r18
 65a:	93 1f       	adc	r25, r19
 65c:	8f 3f       	cpi	r24, 0xFF	; 255
 65e:	91 05       	cpc	r25, r1
 660:	19 f0       	breq	.+6      	; 0x668 <pid_calculate_integral+0x18>
 662:	14 f0       	brlt	.+4      	; 0x668 <pid_calculate_integral+0x18>
 664:	8f ef       	ldi	r24, 0xFF	; 255
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speed_integrator.2070+0x1>
 66c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speed_integrator.2070>
 670:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speed_integrator.2070>
 674:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speed_integrator.2070+0x1>
 678:	81 30       	cpi	r24, 0x01	; 1
 67a:	9f 4f       	sbci	r25, 0xFF	; 255
 67c:	34 f4       	brge	.+12     	; 0x68a <pid_calculate_integral+0x3a>
 67e:	81 e0       	ldi	r24, 0x01	; 1
 680:	9f ef       	ldi	r25, 0xFF	; 255
 682:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <speed_integrator.2070+0x1>
 686:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <speed_integrator.2070>
 68a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <speed_integrator.2070>
 68e:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <speed_integrator.2070+0x1>
 692:	2e e1       	ldi	r18, 0x1E	; 30
 694:	ac 01       	movw	r20, r24
 696:	24 9f       	mul	r18, r20
 698:	c0 01       	movw	r24, r0
 69a:	25 9f       	mul	r18, r21
 69c:	90 0d       	add	r25, r0
 69e:	11 24       	eor	r1, r1
 6a0:	08 95       	ret

000006a2 <pid_dutyCycle_calculate>:

////////////////////////////////////////////////////////////////////////////////////////

uint8_t pid_dutyCycle_calculate(void)
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
  int32_t summedPID = 0;

  uint8_t desiredSpeed = 2 * hall_desiredRPM_get();
 6a6:	0e 94 66 00 	call	0xcc	; 0xcc <hall_desiredRPM_get>
 6aa:	c8 2f       	mov	r28, r24

  int16_t speedError = desiredSpeed - hall_measuredRPM_get();// value -255 <=> 255
 6ac:	0e 94 6c 00 	call	0xd8	; 0xd8 <hall_measuredRPM_get>
 6b0:	cc 0f       	add	r28, r28
 6b2:	d0 e0       	ldi	r29, 0x00	; 0
 6b4:	c8 1b       	sub	r28, r24
 6b6:	d1 09       	sbc	r29, r1

  int16_t TermPID_proportional = pid_calculate_proportional(speedError);
  int16_t TermPID_integral     = pid_calculate_integral    (speedError);
 6b8:	ce 01       	movw	r24, r28
 6ba:	0e 94 28 03 	call	0x650	; 0x650 <pid_calculate_integral>
  int16_t TermPID_derivative   = pid_calculate_derivative  (speedError);

  // Duty Cycle calculation
  summedPID = TermPID_proportional + TermPID_integral + TermPID_derivative;
 6be:	4e e1       	ldi	r20, 0x1E	; 30
 6c0:	4c 9f       	mul	r20, r28
 6c2:	90 01       	movw	r18, r0
 6c4:	4d 9f       	mul	r20, r29
 6c6:	30 0d       	add	r19, r0
 6c8:	11 24       	eor	r1, r1
 6ca:	82 0f       	add	r24, r18
 6cc:	93 1f       	adc	r25, r19
 6ce:	09 2e       	mov	r0, r25
 6d0:	00 0c       	add	r0, r0
 6d2:	aa 0b       	sbc	r26, r26
 6d4:	bb 0b       	sbc	r27, r27
  summedPID = summedPID >> K_SPEED_SCALAR;
 6d6:	24 e0       	ldi	r18, 0x04	; 4
 6d8:	b5 95       	asr	r27
 6da:	a7 95       	ror	r26
 6dc:	97 95       	ror	r25
 6de:	87 95       	ror	r24
 6e0:	2a 95       	dec	r18
 6e2:	d1 f7       	brne	.-12     	; 0x6d8 <pid_dutyCycle_calculate+0x36>

  // Bound max/min PWM value
  if     ( summedPID >= (int16_t)(255) ) { dutyCycle = 255;                  }
 6e4:	8f 3f       	cpi	r24, 0xFF	; 255
 6e6:	91 05       	cpc	r25, r1
 6e8:	a1 05       	cpc	r26, r1
 6ea:	b1 05       	cpc	r27, r1
 6ec:	14 f0       	brlt	.+4      	; 0x6f2 <pid_dutyCycle_calculate+0x50>
 6ee:	8f ef       	ldi	r24, 0xFF	; 255
 6f0:	08 c0       	rjmp	.+16     	; 0x702 <pid_dutyCycle_calculate+0x60>
  else if( summedPID <= (int16_t)(  0) ) { dutyCycle =   0;                  }
 6f2:	18 16       	cp	r1, r24
 6f4:	19 06       	cpc	r1, r25
 6f6:	1a 06       	cpc	r1, r26
 6f8:	1b 06       	cpc	r1, r27
 6fa:	1c f0       	brlt	.+6      	; 0x702 <pid_dutyCycle_calculate+0x60>
 6fc:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <dutyCycle>
 700:	02 c0       	rjmp	.+4      	; 0x706 <pid_dutyCycle_calculate+0x64>
  else                                   { dutyCycle = (uint8_t)(summedPID); }
 702:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <dutyCycle>

  return dutyCycle;
 706:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <dutyCycle>
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <__divmodsi4>:
 710:	05 2e       	mov	r0, r21
 712:	97 fb       	bst	r25, 7
 714:	1e f4       	brtc	.+6      	; 0x71c <__divmodsi4+0xc>
 716:	00 94       	com	r0
 718:	0e 94 9f 03 	call	0x73e	; 0x73e <__negsi2>
 71c:	57 fd       	sbrc	r21, 7
 71e:	07 d0       	rcall	.+14     	; 0x72e <__divmodsi4_neg2>
 720:	0e 94 b2 03 	call	0x764	; 0x764 <__udivmodsi4>
 724:	07 fc       	sbrc	r0, 7
 726:	03 d0       	rcall	.+6      	; 0x72e <__divmodsi4_neg2>
 728:	4e f4       	brtc	.+18     	; 0x73c <__divmodsi4_exit>
 72a:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__negsi2>

0000072e <__divmodsi4_neg2>:
 72e:	50 95       	com	r21
 730:	40 95       	com	r20
 732:	30 95       	com	r19
 734:	21 95       	neg	r18
 736:	3f 4f       	sbci	r19, 0xFF	; 255
 738:	4f 4f       	sbci	r20, 0xFF	; 255
 73a:	5f 4f       	sbci	r21, 0xFF	; 255

0000073c <__divmodsi4_exit>:
 73c:	08 95       	ret

0000073e <__negsi2>:
 73e:	90 95       	com	r25
 740:	80 95       	com	r24
 742:	70 95       	com	r23
 744:	61 95       	neg	r22
 746:	7f 4f       	sbci	r23, 0xFF	; 255
 748:	8f 4f       	sbci	r24, 0xFF	; 255
 74a:	9f 4f       	sbci	r25, 0xFF	; 255
 74c:	08 95       	ret

0000074e <__muluhisi3>:
 74e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__umulhisi3>
 752:	a5 9f       	mul	r26, r21
 754:	90 0d       	add	r25, r0
 756:	b4 9f       	mul	r27, r20
 758:	90 0d       	add	r25, r0
 75a:	a4 9f       	mul	r26, r20
 75c:	80 0d       	add	r24, r0
 75e:	91 1d       	adc	r25, r1
 760:	11 24       	eor	r1, r1
 762:	08 95       	ret

00000764 <__udivmodsi4>:
 764:	a1 e2       	ldi	r26, 0x21	; 33
 766:	1a 2e       	mov	r1, r26
 768:	aa 1b       	sub	r26, r26
 76a:	bb 1b       	sub	r27, r27
 76c:	fd 01       	movw	r30, r26
 76e:	0d c0       	rjmp	.+26     	; 0x78a <__udivmodsi4_ep>

00000770 <__udivmodsi4_loop>:
 770:	aa 1f       	adc	r26, r26
 772:	bb 1f       	adc	r27, r27
 774:	ee 1f       	adc	r30, r30
 776:	ff 1f       	adc	r31, r31
 778:	a2 17       	cp	r26, r18
 77a:	b3 07       	cpc	r27, r19
 77c:	e4 07       	cpc	r30, r20
 77e:	f5 07       	cpc	r31, r21
 780:	20 f0       	brcs	.+8      	; 0x78a <__udivmodsi4_ep>
 782:	a2 1b       	sub	r26, r18
 784:	b3 0b       	sbc	r27, r19
 786:	e4 0b       	sbc	r30, r20
 788:	f5 0b       	sbc	r31, r21

0000078a <__udivmodsi4_ep>:
 78a:	66 1f       	adc	r22, r22
 78c:	77 1f       	adc	r23, r23
 78e:	88 1f       	adc	r24, r24
 790:	99 1f       	adc	r25, r25
 792:	1a 94       	dec	r1
 794:	69 f7       	brne	.-38     	; 0x770 <__udivmodsi4_loop>
 796:	60 95       	com	r22
 798:	70 95       	com	r23
 79a:	80 95       	com	r24
 79c:	90 95       	com	r25
 79e:	9b 01       	movw	r18, r22
 7a0:	ac 01       	movw	r20, r24
 7a2:	bd 01       	movw	r22, r26
 7a4:	cf 01       	movw	r24, r30
 7a6:	08 95       	ret

000007a8 <__umulhisi3>:
 7a8:	a2 9f       	mul	r26, r18
 7aa:	b0 01       	movw	r22, r0
 7ac:	b3 9f       	mul	r27, r19
 7ae:	c0 01       	movw	r24, r0
 7b0:	a3 9f       	mul	r26, r19
 7b2:	70 0d       	add	r23, r0
 7b4:	81 1d       	adc	r24, r1
 7b6:	11 24       	eor	r1, r1
 7b8:	91 1d       	adc	r25, r1
 7ba:	b2 9f       	mul	r27, r18
 7bc:	70 0d       	add	r23, r0
 7be:	81 1d       	adc	r24, r1
 7c0:	11 24       	eor	r1, r1
 7c2:	91 1d       	adc	r25, r1
 7c4:	08 95       	ret

000007c6 <_exit>:
 7c6:	f8 94       	cli

000007c8 <__stop_program>:
 7c8:	ff cf       	rjmp	.-2      	; 0x7c8 <__stop_program>
